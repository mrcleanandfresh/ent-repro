// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"test/db/choice"
	"test/db/question"
	"test/db/questiontype"
	"test/db/schema/schematype"
	"test/db/surveyquestionanswers"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// QuestionCreate is the builder for creating a Question entity.
type QuestionCreate struct {
	config
	mutation *QuestionMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetText sets the "text" field.
func (qc *QuestionCreate) SetText(s string) *QuestionCreate {
	qc.mutation.SetText(s)
	return qc
}

// SetSubText sets the "sub_text" field.
func (qc *QuestionCreate) SetSubText(s string) *QuestionCreate {
	qc.mutation.SetSubText(s)
	return qc
}

// SetNillableSubText sets the "sub_text" field if the given value is not nil.
func (qc *QuestionCreate) SetNillableSubText(s *string) *QuestionCreate {
	if s != nil {
		qc.SetSubText(*s)
	}
	return qc
}

// SetWeight sets the "weight" field.
func (qc *QuestionCreate) SetWeight(i int) *QuestionCreate {
	qc.mutation.SetWeight(i)
	return qc
}

// SetNillableWeight sets the "weight" field if the given value is not nil.
func (qc *QuestionCreate) SetNillableWeight(i *int) *QuestionCreate {
	if i != nil {
		qc.SetWeight(*i)
	}
	return qc
}

// SetRequired sets the "required" field.
func (qc *QuestionCreate) SetRequired(b bool) *QuestionCreate {
	qc.mutation.SetRequired(b)
	return qc
}

// SetNillableRequired sets the "required" field if the given value is not nil.
func (qc *QuestionCreate) SetNillableRequired(b *bool) *QuestionCreate {
	if b != nil {
		qc.SetRequired(*b)
	}
	return qc
}

// SetMeta sets the "meta" field.
func (qc *QuestionCreate) SetMeta(s *schematype.Metadata) *QuestionCreate {
	qc.mutation.SetMeta(s)
	return qc
}

// SetCreatedAt sets the "created_at" field.
func (qc *QuestionCreate) SetCreatedAt(t time.Time) *QuestionCreate {
	qc.mutation.SetCreatedAt(t)
	return qc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (qc *QuestionCreate) SetNillableCreatedAt(t *time.Time) *QuestionCreate {
	if t != nil {
		qc.SetCreatedAt(*t)
	}
	return qc
}

// SetUpdatedAt sets the "updated_at" field.
func (qc *QuestionCreate) SetUpdatedAt(t time.Time) *QuestionCreate {
	qc.mutation.SetUpdatedAt(t)
	return qc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (qc *QuestionCreate) SetNillableUpdatedAt(t *time.Time) *QuestionCreate {
	if t != nil {
		qc.SetUpdatedAt(*t)
	}
	return qc
}

// SetID sets the "id" field.
func (qc *QuestionCreate) SetID(u uuid.UUID) *QuestionCreate {
	qc.mutation.SetID(u)
	return qc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (qc *QuestionCreate) SetNillableID(u *uuid.UUID) *QuestionCreate {
	if u != nil {
		qc.SetID(*u)
	}
	return qc
}

// AddSurveyQuestionAnswerIDs adds the "survey_question_answers" edge to the SurveyQuestionAnswers entity by IDs.
func (qc *QuestionCreate) AddSurveyQuestionAnswerIDs(ids ...int) *QuestionCreate {
	qc.mutation.AddSurveyQuestionAnswerIDs(ids...)
	return qc
}

// AddSurveyQuestionAnswers adds the "survey_question_answers" edges to the SurveyQuestionAnswers entity.
func (qc *QuestionCreate) AddSurveyQuestionAnswers(s ...*SurveyQuestionAnswers) *QuestionCreate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return qc.AddSurveyQuestionAnswerIDs(ids...)
}

// AddQuestionTypeIDs adds the "questionType" edge to the QuestionType entity by IDs.
func (qc *QuestionCreate) AddQuestionTypeIDs(ids ...int) *QuestionCreate {
	qc.mutation.AddQuestionTypeIDs(ids...)
	return qc
}

// AddQuestionType adds the "questionType" edges to the QuestionType entity.
func (qc *QuestionCreate) AddQuestionType(q ...*QuestionType) *QuestionCreate {
	ids := make([]int, len(q))
	for i := range q {
		ids[i] = q[i].ID
	}
	return qc.AddQuestionTypeIDs(ids...)
}

// AddChoiceIDs adds the "choices" edge to the Choice entity by IDs.
func (qc *QuestionCreate) AddChoiceIDs(ids ...int) *QuestionCreate {
	qc.mutation.AddChoiceIDs(ids...)
	return qc
}

// AddChoices adds the "choices" edges to the Choice entity.
func (qc *QuestionCreate) AddChoices(c ...*Choice) *QuestionCreate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return qc.AddChoiceIDs(ids...)
}

// Mutation returns the QuestionMutation object of the builder.
func (qc *QuestionCreate) Mutation() *QuestionMutation {
	return qc.mutation
}

// Save creates the Question in the database.
func (qc *QuestionCreate) Save(ctx context.Context) (*Question, error) {
	if err := qc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, qc.sqlSave, qc.mutation, qc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (qc *QuestionCreate) SaveX(ctx context.Context) *Question {
	v, err := qc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (qc *QuestionCreate) Exec(ctx context.Context) error {
	_, err := qc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (qc *QuestionCreate) ExecX(ctx context.Context) {
	if err := qc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (qc *QuestionCreate) defaults() error {
	if _, ok := qc.mutation.Weight(); !ok {
		v := question.DefaultWeight
		qc.mutation.SetWeight(v)
	}
	if _, ok := qc.mutation.Required(); !ok {
		v := question.DefaultRequired
		qc.mutation.SetRequired(v)
	}
	if _, ok := qc.mutation.Meta(); !ok {
		v := question.DefaultMeta
		qc.mutation.SetMeta(v)
	}
	if _, ok := qc.mutation.CreatedAt(); !ok {
		if question.DefaultCreatedAt == nil {
			return fmt.Errorf("db: uninitialized question.DefaultCreatedAt (forgotten import db/runtime?)")
		}
		v := question.DefaultCreatedAt()
		qc.mutation.SetCreatedAt(v)
	}
	if _, ok := qc.mutation.UpdatedAt(); !ok {
		if question.DefaultUpdatedAt == nil {
			return fmt.Errorf("db: uninitialized question.DefaultUpdatedAt (forgotten import db/runtime?)")
		}
		v := question.DefaultUpdatedAt()
		qc.mutation.SetUpdatedAt(v)
	}
	if _, ok := qc.mutation.ID(); !ok {
		if question.DefaultID == nil {
			return fmt.Errorf("db: uninitialized question.DefaultID (forgotten import db/runtime?)")
		}
		v := question.DefaultID()
		qc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (qc *QuestionCreate) check() error {
	if _, ok := qc.mutation.Text(); !ok {
		return &ValidationError{Name: "text", err: errors.New(`db: missing required field "Question.text"`)}
	}
	if _, ok := qc.mutation.Meta(); !ok {
		return &ValidationError{Name: "meta", err: errors.New(`db: missing required field "Question.meta"`)}
	}
	if _, ok := qc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`db: missing required field "Question.created_at"`)}
	}
	if _, ok := qc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`db: missing required field "Question.updated_at"`)}
	}
	return nil
}

func (qc *QuestionCreate) sqlSave(ctx context.Context) (*Question, error) {
	if err := qc.check(); err != nil {
		return nil, err
	}
	_node, _spec := qc.createSpec()
	if err := sqlgraph.CreateNode(ctx, qc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	qc.mutation.id = &_node.ID
	qc.mutation.done = true
	return _node, nil
}

func (qc *QuestionCreate) createSpec() (*Question, *sqlgraph.CreateSpec) {
	var (
		_node = &Question{config: qc.config}
		_spec = sqlgraph.NewCreateSpec(question.Table, sqlgraph.NewFieldSpec(question.FieldID, field.TypeUUID))
	)
	_spec.OnConflict = qc.conflict
	if id, ok := qc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := qc.mutation.Text(); ok {
		_spec.SetField(question.FieldText, field.TypeString, value)
		_node.Text = value
	}
	if value, ok := qc.mutation.SubText(); ok {
		_spec.SetField(question.FieldSubText, field.TypeString, value)
		_node.SubText = &value
	}
	if value, ok := qc.mutation.Weight(); ok {
		_spec.SetField(question.FieldWeight, field.TypeInt, value)
		_node.Weight = &value
	}
	if value, ok := qc.mutation.Required(); ok {
		_spec.SetField(question.FieldRequired, field.TypeBool, value)
		_node.Required = &value
	}
	if value, ok := qc.mutation.Meta(); ok {
		_spec.SetField(question.FieldMeta, field.TypeJSON, value)
		_node.Meta = value
	}
	if value, ok := qc.mutation.CreatedAt(); ok {
		_spec.SetField(question.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := qc.mutation.UpdatedAt(); ok {
		_spec.SetField(question.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := qc.mutation.SurveyQuestionAnswersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   question.SurveyQuestionAnswersTable,
			Columns: []string{question.SurveyQuestionAnswersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(surveyquestionanswers.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := qc.mutation.QuestionTypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   question.QuestionTypeTable,
			Columns: question.QuestionTypePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(questiontype.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := qc.mutation.ChoicesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   question.ChoicesTable,
			Columns: []string{question.ChoicesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(choice.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Question.Create().
//		SetText(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.QuestionUpsert) {
//			SetText(v+v).
//		}).
//		Exec(ctx)
func (qc *QuestionCreate) OnConflict(opts ...sql.ConflictOption) *QuestionUpsertOne {
	qc.conflict = opts
	return &QuestionUpsertOne{
		create: qc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Question.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (qc *QuestionCreate) OnConflictColumns(columns ...string) *QuestionUpsertOne {
	qc.conflict = append(qc.conflict, sql.ConflictColumns(columns...))
	return &QuestionUpsertOne{
		create: qc,
	}
}

type (
	// QuestionUpsertOne is the builder for "upsert"-ing
	//  one Question node.
	QuestionUpsertOne struct {
		create *QuestionCreate
	}

	// QuestionUpsert is the "OnConflict" setter.
	QuestionUpsert struct {
		*sql.UpdateSet
	}
)

// SetText sets the "text" field.
func (u *QuestionUpsert) SetText(v string) *QuestionUpsert {
	u.Set(question.FieldText, v)
	return u
}

// UpdateText sets the "text" field to the value that was provided on create.
func (u *QuestionUpsert) UpdateText() *QuestionUpsert {
	u.SetExcluded(question.FieldText)
	return u
}

// SetSubText sets the "sub_text" field.
func (u *QuestionUpsert) SetSubText(v string) *QuestionUpsert {
	u.Set(question.FieldSubText, v)
	return u
}

// UpdateSubText sets the "sub_text" field to the value that was provided on create.
func (u *QuestionUpsert) UpdateSubText() *QuestionUpsert {
	u.SetExcluded(question.FieldSubText)
	return u
}

// ClearSubText clears the value of the "sub_text" field.
func (u *QuestionUpsert) ClearSubText() *QuestionUpsert {
	u.SetNull(question.FieldSubText)
	return u
}

// SetWeight sets the "weight" field.
func (u *QuestionUpsert) SetWeight(v int) *QuestionUpsert {
	u.Set(question.FieldWeight, v)
	return u
}

// UpdateWeight sets the "weight" field to the value that was provided on create.
func (u *QuestionUpsert) UpdateWeight() *QuestionUpsert {
	u.SetExcluded(question.FieldWeight)
	return u
}

// AddWeight adds v to the "weight" field.
func (u *QuestionUpsert) AddWeight(v int) *QuestionUpsert {
	u.Add(question.FieldWeight, v)
	return u
}

// ClearWeight clears the value of the "weight" field.
func (u *QuestionUpsert) ClearWeight() *QuestionUpsert {
	u.SetNull(question.FieldWeight)
	return u
}

// SetRequired sets the "required" field.
func (u *QuestionUpsert) SetRequired(v bool) *QuestionUpsert {
	u.Set(question.FieldRequired, v)
	return u
}

// UpdateRequired sets the "required" field to the value that was provided on create.
func (u *QuestionUpsert) UpdateRequired() *QuestionUpsert {
	u.SetExcluded(question.FieldRequired)
	return u
}

// ClearRequired clears the value of the "required" field.
func (u *QuestionUpsert) ClearRequired() *QuestionUpsert {
	u.SetNull(question.FieldRequired)
	return u
}

// SetMeta sets the "meta" field.
func (u *QuestionUpsert) SetMeta(v *schematype.Metadata) *QuestionUpsert {
	u.Set(question.FieldMeta, v)
	return u
}

// UpdateMeta sets the "meta" field to the value that was provided on create.
func (u *QuestionUpsert) UpdateMeta() *QuestionUpsert {
	u.SetExcluded(question.FieldMeta)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *QuestionUpsert) SetUpdatedAt(v time.Time) *QuestionUpsert {
	u.Set(question.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *QuestionUpsert) UpdateUpdatedAt() *QuestionUpsert {
	u.SetExcluded(question.FieldUpdatedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Question.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(question.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *QuestionUpsertOne) UpdateNewValues() *QuestionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(question.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(question.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Question.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *QuestionUpsertOne) Ignore() *QuestionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *QuestionUpsertOne) DoNothing() *QuestionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the QuestionCreate.OnConflict
// documentation for more info.
func (u *QuestionUpsertOne) Update(set func(*QuestionUpsert)) *QuestionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&QuestionUpsert{UpdateSet: update})
	}))
	return u
}

// SetText sets the "text" field.
func (u *QuestionUpsertOne) SetText(v string) *QuestionUpsertOne {
	return u.Update(func(s *QuestionUpsert) {
		s.SetText(v)
	})
}

// UpdateText sets the "text" field to the value that was provided on create.
func (u *QuestionUpsertOne) UpdateText() *QuestionUpsertOne {
	return u.Update(func(s *QuestionUpsert) {
		s.UpdateText()
	})
}

// SetSubText sets the "sub_text" field.
func (u *QuestionUpsertOne) SetSubText(v string) *QuestionUpsertOne {
	return u.Update(func(s *QuestionUpsert) {
		s.SetSubText(v)
	})
}

// UpdateSubText sets the "sub_text" field to the value that was provided on create.
func (u *QuestionUpsertOne) UpdateSubText() *QuestionUpsertOne {
	return u.Update(func(s *QuestionUpsert) {
		s.UpdateSubText()
	})
}

// ClearSubText clears the value of the "sub_text" field.
func (u *QuestionUpsertOne) ClearSubText() *QuestionUpsertOne {
	return u.Update(func(s *QuestionUpsert) {
		s.ClearSubText()
	})
}

// SetWeight sets the "weight" field.
func (u *QuestionUpsertOne) SetWeight(v int) *QuestionUpsertOne {
	return u.Update(func(s *QuestionUpsert) {
		s.SetWeight(v)
	})
}

// AddWeight adds v to the "weight" field.
func (u *QuestionUpsertOne) AddWeight(v int) *QuestionUpsertOne {
	return u.Update(func(s *QuestionUpsert) {
		s.AddWeight(v)
	})
}

// UpdateWeight sets the "weight" field to the value that was provided on create.
func (u *QuestionUpsertOne) UpdateWeight() *QuestionUpsertOne {
	return u.Update(func(s *QuestionUpsert) {
		s.UpdateWeight()
	})
}

// ClearWeight clears the value of the "weight" field.
func (u *QuestionUpsertOne) ClearWeight() *QuestionUpsertOne {
	return u.Update(func(s *QuestionUpsert) {
		s.ClearWeight()
	})
}

// SetRequired sets the "required" field.
func (u *QuestionUpsertOne) SetRequired(v bool) *QuestionUpsertOne {
	return u.Update(func(s *QuestionUpsert) {
		s.SetRequired(v)
	})
}

// UpdateRequired sets the "required" field to the value that was provided on create.
func (u *QuestionUpsertOne) UpdateRequired() *QuestionUpsertOne {
	return u.Update(func(s *QuestionUpsert) {
		s.UpdateRequired()
	})
}

// ClearRequired clears the value of the "required" field.
func (u *QuestionUpsertOne) ClearRequired() *QuestionUpsertOne {
	return u.Update(func(s *QuestionUpsert) {
		s.ClearRequired()
	})
}

// SetMeta sets the "meta" field.
func (u *QuestionUpsertOne) SetMeta(v *schematype.Metadata) *QuestionUpsertOne {
	return u.Update(func(s *QuestionUpsert) {
		s.SetMeta(v)
	})
}

// UpdateMeta sets the "meta" field to the value that was provided on create.
func (u *QuestionUpsertOne) UpdateMeta() *QuestionUpsertOne {
	return u.Update(func(s *QuestionUpsert) {
		s.UpdateMeta()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *QuestionUpsertOne) SetUpdatedAt(v time.Time) *QuestionUpsertOne {
	return u.Update(func(s *QuestionUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *QuestionUpsertOne) UpdateUpdatedAt() *QuestionUpsertOne {
	return u.Update(func(s *QuestionUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *QuestionUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("db: missing options for QuestionCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *QuestionUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *QuestionUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("db: QuestionUpsertOne.ID is not supported by MySQL driver. Use QuestionUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *QuestionUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// QuestionCreateBulk is the builder for creating many Question entities in bulk.
type QuestionCreateBulk struct {
	config
	err      error
	builders []*QuestionCreate
	conflict []sql.ConflictOption
}

// Save creates the Question entities in the database.
func (qcb *QuestionCreateBulk) Save(ctx context.Context) ([]*Question, error) {
	if qcb.err != nil {
		return nil, qcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(qcb.builders))
	nodes := make([]*Question, len(qcb.builders))
	mutators := make([]Mutator, len(qcb.builders))
	for i := range qcb.builders {
		func(i int, root context.Context) {
			builder := qcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*QuestionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, qcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = qcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, qcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, qcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (qcb *QuestionCreateBulk) SaveX(ctx context.Context) []*Question {
	v, err := qcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (qcb *QuestionCreateBulk) Exec(ctx context.Context) error {
	_, err := qcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (qcb *QuestionCreateBulk) ExecX(ctx context.Context) {
	if err := qcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Question.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.QuestionUpsert) {
//			SetText(v+v).
//		}).
//		Exec(ctx)
func (qcb *QuestionCreateBulk) OnConflict(opts ...sql.ConflictOption) *QuestionUpsertBulk {
	qcb.conflict = opts
	return &QuestionUpsertBulk{
		create: qcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Question.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (qcb *QuestionCreateBulk) OnConflictColumns(columns ...string) *QuestionUpsertBulk {
	qcb.conflict = append(qcb.conflict, sql.ConflictColumns(columns...))
	return &QuestionUpsertBulk{
		create: qcb,
	}
}

// QuestionUpsertBulk is the builder for "upsert"-ing
// a bulk of Question nodes.
type QuestionUpsertBulk struct {
	create *QuestionCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Question.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(question.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *QuestionUpsertBulk) UpdateNewValues() *QuestionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(question.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(question.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Question.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *QuestionUpsertBulk) Ignore() *QuestionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *QuestionUpsertBulk) DoNothing() *QuestionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the QuestionCreateBulk.OnConflict
// documentation for more info.
func (u *QuestionUpsertBulk) Update(set func(*QuestionUpsert)) *QuestionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&QuestionUpsert{UpdateSet: update})
	}))
	return u
}

// SetText sets the "text" field.
func (u *QuestionUpsertBulk) SetText(v string) *QuestionUpsertBulk {
	return u.Update(func(s *QuestionUpsert) {
		s.SetText(v)
	})
}

// UpdateText sets the "text" field to the value that was provided on create.
func (u *QuestionUpsertBulk) UpdateText() *QuestionUpsertBulk {
	return u.Update(func(s *QuestionUpsert) {
		s.UpdateText()
	})
}

// SetSubText sets the "sub_text" field.
func (u *QuestionUpsertBulk) SetSubText(v string) *QuestionUpsertBulk {
	return u.Update(func(s *QuestionUpsert) {
		s.SetSubText(v)
	})
}

// UpdateSubText sets the "sub_text" field to the value that was provided on create.
func (u *QuestionUpsertBulk) UpdateSubText() *QuestionUpsertBulk {
	return u.Update(func(s *QuestionUpsert) {
		s.UpdateSubText()
	})
}

// ClearSubText clears the value of the "sub_text" field.
func (u *QuestionUpsertBulk) ClearSubText() *QuestionUpsertBulk {
	return u.Update(func(s *QuestionUpsert) {
		s.ClearSubText()
	})
}

// SetWeight sets the "weight" field.
func (u *QuestionUpsertBulk) SetWeight(v int) *QuestionUpsertBulk {
	return u.Update(func(s *QuestionUpsert) {
		s.SetWeight(v)
	})
}

// AddWeight adds v to the "weight" field.
func (u *QuestionUpsertBulk) AddWeight(v int) *QuestionUpsertBulk {
	return u.Update(func(s *QuestionUpsert) {
		s.AddWeight(v)
	})
}

// UpdateWeight sets the "weight" field to the value that was provided on create.
func (u *QuestionUpsertBulk) UpdateWeight() *QuestionUpsertBulk {
	return u.Update(func(s *QuestionUpsert) {
		s.UpdateWeight()
	})
}

// ClearWeight clears the value of the "weight" field.
func (u *QuestionUpsertBulk) ClearWeight() *QuestionUpsertBulk {
	return u.Update(func(s *QuestionUpsert) {
		s.ClearWeight()
	})
}

// SetRequired sets the "required" field.
func (u *QuestionUpsertBulk) SetRequired(v bool) *QuestionUpsertBulk {
	return u.Update(func(s *QuestionUpsert) {
		s.SetRequired(v)
	})
}

// UpdateRequired sets the "required" field to the value that was provided on create.
func (u *QuestionUpsertBulk) UpdateRequired() *QuestionUpsertBulk {
	return u.Update(func(s *QuestionUpsert) {
		s.UpdateRequired()
	})
}

// ClearRequired clears the value of the "required" field.
func (u *QuestionUpsertBulk) ClearRequired() *QuestionUpsertBulk {
	return u.Update(func(s *QuestionUpsert) {
		s.ClearRequired()
	})
}

// SetMeta sets the "meta" field.
func (u *QuestionUpsertBulk) SetMeta(v *schematype.Metadata) *QuestionUpsertBulk {
	return u.Update(func(s *QuestionUpsert) {
		s.SetMeta(v)
	})
}

// UpdateMeta sets the "meta" field to the value that was provided on create.
func (u *QuestionUpsertBulk) UpdateMeta() *QuestionUpsertBulk {
	return u.Update(func(s *QuestionUpsert) {
		s.UpdateMeta()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *QuestionUpsertBulk) SetUpdatedAt(v time.Time) *QuestionUpsertBulk {
	return u.Update(func(s *QuestionUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *QuestionUpsertBulk) UpdateUpdatedAt() *QuestionUpsertBulk {
	return u.Update(func(s *QuestionUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *QuestionUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("db: OnConflict was set for builder %d. Set it on the QuestionCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("db: missing options for QuestionCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *QuestionUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
