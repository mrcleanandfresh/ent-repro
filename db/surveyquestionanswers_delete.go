// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"test/db/predicate"
	"test/db/surveyquestionanswers"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SurveyQuestionAnswersDelete is the builder for deleting a SurveyQuestionAnswers entity.
type SurveyQuestionAnswersDelete struct {
	config
	hooks    []Hook
	mutation *SurveyQuestionAnswersMutation
}

// Where appends a list predicates to the SurveyQuestionAnswersDelete builder.
func (sqad *SurveyQuestionAnswersDelete) Where(ps ...predicate.SurveyQuestionAnswers) *SurveyQuestionAnswersDelete {
	sqad.mutation.Where(ps...)
	return sqad
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (sqad *SurveyQuestionAnswersDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, sqad.sqlExec, sqad.mutation, sqad.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (sqad *SurveyQuestionAnswersDelete) ExecX(ctx context.Context) int {
	n, err := sqad.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (sqad *SurveyQuestionAnswersDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(surveyquestionanswers.Table, sqlgraph.NewFieldSpec(surveyquestionanswers.FieldID, field.TypeInt))
	if ps := sqad.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, sqad.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	sqad.mutation.done = true
	return affected, err
}

// SurveyQuestionAnswersDeleteOne is the builder for deleting a single SurveyQuestionAnswers entity.
type SurveyQuestionAnswersDeleteOne struct {
	sqad *SurveyQuestionAnswersDelete
}

// Where appends a list predicates to the SurveyQuestionAnswersDelete builder.
func (sqado *SurveyQuestionAnswersDeleteOne) Where(ps ...predicate.SurveyQuestionAnswers) *SurveyQuestionAnswersDeleteOne {
	sqado.sqad.mutation.Where(ps...)
	return sqado
}

// Exec executes the deletion query.
func (sqado *SurveyQuestionAnswersDeleteOne) Exec(ctx context.Context) error {
	n, err := sqado.sqad.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{surveyquestionanswers.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (sqado *SurveyQuestionAnswersDeleteOne) ExecX(ctx context.Context) {
	if err := sqado.Exec(ctx); err != nil {
		panic(err)
	}
}
