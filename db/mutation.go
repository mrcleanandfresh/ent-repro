// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"test/db/answer"
	"test/db/choice"
	"test/db/customer"
	"test/db/predicate"
	"test/db/project"
	"test/db/question"
	"test/db/questiontype"
	"test/db/schema/schematype"
	"test/db/survey"
	"test/db/surveyinvitation"
	"test/db/surveyquestionanswers"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeAnswer                = "Answer"
	TypeChoice                = "Choice"
	TypeCustomer              = "Customer"
	TypeProject               = "Project"
	TypeQuestion              = "Question"
	TypeQuestionType          = "QuestionType"
	TypeSurvey                = "Survey"
	TypeSurveyInvitation      = "SurveyInvitation"
	TypeSurveyQuestionAnswers = "SurveyQuestionAnswers"
)

// AnswerMutation represents an operation that mutates the Answer nodes in the graph.
type AnswerMutation struct {
	config
	op                             Op
	typ                            string
	id                             *uuid.UUID
	text                           *string
	created_at                     *time.Time
	clearedFields                  map[string]struct{}
	choices                        map[int]struct{}
	removedchoices                 map[int]struct{}
	clearedchoices                 bool
	survey_question_answers        map[int]struct{}
	removedsurvey_question_answers map[int]struct{}
	clearedsurvey_question_answers bool
	done                           bool
	oldValue                       func(context.Context) (*Answer, error)
	predicates                     []predicate.Answer
}

var _ ent.Mutation = (*AnswerMutation)(nil)

// answerOption allows management of the mutation configuration using functional options.
type answerOption func(*AnswerMutation)

// newAnswerMutation creates new mutation for the Answer entity.
func newAnswerMutation(c config, op Op, opts ...answerOption) *AnswerMutation {
	m := &AnswerMutation{
		config:        c,
		op:            op,
		typ:           TypeAnswer,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withAnswerID sets the ID field of the mutation.
func withAnswerID(id uuid.UUID) answerOption {
	return func(m *AnswerMutation) {
		var (
			err   error
			once  sync.Once
			value *Answer
		)
		m.oldValue = func(ctx context.Context) (*Answer, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Answer.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withAnswer sets the old Answer of the mutation.
func withAnswer(node *Answer) answerOption {
	return func(m *AnswerMutation) {
		m.oldValue = func(context.Context) (*Answer, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m AnswerMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m AnswerMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("db: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Answer entities.
func (m *AnswerMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *AnswerMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *AnswerMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Answer.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetText sets the "text" field.
func (m *AnswerMutation) SetText(s string) {
	m.text = &s
}

// Text returns the value of the "text" field in the mutation.
func (m *AnswerMutation) Text() (r string, exists bool) {
	v := m.text
	if v == nil {
		return
	}
	return *v, true
}

// OldText returns the old "text" field's value of the Answer entity.
// If the Answer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AnswerMutation) OldText(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldText is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldText requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldText: %w", err)
	}
	return oldValue.Text, nil
}

// ResetText resets all changes to the "text" field.
func (m *AnswerMutation) ResetText() {
	m.text = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *AnswerMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *AnswerMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Answer entity.
// If the Answer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AnswerMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *AnswerMutation) ResetCreatedAt() {
	m.created_at = nil
}

// AddChoiceIDs adds the "choices" edge to the Choice entity by ids.
func (m *AnswerMutation) AddChoiceIDs(ids ...int) {
	if m.choices == nil {
		m.choices = make(map[int]struct{})
	}
	for i := range ids {
		m.choices[ids[i]] = struct{}{}
	}
}

// ClearChoices clears the "choices" edge to the Choice entity.
func (m *AnswerMutation) ClearChoices() {
	m.clearedchoices = true
}

// ChoicesCleared reports if the "choices" edge to the Choice entity was cleared.
func (m *AnswerMutation) ChoicesCleared() bool {
	return m.clearedchoices
}

// RemoveChoiceIDs removes the "choices" edge to the Choice entity by IDs.
func (m *AnswerMutation) RemoveChoiceIDs(ids ...int) {
	if m.removedchoices == nil {
		m.removedchoices = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.choices, ids[i])
		m.removedchoices[ids[i]] = struct{}{}
	}
}

// RemovedChoices returns the removed IDs of the "choices" edge to the Choice entity.
func (m *AnswerMutation) RemovedChoicesIDs() (ids []int) {
	for id := range m.removedchoices {
		ids = append(ids, id)
	}
	return
}

// ChoicesIDs returns the "choices" edge IDs in the mutation.
func (m *AnswerMutation) ChoicesIDs() (ids []int) {
	for id := range m.choices {
		ids = append(ids, id)
	}
	return
}

// ResetChoices resets all changes to the "choices" edge.
func (m *AnswerMutation) ResetChoices() {
	m.choices = nil
	m.clearedchoices = false
	m.removedchoices = nil
}

// AddSurveyQuestionAnswerIDs adds the "survey_question_answers" edge to the SurveyQuestionAnswers entity by ids.
func (m *AnswerMutation) AddSurveyQuestionAnswerIDs(ids ...int) {
	if m.survey_question_answers == nil {
		m.survey_question_answers = make(map[int]struct{})
	}
	for i := range ids {
		m.survey_question_answers[ids[i]] = struct{}{}
	}
}

// ClearSurveyQuestionAnswers clears the "survey_question_answers" edge to the SurveyQuestionAnswers entity.
func (m *AnswerMutation) ClearSurveyQuestionAnswers() {
	m.clearedsurvey_question_answers = true
}

// SurveyQuestionAnswersCleared reports if the "survey_question_answers" edge to the SurveyQuestionAnswers entity was cleared.
func (m *AnswerMutation) SurveyQuestionAnswersCleared() bool {
	return m.clearedsurvey_question_answers
}

// RemoveSurveyQuestionAnswerIDs removes the "survey_question_answers" edge to the SurveyQuestionAnswers entity by IDs.
func (m *AnswerMutation) RemoveSurveyQuestionAnswerIDs(ids ...int) {
	if m.removedsurvey_question_answers == nil {
		m.removedsurvey_question_answers = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.survey_question_answers, ids[i])
		m.removedsurvey_question_answers[ids[i]] = struct{}{}
	}
}

// RemovedSurveyQuestionAnswers returns the removed IDs of the "survey_question_answers" edge to the SurveyQuestionAnswers entity.
func (m *AnswerMutation) RemovedSurveyQuestionAnswersIDs() (ids []int) {
	for id := range m.removedsurvey_question_answers {
		ids = append(ids, id)
	}
	return
}

// SurveyQuestionAnswersIDs returns the "survey_question_answers" edge IDs in the mutation.
func (m *AnswerMutation) SurveyQuestionAnswersIDs() (ids []int) {
	for id := range m.survey_question_answers {
		ids = append(ids, id)
	}
	return
}

// ResetSurveyQuestionAnswers resets all changes to the "survey_question_answers" edge.
func (m *AnswerMutation) ResetSurveyQuestionAnswers() {
	m.survey_question_answers = nil
	m.clearedsurvey_question_answers = false
	m.removedsurvey_question_answers = nil
}

// Where appends a list predicates to the AnswerMutation builder.
func (m *AnswerMutation) Where(ps ...predicate.Answer) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the AnswerMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *AnswerMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Answer, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *AnswerMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *AnswerMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Answer).
func (m *AnswerMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *AnswerMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.text != nil {
		fields = append(fields, answer.FieldText)
	}
	if m.created_at != nil {
		fields = append(fields, answer.FieldCreatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *AnswerMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case answer.FieldText:
		return m.Text()
	case answer.FieldCreatedAt:
		return m.CreatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *AnswerMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case answer.FieldText:
		return m.OldText(ctx)
	case answer.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Answer field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AnswerMutation) SetField(name string, value ent.Value) error {
	switch name {
	case answer.FieldText:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetText(v)
		return nil
	case answer.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Answer field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *AnswerMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *AnswerMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AnswerMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Answer numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *AnswerMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *AnswerMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *AnswerMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Answer nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *AnswerMutation) ResetField(name string) error {
	switch name {
	case answer.FieldText:
		m.ResetText()
		return nil
	case answer.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	}
	return fmt.Errorf("unknown Answer field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *AnswerMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.choices != nil {
		edges = append(edges, answer.EdgeChoices)
	}
	if m.survey_question_answers != nil {
		edges = append(edges, answer.EdgeSurveyQuestionAnswers)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *AnswerMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case answer.EdgeChoices:
		ids := make([]ent.Value, 0, len(m.choices))
		for id := range m.choices {
			ids = append(ids, id)
		}
		return ids
	case answer.EdgeSurveyQuestionAnswers:
		ids := make([]ent.Value, 0, len(m.survey_question_answers))
		for id := range m.survey_question_answers {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *AnswerMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedchoices != nil {
		edges = append(edges, answer.EdgeChoices)
	}
	if m.removedsurvey_question_answers != nil {
		edges = append(edges, answer.EdgeSurveyQuestionAnswers)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *AnswerMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case answer.EdgeChoices:
		ids := make([]ent.Value, 0, len(m.removedchoices))
		for id := range m.removedchoices {
			ids = append(ids, id)
		}
		return ids
	case answer.EdgeSurveyQuestionAnswers:
		ids := make([]ent.Value, 0, len(m.removedsurvey_question_answers))
		for id := range m.removedsurvey_question_answers {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *AnswerMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedchoices {
		edges = append(edges, answer.EdgeChoices)
	}
	if m.clearedsurvey_question_answers {
		edges = append(edges, answer.EdgeSurveyQuestionAnswers)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *AnswerMutation) EdgeCleared(name string) bool {
	switch name {
	case answer.EdgeChoices:
		return m.clearedchoices
	case answer.EdgeSurveyQuestionAnswers:
		return m.clearedsurvey_question_answers
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *AnswerMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Answer unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *AnswerMutation) ResetEdge(name string) error {
	switch name {
	case answer.EdgeChoices:
		m.ResetChoices()
		return nil
	case answer.EdgeSurveyQuestionAnswers:
		m.ResetSurveyQuestionAnswers()
		return nil
	}
	return fmt.Errorf("unknown Answer edge %s", name)
}

// ChoiceMutation represents an operation that mutates the Choice nodes in the graph.
type ChoiceMutation struct {
	config
	op              Op
	typ             string
	id              *int
	label           *string
	value           *string
	clearedFields   map[string]struct{}
	answer          *uuid.UUID
	clearedanswer   bool
	question        *uuid.UUID
	clearedquestion bool
	done            bool
	oldValue        func(context.Context) (*Choice, error)
	predicates      []predicate.Choice
}

var _ ent.Mutation = (*ChoiceMutation)(nil)

// choiceOption allows management of the mutation configuration using functional options.
type choiceOption func(*ChoiceMutation)

// newChoiceMutation creates new mutation for the Choice entity.
func newChoiceMutation(c config, op Op, opts ...choiceOption) *ChoiceMutation {
	m := &ChoiceMutation{
		config:        c,
		op:            op,
		typ:           TypeChoice,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withChoiceID sets the ID field of the mutation.
func withChoiceID(id int) choiceOption {
	return func(m *ChoiceMutation) {
		var (
			err   error
			once  sync.Once
			value *Choice
		)
		m.oldValue = func(ctx context.Context) (*Choice, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Choice.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withChoice sets the old Choice of the mutation.
func withChoice(node *Choice) choiceOption {
	return func(m *ChoiceMutation) {
		m.oldValue = func(context.Context) (*Choice, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ChoiceMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ChoiceMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("db: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ChoiceMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ChoiceMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Choice.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetLabel sets the "label" field.
func (m *ChoiceMutation) SetLabel(s string) {
	m.label = &s
}

// Label returns the value of the "label" field in the mutation.
func (m *ChoiceMutation) Label() (r string, exists bool) {
	v := m.label
	if v == nil {
		return
	}
	return *v, true
}

// OldLabel returns the old "label" field's value of the Choice entity.
// If the Choice object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ChoiceMutation) OldLabel(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLabel is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLabel requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLabel: %w", err)
	}
	return oldValue.Label, nil
}

// ClearLabel clears the value of the "label" field.
func (m *ChoiceMutation) ClearLabel() {
	m.label = nil
	m.clearedFields[choice.FieldLabel] = struct{}{}
}

// LabelCleared returns if the "label" field was cleared in this mutation.
func (m *ChoiceMutation) LabelCleared() bool {
	_, ok := m.clearedFields[choice.FieldLabel]
	return ok
}

// ResetLabel resets all changes to the "label" field.
func (m *ChoiceMutation) ResetLabel() {
	m.label = nil
	delete(m.clearedFields, choice.FieldLabel)
}

// SetValue sets the "value" field.
func (m *ChoiceMutation) SetValue(s string) {
	m.value = &s
}

// Value returns the value of the "value" field in the mutation.
func (m *ChoiceMutation) Value() (r string, exists bool) {
	v := m.value
	if v == nil {
		return
	}
	return *v, true
}

// OldValue returns the old "value" field's value of the Choice entity.
// If the Choice object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ChoiceMutation) OldValue(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldValue is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldValue requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldValue: %w", err)
	}
	return oldValue.Value, nil
}

// ResetValue resets all changes to the "value" field.
func (m *ChoiceMutation) ResetValue() {
	m.value = nil
}

// SetAnswerID sets the "answer" edge to the Answer entity by id.
func (m *ChoiceMutation) SetAnswerID(id uuid.UUID) {
	m.answer = &id
}

// ClearAnswer clears the "answer" edge to the Answer entity.
func (m *ChoiceMutation) ClearAnswer() {
	m.clearedanswer = true
}

// AnswerCleared reports if the "answer" edge to the Answer entity was cleared.
func (m *ChoiceMutation) AnswerCleared() bool {
	return m.clearedanswer
}

// AnswerID returns the "answer" edge ID in the mutation.
func (m *ChoiceMutation) AnswerID() (id uuid.UUID, exists bool) {
	if m.answer != nil {
		return *m.answer, true
	}
	return
}

// AnswerIDs returns the "answer" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// AnswerID instead. It exists only for internal usage by the builders.
func (m *ChoiceMutation) AnswerIDs() (ids []uuid.UUID) {
	if id := m.answer; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetAnswer resets all changes to the "answer" edge.
func (m *ChoiceMutation) ResetAnswer() {
	m.answer = nil
	m.clearedanswer = false
}

// SetQuestionID sets the "question" edge to the Question entity by id.
func (m *ChoiceMutation) SetQuestionID(id uuid.UUID) {
	m.question = &id
}

// ClearQuestion clears the "question" edge to the Question entity.
func (m *ChoiceMutation) ClearQuestion() {
	m.clearedquestion = true
}

// QuestionCleared reports if the "question" edge to the Question entity was cleared.
func (m *ChoiceMutation) QuestionCleared() bool {
	return m.clearedquestion
}

// QuestionID returns the "question" edge ID in the mutation.
func (m *ChoiceMutation) QuestionID() (id uuid.UUID, exists bool) {
	if m.question != nil {
		return *m.question, true
	}
	return
}

// QuestionIDs returns the "question" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// QuestionID instead. It exists only for internal usage by the builders.
func (m *ChoiceMutation) QuestionIDs() (ids []uuid.UUID) {
	if id := m.question; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetQuestion resets all changes to the "question" edge.
func (m *ChoiceMutation) ResetQuestion() {
	m.question = nil
	m.clearedquestion = false
}

// Where appends a list predicates to the ChoiceMutation builder.
func (m *ChoiceMutation) Where(ps ...predicate.Choice) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ChoiceMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ChoiceMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Choice, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ChoiceMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ChoiceMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Choice).
func (m *ChoiceMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ChoiceMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.label != nil {
		fields = append(fields, choice.FieldLabel)
	}
	if m.value != nil {
		fields = append(fields, choice.FieldValue)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ChoiceMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case choice.FieldLabel:
		return m.Label()
	case choice.FieldValue:
		return m.Value()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ChoiceMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case choice.FieldLabel:
		return m.OldLabel(ctx)
	case choice.FieldValue:
		return m.OldValue(ctx)
	}
	return nil, fmt.Errorf("unknown Choice field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ChoiceMutation) SetField(name string, value ent.Value) error {
	switch name {
	case choice.FieldLabel:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLabel(v)
		return nil
	case choice.FieldValue:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetValue(v)
		return nil
	}
	return fmt.Errorf("unknown Choice field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ChoiceMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ChoiceMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ChoiceMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Choice numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ChoiceMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(choice.FieldLabel) {
		fields = append(fields, choice.FieldLabel)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ChoiceMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ChoiceMutation) ClearField(name string) error {
	switch name {
	case choice.FieldLabel:
		m.ClearLabel()
		return nil
	}
	return fmt.Errorf("unknown Choice nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ChoiceMutation) ResetField(name string) error {
	switch name {
	case choice.FieldLabel:
		m.ResetLabel()
		return nil
	case choice.FieldValue:
		m.ResetValue()
		return nil
	}
	return fmt.Errorf("unknown Choice field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ChoiceMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.answer != nil {
		edges = append(edges, choice.EdgeAnswer)
	}
	if m.question != nil {
		edges = append(edges, choice.EdgeQuestion)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ChoiceMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case choice.EdgeAnswer:
		if id := m.answer; id != nil {
			return []ent.Value{*id}
		}
	case choice.EdgeQuestion:
		if id := m.question; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ChoiceMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ChoiceMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ChoiceMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedanswer {
		edges = append(edges, choice.EdgeAnswer)
	}
	if m.clearedquestion {
		edges = append(edges, choice.EdgeQuestion)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ChoiceMutation) EdgeCleared(name string) bool {
	switch name {
	case choice.EdgeAnswer:
		return m.clearedanswer
	case choice.EdgeQuestion:
		return m.clearedquestion
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ChoiceMutation) ClearEdge(name string) error {
	switch name {
	case choice.EdgeAnswer:
		m.ClearAnswer()
		return nil
	case choice.EdgeQuestion:
		m.ClearQuestion()
		return nil
	}
	return fmt.Errorf("unknown Choice unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ChoiceMutation) ResetEdge(name string) error {
	switch name {
	case choice.EdgeAnswer:
		m.ResetAnswer()
		return nil
	case choice.EdgeQuestion:
		m.ResetQuestion()
		return nil
	}
	return fmt.Errorf("unknown Choice edge %s", name)
}

// CustomerMutation represents an operation that mutates the Customer nodes in the graph.
type CustomerMutation struct {
	config
	op                        Op
	typ                       string
	id                        *uuid.UUID
	prospective_id            *string
	user_id                   *string
	first_name                *string
	last_name                 *string
	email                     *string
	created_at                *time.Time
	updated_at                *time.Time
	clearedFields             map[string]struct{}
	survey_invitations        map[int]struct{}
	removedsurvey_invitations map[int]struct{}
	clearedsurvey_invitations bool
	projects                  map[uuid.UUID]struct{}
	removedprojects           map[uuid.UUID]struct{}
	clearedprojects           bool
	done                      bool
	oldValue                  func(context.Context) (*Customer, error)
	predicates                []predicate.Customer
}

var _ ent.Mutation = (*CustomerMutation)(nil)

// customerOption allows management of the mutation configuration using functional options.
type customerOption func(*CustomerMutation)

// newCustomerMutation creates new mutation for the Customer entity.
func newCustomerMutation(c config, op Op, opts ...customerOption) *CustomerMutation {
	m := &CustomerMutation{
		config:        c,
		op:            op,
		typ:           TypeCustomer,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withCustomerID sets the ID field of the mutation.
func withCustomerID(id uuid.UUID) customerOption {
	return func(m *CustomerMutation) {
		var (
			err   error
			once  sync.Once
			value *Customer
		)
		m.oldValue = func(ctx context.Context) (*Customer, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Customer.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withCustomer sets the old Customer of the mutation.
func withCustomer(node *Customer) customerOption {
	return func(m *CustomerMutation) {
		m.oldValue = func(context.Context) (*Customer, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m CustomerMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m CustomerMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("db: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Customer entities.
func (m *CustomerMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *CustomerMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *CustomerMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Customer.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetProspectiveID sets the "prospective_id" field.
func (m *CustomerMutation) SetProspectiveID(s string) {
	m.prospective_id = &s
}

// ProspectiveID returns the value of the "prospective_id" field in the mutation.
func (m *CustomerMutation) ProspectiveID() (r string, exists bool) {
	v := m.prospective_id
	if v == nil {
		return
	}
	return *v, true
}

// OldProspectiveID returns the old "prospective_id" field's value of the Customer entity.
// If the Customer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CustomerMutation) OldProspectiveID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldProspectiveID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldProspectiveID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldProspectiveID: %w", err)
	}
	return oldValue.ProspectiveID, nil
}

// ResetProspectiveID resets all changes to the "prospective_id" field.
func (m *CustomerMutation) ResetProspectiveID() {
	m.prospective_id = nil
}

// SetUserID sets the "user_id" field.
func (m *CustomerMutation) SetUserID(s string) {
	m.user_id = &s
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *CustomerMutation) UserID() (r string, exists bool) {
	v := m.user_id
	if v == nil {
		return
	}
	return *v, true
}

// OldUserID returns the old "user_id" field's value of the Customer entity.
// If the Customer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CustomerMutation) OldUserID(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}
	return oldValue.UserID, nil
}

// ClearUserID clears the value of the "user_id" field.
func (m *CustomerMutation) ClearUserID() {
	m.user_id = nil
	m.clearedFields[customer.FieldUserID] = struct{}{}
}

// UserIDCleared returns if the "user_id" field was cleared in this mutation.
func (m *CustomerMutation) UserIDCleared() bool {
	_, ok := m.clearedFields[customer.FieldUserID]
	return ok
}

// ResetUserID resets all changes to the "user_id" field.
func (m *CustomerMutation) ResetUserID() {
	m.user_id = nil
	delete(m.clearedFields, customer.FieldUserID)
}

// SetFirstName sets the "first_name" field.
func (m *CustomerMutation) SetFirstName(s string) {
	m.first_name = &s
}

// FirstName returns the value of the "first_name" field in the mutation.
func (m *CustomerMutation) FirstName() (r string, exists bool) {
	v := m.first_name
	if v == nil {
		return
	}
	return *v, true
}

// OldFirstName returns the old "first_name" field's value of the Customer entity.
// If the Customer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CustomerMutation) OldFirstName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFirstName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFirstName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFirstName: %w", err)
	}
	return oldValue.FirstName, nil
}

// ResetFirstName resets all changes to the "first_name" field.
func (m *CustomerMutation) ResetFirstName() {
	m.first_name = nil
}

// SetLastName sets the "last_name" field.
func (m *CustomerMutation) SetLastName(s string) {
	m.last_name = &s
}

// LastName returns the value of the "last_name" field in the mutation.
func (m *CustomerMutation) LastName() (r string, exists bool) {
	v := m.last_name
	if v == nil {
		return
	}
	return *v, true
}

// OldLastName returns the old "last_name" field's value of the Customer entity.
// If the Customer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CustomerMutation) OldLastName(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLastName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLastName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLastName: %w", err)
	}
	return oldValue.LastName, nil
}

// ClearLastName clears the value of the "last_name" field.
func (m *CustomerMutation) ClearLastName() {
	m.last_name = nil
	m.clearedFields[customer.FieldLastName] = struct{}{}
}

// LastNameCleared returns if the "last_name" field was cleared in this mutation.
func (m *CustomerMutation) LastNameCleared() bool {
	_, ok := m.clearedFields[customer.FieldLastName]
	return ok
}

// ResetLastName resets all changes to the "last_name" field.
func (m *CustomerMutation) ResetLastName() {
	m.last_name = nil
	delete(m.clearedFields, customer.FieldLastName)
}

// SetEmail sets the "email" field.
func (m *CustomerMutation) SetEmail(s string) {
	m.email = &s
}

// Email returns the value of the "email" field in the mutation.
func (m *CustomerMutation) Email() (r string, exists bool) {
	v := m.email
	if v == nil {
		return
	}
	return *v, true
}

// OldEmail returns the old "email" field's value of the Customer entity.
// If the Customer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CustomerMutation) OldEmail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEmail is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEmail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmail: %w", err)
	}
	return oldValue.Email, nil
}

// ResetEmail resets all changes to the "email" field.
func (m *CustomerMutation) ResetEmail() {
	m.email = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *CustomerMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *CustomerMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Customer entity.
// If the Customer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CustomerMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *CustomerMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *CustomerMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *CustomerMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Customer entity.
// If the Customer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CustomerMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *CustomerMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// AddSurveyInvitationIDs adds the "survey_invitations" edge to the SurveyInvitation entity by ids.
func (m *CustomerMutation) AddSurveyInvitationIDs(ids ...int) {
	if m.survey_invitations == nil {
		m.survey_invitations = make(map[int]struct{})
	}
	for i := range ids {
		m.survey_invitations[ids[i]] = struct{}{}
	}
}

// ClearSurveyInvitations clears the "survey_invitations" edge to the SurveyInvitation entity.
func (m *CustomerMutation) ClearSurveyInvitations() {
	m.clearedsurvey_invitations = true
}

// SurveyInvitationsCleared reports if the "survey_invitations" edge to the SurveyInvitation entity was cleared.
func (m *CustomerMutation) SurveyInvitationsCleared() bool {
	return m.clearedsurvey_invitations
}

// RemoveSurveyInvitationIDs removes the "survey_invitations" edge to the SurveyInvitation entity by IDs.
func (m *CustomerMutation) RemoveSurveyInvitationIDs(ids ...int) {
	if m.removedsurvey_invitations == nil {
		m.removedsurvey_invitations = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.survey_invitations, ids[i])
		m.removedsurvey_invitations[ids[i]] = struct{}{}
	}
}

// RemovedSurveyInvitations returns the removed IDs of the "survey_invitations" edge to the SurveyInvitation entity.
func (m *CustomerMutation) RemovedSurveyInvitationsIDs() (ids []int) {
	for id := range m.removedsurvey_invitations {
		ids = append(ids, id)
	}
	return
}

// SurveyInvitationsIDs returns the "survey_invitations" edge IDs in the mutation.
func (m *CustomerMutation) SurveyInvitationsIDs() (ids []int) {
	for id := range m.survey_invitations {
		ids = append(ids, id)
	}
	return
}

// ResetSurveyInvitations resets all changes to the "survey_invitations" edge.
func (m *CustomerMutation) ResetSurveyInvitations() {
	m.survey_invitations = nil
	m.clearedsurvey_invitations = false
	m.removedsurvey_invitations = nil
}

// AddProjectIDs adds the "projects" edge to the Project entity by ids.
func (m *CustomerMutation) AddProjectIDs(ids ...uuid.UUID) {
	if m.projects == nil {
		m.projects = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.projects[ids[i]] = struct{}{}
	}
}

// ClearProjects clears the "projects" edge to the Project entity.
func (m *CustomerMutation) ClearProjects() {
	m.clearedprojects = true
}

// ProjectsCleared reports if the "projects" edge to the Project entity was cleared.
func (m *CustomerMutation) ProjectsCleared() bool {
	return m.clearedprojects
}

// RemoveProjectIDs removes the "projects" edge to the Project entity by IDs.
func (m *CustomerMutation) RemoveProjectIDs(ids ...uuid.UUID) {
	if m.removedprojects == nil {
		m.removedprojects = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.projects, ids[i])
		m.removedprojects[ids[i]] = struct{}{}
	}
}

// RemovedProjects returns the removed IDs of the "projects" edge to the Project entity.
func (m *CustomerMutation) RemovedProjectsIDs() (ids []uuid.UUID) {
	for id := range m.removedprojects {
		ids = append(ids, id)
	}
	return
}

// ProjectsIDs returns the "projects" edge IDs in the mutation.
func (m *CustomerMutation) ProjectsIDs() (ids []uuid.UUID) {
	for id := range m.projects {
		ids = append(ids, id)
	}
	return
}

// ResetProjects resets all changes to the "projects" edge.
func (m *CustomerMutation) ResetProjects() {
	m.projects = nil
	m.clearedprojects = false
	m.removedprojects = nil
}

// Where appends a list predicates to the CustomerMutation builder.
func (m *CustomerMutation) Where(ps ...predicate.Customer) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the CustomerMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *CustomerMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Customer, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *CustomerMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *CustomerMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Customer).
func (m *CustomerMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *CustomerMutation) Fields() []string {
	fields := make([]string, 0, 7)
	if m.prospective_id != nil {
		fields = append(fields, customer.FieldProspectiveID)
	}
	if m.user_id != nil {
		fields = append(fields, customer.FieldUserID)
	}
	if m.first_name != nil {
		fields = append(fields, customer.FieldFirstName)
	}
	if m.last_name != nil {
		fields = append(fields, customer.FieldLastName)
	}
	if m.email != nil {
		fields = append(fields, customer.FieldEmail)
	}
	if m.created_at != nil {
		fields = append(fields, customer.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, customer.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *CustomerMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case customer.FieldProspectiveID:
		return m.ProspectiveID()
	case customer.FieldUserID:
		return m.UserID()
	case customer.FieldFirstName:
		return m.FirstName()
	case customer.FieldLastName:
		return m.LastName()
	case customer.FieldEmail:
		return m.Email()
	case customer.FieldCreatedAt:
		return m.CreatedAt()
	case customer.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *CustomerMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case customer.FieldProspectiveID:
		return m.OldProspectiveID(ctx)
	case customer.FieldUserID:
		return m.OldUserID(ctx)
	case customer.FieldFirstName:
		return m.OldFirstName(ctx)
	case customer.FieldLastName:
		return m.OldLastName(ctx)
	case customer.FieldEmail:
		return m.OldEmail(ctx)
	case customer.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case customer.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Customer field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CustomerMutation) SetField(name string, value ent.Value) error {
	switch name {
	case customer.FieldProspectiveID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetProspectiveID(v)
		return nil
	case customer.FieldUserID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	case customer.FieldFirstName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFirstName(v)
		return nil
	case customer.FieldLastName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLastName(v)
		return nil
	case customer.FieldEmail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmail(v)
		return nil
	case customer.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case customer.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Customer field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *CustomerMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *CustomerMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CustomerMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Customer numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *CustomerMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(customer.FieldUserID) {
		fields = append(fields, customer.FieldUserID)
	}
	if m.FieldCleared(customer.FieldLastName) {
		fields = append(fields, customer.FieldLastName)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *CustomerMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *CustomerMutation) ClearField(name string) error {
	switch name {
	case customer.FieldUserID:
		m.ClearUserID()
		return nil
	case customer.FieldLastName:
		m.ClearLastName()
		return nil
	}
	return fmt.Errorf("unknown Customer nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *CustomerMutation) ResetField(name string) error {
	switch name {
	case customer.FieldProspectiveID:
		m.ResetProspectiveID()
		return nil
	case customer.FieldUserID:
		m.ResetUserID()
		return nil
	case customer.FieldFirstName:
		m.ResetFirstName()
		return nil
	case customer.FieldLastName:
		m.ResetLastName()
		return nil
	case customer.FieldEmail:
		m.ResetEmail()
		return nil
	case customer.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case customer.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown Customer field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *CustomerMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.survey_invitations != nil {
		edges = append(edges, customer.EdgeSurveyInvitations)
	}
	if m.projects != nil {
		edges = append(edges, customer.EdgeProjects)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *CustomerMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case customer.EdgeSurveyInvitations:
		ids := make([]ent.Value, 0, len(m.survey_invitations))
		for id := range m.survey_invitations {
			ids = append(ids, id)
		}
		return ids
	case customer.EdgeProjects:
		ids := make([]ent.Value, 0, len(m.projects))
		for id := range m.projects {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *CustomerMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedsurvey_invitations != nil {
		edges = append(edges, customer.EdgeSurveyInvitations)
	}
	if m.removedprojects != nil {
		edges = append(edges, customer.EdgeProjects)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *CustomerMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case customer.EdgeSurveyInvitations:
		ids := make([]ent.Value, 0, len(m.removedsurvey_invitations))
		for id := range m.removedsurvey_invitations {
			ids = append(ids, id)
		}
		return ids
	case customer.EdgeProjects:
		ids := make([]ent.Value, 0, len(m.removedprojects))
		for id := range m.removedprojects {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *CustomerMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedsurvey_invitations {
		edges = append(edges, customer.EdgeSurveyInvitations)
	}
	if m.clearedprojects {
		edges = append(edges, customer.EdgeProjects)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *CustomerMutation) EdgeCleared(name string) bool {
	switch name {
	case customer.EdgeSurveyInvitations:
		return m.clearedsurvey_invitations
	case customer.EdgeProjects:
		return m.clearedprojects
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *CustomerMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Customer unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *CustomerMutation) ResetEdge(name string) error {
	switch name {
	case customer.EdgeSurveyInvitations:
		m.ResetSurveyInvitations()
		return nil
	case customer.EdgeProjects:
		m.ResetProjects()
		return nil
	}
	return fmt.Errorf("unknown Customer edge %s", name)
}

// ProjectMutation represents an operation that mutates the Project nodes in the graph.
type ProjectMutation struct {
	config
	op                        Op
	typ                       string
	id                        *uuid.UUID
	prospective_id            *string
	existing_id               *string
	name                      *string
	description               *string
	est_budget                *schematype.Amount
	addest_budget             *schematype.Amount
	created_at                *time.Time
	updated_at                *time.Time
	clearedFields             map[string]struct{}
	customer                  *uuid.UUID
	clearedcustomer           bool
	survey_invitations        map[int]struct{}
	removedsurvey_invitations map[int]struct{}
	clearedsurvey_invitations bool
	done                      bool
	oldValue                  func(context.Context) (*Project, error)
	predicates                []predicate.Project
}

var _ ent.Mutation = (*ProjectMutation)(nil)

// projectOption allows management of the mutation configuration using functional options.
type projectOption func(*ProjectMutation)

// newProjectMutation creates new mutation for the Project entity.
func newProjectMutation(c config, op Op, opts ...projectOption) *ProjectMutation {
	m := &ProjectMutation{
		config:        c,
		op:            op,
		typ:           TypeProject,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withProjectID sets the ID field of the mutation.
func withProjectID(id uuid.UUID) projectOption {
	return func(m *ProjectMutation) {
		var (
			err   error
			once  sync.Once
			value *Project
		)
		m.oldValue = func(ctx context.Context) (*Project, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Project.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withProject sets the old Project of the mutation.
func withProject(node *Project) projectOption {
	return func(m *ProjectMutation) {
		m.oldValue = func(context.Context) (*Project, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ProjectMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ProjectMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("db: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Project entities.
func (m *ProjectMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ProjectMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ProjectMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Project.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetProspectiveID sets the "prospective_id" field.
func (m *ProjectMutation) SetProspectiveID(s string) {
	m.prospective_id = &s
}

// ProspectiveID returns the value of the "prospective_id" field in the mutation.
func (m *ProjectMutation) ProspectiveID() (r string, exists bool) {
	v := m.prospective_id
	if v == nil {
		return
	}
	return *v, true
}

// OldProspectiveID returns the old "prospective_id" field's value of the Project entity.
// If the Project object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProjectMutation) OldProspectiveID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldProspectiveID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldProspectiveID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldProspectiveID: %w", err)
	}
	return oldValue.ProspectiveID, nil
}

// ResetProspectiveID resets all changes to the "prospective_id" field.
func (m *ProjectMutation) ResetProspectiveID() {
	m.prospective_id = nil
}

// SetExistingID sets the "existing_id" field.
func (m *ProjectMutation) SetExistingID(s string) {
	m.existing_id = &s
}

// ExistingID returns the value of the "existing_id" field in the mutation.
func (m *ProjectMutation) ExistingID() (r string, exists bool) {
	v := m.existing_id
	if v == nil {
		return
	}
	return *v, true
}

// OldExistingID returns the old "existing_id" field's value of the Project entity.
// If the Project object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProjectMutation) OldExistingID(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldExistingID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldExistingID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldExistingID: %w", err)
	}
	return oldValue.ExistingID, nil
}

// ClearExistingID clears the value of the "existing_id" field.
func (m *ProjectMutation) ClearExistingID() {
	m.existing_id = nil
	m.clearedFields[project.FieldExistingID] = struct{}{}
}

// ExistingIDCleared returns if the "existing_id" field was cleared in this mutation.
func (m *ProjectMutation) ExistingIDCleared() bool {
	_, ok := m.clearedFields[project.FieldExistingID]
	return ok
}

// ResetExistingID resets all changes to the "existing_id" field.
func (m *ProjectMutation) ResetExistingID() {
	m.existing_id = nil
	delete(m.clearedFields, project.FieldExistingID)
}

// SetName sets the "name" field.
func (m *ProjectMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *ProjectMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Project entity.
// If the Project object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProjectMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *ProjectMutation) ResetName() {
	m.name = nil
}

// SetDescription sets the "description" field.
func (m *ProjectMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *ProjectMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the Project entity.
// If the Project object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProjectMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ResetDescription resets all changes to the "description" field.
func (m *ProjectMutation) ResetDescription() {
	m.description = nil
}

// SetEstBudget sets the "est_budget" field.
func (m *ProjectMutation) SetEstBudget(s schematype.Amount) {
	m.est_budget = &s
	m.addest_budget = nil
}

// EstBudget returns the value of the "est_budget" field in the mutation.
func (m *ProjectMutation) EstBudget() (r schematype.Amount, exists bool) {
	v := m.est_budget
	if v == nil {
		return
	}
	return *v, true
}

// OldEstBudget returns the old "est_budget" field's value of the Project entity.
// If the Project object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProjectMutation) OldEstBudget(ctx context.Context) (v schematype.Amount, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEstBudget is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEstBudget requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEstBudget: %w", err)
	}
	return oldValue.EstBudget, nil
}

// AddEstBudget adds s to the "est_budget" field.
func (m *ProjectMutation) AddEstBudget(s schematype.Amount) {
	if m.addest_budget != nil {
		*m.addest_budget += s
	} else {
		m.addest_budget = &s
	}
}

// AddedEstBudget returns the value that was added to the "est_budget" field in this mutation.
func (m *ProjectMutation) AddedEstBudget() (r schematype.Amount, exists bool) {
	v := m.addest_budget
	if v == nil {
		return
	}
	return *v, true
}

// ResetEstBudget resets all changes to the "est_budget" field.
func (m *ProjectMutation) ResetEstBudget() {
	m.est_budget = nil
	m.addest_budget = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *ProjectMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *ProjectMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Project entity.
// If the Project object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProjectMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *ProjectMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *ProjectMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *ProjectMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Project entity.
// If the Project object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProjectMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *ProjectMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetCustomerID sets the "customer" edge to the Customer entity by id.
func (m *ProjectMutation) SetCustomerID(id uuid.UUID) {
	m.customer = &id
}

// ClearCustomer clears the "customer" edge to the Customer entity.
func (m *ProjectMutation) ClearCustomer() {
	m.clearedcustomer = true
}

// CustomerCleared reports if the "customer" edge to the Customer entity was cleared.
func (m *ProjectMutation) CustomerCleared() bool {
	return m.clearedcustomer
}

// CustomerID returns the "customer" edge ID in the mutation.
func (m *ProjectMutation) CustomerID() (id uuid.UUID, exists bool) {
	if m.customer != nil {
		return *m.customer, true
	}
	return
}

// CustomerIDs returns the "customer" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// CustomerID instead. It exists only for internal usage by the builders.
func (m *ProjectMutation) CustomerIDs() (ids []uuid.UUID) {
	if id := m.customer; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetCustomer resets all changes to the "customer" edge.
func (m *ProjectMutation) ResetCustomer() {
	m.customer = nil
	m.clearedcustomer = false
}

// AddSurveyInvitationIDs adds the "survey_invitations" edge to the SurveyInvitation entity by ids.
func (m *ProjectMutation) AddSurveyInvitationIDs(ids ...int) {
	if m.survey_invitations == nil {
		m.survey_invitations = make(map[int]struct{})
	}
	for i := range ids {
		m.survey_invitations[ids[i]] = struct{}{}
	}
}

// ClearSurveyInvitations clears the "survey_invitations" edge to the SurveyInvitation entity.
func (m *ProjectMutation) ClearSurveyInvitations() {
	m.clearedsurvey_invitations = true
}

// SurveyInvitationsCleared reports if the "survey_invitations" edge to the SurveyInvitation entity was cleared.
func (m *ProjectMutation) SurveyInvitationsCleared() bool {
	return m.clearedsurvey_invitations
}

// RemoveSurveyInvitationIDs removes the "survey_invitations" edge to the SurveyInvitation entity by IDs.
func (m *ProjectMutation) RemoveSurveyInvitationIDs(ids ...int) {
	if m.removedsurvey_invitations == nil {
		m.removedsurvey_invitations = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.survey_invitations, ids[i])
		m.removedsurvey_invitations[ids[i]] = struct{}{}
	}
}

// RemovedSurveyInvitations returns the removed IDs of the "survey_invitations" edge to the SurveyInvitation entity.
func (m *ProjectMutation) RemovedSurveyInvitationsIDs() (ids []int) {
	for id := range m.removedsurvey_invitations {
		ids = append(ids, id)
	}
	return
}

// SurveyInvitationsIDs returns the "survey_invitations" edge IDs in the mutation.
func (m *ProjectMutation) SurveyInvitationsIDs() (ids []int) {
	for id := range m.survey_invitations {
		ids = append(ids, id)
	}
	return
}

// ResetSurveyInvitations resets all changes to the "survey_invitations" edge.
func (m *ProjectMutation) ResetSurveyInvitations() {
	m.survey_invitations = nil
	m.clearedsurvey_invitations = false
	m.removedsurvey_invitations = nil
}

// Where appends a list predicates to the ProjectMutation builder.
func (m *ProjectMutation) Where(ps ...predicate.Project) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ProjectMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ProjectMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Project, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ProjectMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ProjectMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Project).
func (m *ProjectMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ProjectMutation) Fields() []string {
	fields := make([]string, 0, 7)
	if m.prospective_id != nil {
		fields = append(fields, project.FieldProspectiveID)
	}
	if m.existing_id != nil {
		fields = append(fields, project.FieldExistingID)
	}
	if m.name != nil {
		fields = append(fields, project.FieldName)
	}
	if m.description != nil {
		fields = append(fields, project.FieldDescription)
	}
	if m.est_budget != nil {
		fields = append(fields, project.FieldEstBudget)
	}
	if m.created_at != nil {
		fields = append(fields, project.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, project.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ProjectMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case project.FieldProspectiveID:
		return m.ProspectiveID()
	case project.FieldExistingID:
		return m.ExistingID()
	case project.FieldName:
		return m.Name()
	case project.FieldDescription:
		return m.Description()
	case project.FieldEstBudget:
		return m.EstBudget()
	case project.FieldCreatedAt:
		return m.CreatedAt()
	case project.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ProjectMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case project.FieldProspectiveID:
		return m.OldProspectiveID(ctx)
	case project.FieldExistingID:
		return m.OldExistingID(ctx)
	case project.FieldName:
		return m.OldName(ctx)
	case project.FieldDescription:
		return m.OldDescription(ctx)
	case project.FieldEstBudget:
		return m.OldEstBudget(ctx)
	case project.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case project.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Project field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ProjectMutation) SetField(name string, value ent.Value) error {
	switch name {
	case project.FieldProspectiveID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetProspectiveID(v)
		return nil
	case project.FieldExistingID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetExistingID(v)
		return nil
	case project.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case project.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case project.FieldEstBudget:
		v, ok := value.(schematype.Amount)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEstBudget(v)
		return nil
	case project.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case project.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Project field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ProjectMutation) AddedFields() []string {
	var fields []string
	if m.addest_budget != nil {
		fields = append(fields, project.FieldEstBudget)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ProjectMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case project.FieldEstBudget:
		return m.AddedEstBudget()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ProjectMutation) AddField(name string, value ent.Value) error {
	switch name {
	case project.FieldEstBudget:
		v, ok := value.(schematype.Amount)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddEstBudget(v)
		return nil
	}
	return fmt.Errorf("unknown Project numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ProjectMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(project.FieldExistingID) {
		fields = append(fields, project.FieldExistingID)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ProjectMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ProjectMutation) ClearField(name string) error {
	switch name {
	case project.FieldExistingID:
		m.ClearExistingID()
		return nil
	}
	return fmt.Errorf("unknown Project nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ProjectMutation) ResetField(name string) error {
	switch name {
	case project.FieldProspectiveID:
		m.ResetProspectiveID()
		return nil
	case project.FieldExistingID:
		m.ResetExistingID()
		return nil
	case project.FieldName:
		m.ResetName()
		return nil
	case project.FieldDescription:
		m.ResetDescription()
		return nil
	case project.FieldEstBudget:
		m.ResetEstBudget()
		return nil
	case project.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case project.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown Project field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ProjectMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.customer != nil {
		edges = append(edges, project.EdgeCustomer)
	}
	if m.survey_invitations != nil {
		edges = append(edges, project.EdgeSurveyInvitations)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ProjectMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case project.EdgeCustomer:
		if id := m.customer; id != nil {
			return []ent.Value{*id}
		}
	case project.EdgeSurveyInvitations:
		ids := make([]ent.Value, 0, len(m.survey_invitations))
		for id := range m.survey_invitations {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ProjectMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedsurvey_invitations != nil {
		edges = append(edges, project.EdgeSurveyInvitations)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ProjectMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case project.EdgeSurveyInvitations:
		ids := make([]ent.Value, 0, len(m.removedsurvey_invitations))
		for id := range m.removedsurvey_invitations {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ProjectMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedcustomer {
		edges = append(edges, project.EdgeCustomer)
	}
	if m.clearedsurvey_invitations {
		edges = append(edges, project.EdgeSurveyInvitations)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ProjectMutation) EdgeCleared(name string) bool {
	switch name {
	case project.EdgeCustomer:
		return m.clearedcustomer
	case project.EdgeSurveyInvitations:
		return m.clearedsurvey_invitations
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ProjectMutation) ClearEdge(name string) error {
	switch name {
	case project.EdgeCustomer:
		m.ClearCustomer()
		return nil
	}
	return fmt.Errorf("unknown Project unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ProjectMutation) ResetEdge(name string) error {
	switch name {
	case project.EdgeCustomer:
		m.ResetCustomer()
		return nil
	case project.EdgeSurveyInvitations:
		m.ResetSurveyInvitations()
		return nil
	}
	return fmt.Errorf("unknown Project edge %s", name)
}

// QuestionMutation represents an operation that mutates the Question nodes in the graph.
type QuestionMutation struct {
	config
	op                             Op
	typ                            string
	id                             *uuid.UUID
	text                           *string
	sub_text                       *string
	weight                         *int
	addweight                      *int
	required                       *bool
	meta                           **schematype.Metadata
	created_at                     *time.Time
	updated_at                     *time.Time
	clearedFields                  map[string]struct{}
	survey_question_answers        map[int]struct{}
	removedsurvey_question_answers map[int]struct{}
	clearedsurvey_question_answers bool
	questionType                   map[int]struct{}
	removedquestionType            map[int]struct{}
	clearedquestionType            bool
	choices                        map[int]struct{}
	removedchoices                 map[int]struct{}
	clearedchoices                 bool
	done                           bool
	oldValue                       func(context.Context) (*Question, error)
	predicates                     []predicate.Question
}

var _ ent.Mutation = (*QuestionMutation)(nil)

// questionOption allows management of the mutation configuration using functional options.
type questionOption func(*QuestionMutation)

// newQuestionMutation creates new mutation for the Question entity.
func newQuestionMutation(c config, op Op, opts ...questionOption) *QuestionMutation {
	m := &QuestionMutation{
		config:        c,
		op:            op,
		typ:           TypeQuestion,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withQuestionID sets the ID field of the mutation.
func withQuestionID(id uuid.UUID) questionOption {
	return func(m *QuestionMutation) {
		var (
			err   error
			once  sync.Once
			value *Question
		)
		m.oldValue = func(ctx context.Context) (*Question, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Question.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withQuestion sets the old Question of the mutation.
func withQuestion(node *Question) questionOption {
	return func(m *QuestionMutation) {
		m.oldValue = func(context.Context) (*Question, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m QuestionMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m QuestionMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("db: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Question entities.
func (m *QuestionMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *QuestionMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *QuestionMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Question.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetText sets the "text" field.
func (m *QuestionMutation) SetText(s string) {
	m.text = &s
}

// Text returns the value of the "text" field in the mutation.
func (m *QuestionMutation) Text() (r string, exists bool) {
	v := m.text
	if v == nil {
		return
	}
	return *v, true
}

// OldText returns the old "text" field's value of the Question entity.
// If the Question object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *QuestionMutation) OldText(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldText is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldText requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldText: %w", err)
	}
	return oldValue.Text, nil
}

// ResetText resets all changes to the "text" field.
func (m *QuestionMutation) ResetText() {
	m.text = nil
}

// SetSubText sets the "sub_text" field.
func (m *QuestionMutation) SetSubText(s string) {
	m.sub_text = &s
}

// SubText returns the value of the "sub_text" field in the mutation.
func (m *QuestionMutation) SubText() (r string, exists bool) {
	v := m.sub_text
	if v == nil {
		return
	}
	return *v, true
}

// OldSubText returns the old "sub_text" field's value of the Question entity.
// If the Question object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *QuestionMutation) OldSubText(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSubText is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSubText requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSubText: %w", err)
	}
	return oldValue.SubText, nil
}

// ClearSubText clears the value of the "sub_text" field.
func (m *QuestionMutation) ClearSubText() {
	m.sub_text = nil
	m.clearedFields[question.FieldSubText] = struct{}{}
}

// SubTextCleared returns if the "sub_text" field was cleared in this mutation.
func (m *QuestionMutation) SubTextCleared() bool {
	_, ok := m.clearedFields[question.FieldSubText]
	return ok
}

// ResetSubText resets all changes to the "sub_text" field.
func (m *QuestionMutation) ResetSubText() {
	m.sub_text = nil
	delete(m.clearedFields, question.FieldSubText)
}

// SetWeight sets the "weight" field.
func (m *QuestionMutation) SetWeight(i int) {
	m.weight = &i
	m.addweight = nil
}

// Weight returns the value of the "weight" field in the mutation.
func (m *QuestionMutation) Weight() (r int, exists bool) {
	v := m.weight
	if v == nil {
		return
	}
	return *v, true
}

// OldWeight returns the old "weight" field's value of the Question entity.
// If the Question object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *QuestionMutation) OldWeight(ctx context.Context) (v *int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldWeight is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldWeight requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldWeight: %w", err)
	}
	return oldValue.Weight, nil
}

// AddWeight adds i to the "weight" field.
func (m *QuestionMutation) AddWeight(i int) {
	if m.addweight != nil {
		*m.addweight += i
	} else {
		m.addweight = &i
	}
}

// AddedWeight returns the value that was added to the "weight" field in this mutation.
func (m *QuestionMutation) AddedWeight() (r int, exists bool) {
	v := m.addweight
	if v == nil {
		return
	}
	return *v, true
}

// ClearWeight clears the value of the "weight" field.
func (m *QuestionMutation) ClearWeight() {
	m.weight = nil
	m.addweight = nil
	m.clearedFields[question.FieldWeight] = struct{}{}
}

// WeightCleared returns if the "weight" field was cleared in this mutation.
func (m *QuestionMutation) WeightCleared() bool {
	_, ok := m.clearedFields[question.FieldWeight]
	return ok
}

// ResetWeight resets all changes to the "weight" field.
func (m *QuestionMutation) ResetWeight() {
	m.weight = nil
	m.addweight = nil
	delete(m.clearedFields, question.FieldWeight)
}

// SetRequired sets the "required" field.
func (m *QuestionMutation) SetRequired(b bool) {
	m.required = &b
}

// Required returns the value of the "required" field in the mutation.
func (m *QuestionMutation) Required() (r bool, exists bool) {
	v := m.required
	if v == nil {
		return
	}
	return *v, true
}

// OldRequired returns the old "required" field's value of the Question entity.
// If the Question object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *QuestionMutation) OldRequired(ctx context.Context) (v *bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRequired is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRequired requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRequired: %w", err)
	}
	return oldValue.Required, nil
}

// ClearRequired clears the value of the "required" field.
func (m *QuestionMutation) ClearRequired() {
	m.required = nil
	m.clearedFields[question.FieldRequired] = struct{}{}
}

// RequiredCleared returns if the "required" field was cleared in this mutation.
func (m *QuestionMutation) RequiredCleared() bool {
	_, ok := m.clearedFields[question.FieldRequired]
	return ok
}

// ResetRequired resets all changes to the "required" field.
func (m *QuestionMutation) ResetRequired() {
	m.required = nil
	delete(m.clearedFields, question.FieldRequired)
}

// SetMeta sets the "meta" field.
func (m *QuestionMutation) SetMeta(s *schematype.Metadata) {
	m.meta = &s
}

// Meta returns the value of the "meta" field in the mutation.
func (m *QuestionMutation) Meta() (r *schematype.Metadata, exists bool) {
	v := m.meta
	if v == nil {
		return
	}
	return *v, true
}

// OldMeta returns the old "meta" field's value of the Question entity.
// If the Question object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *QuestionMutation) OldMeta(ctx context.Context) (v *schematype.Metadata, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMeta is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMeta requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMeta: %w", err)
	}
	return oldValue.Meta, nil
}

// ResetMeta resets all changes to the "meta" field.
func (m *QuestionMutation) ResetMeta() {
	m.meta = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *QuestionMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *QuestionMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Question entity.
// If the Question object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *QuestionMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *QuestionMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *QuestionMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *QuestionMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Question entity.
// If the Question object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *QuestionMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *QuestionMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// AddSurveyQuestionAnswerIDs adds the "survey_question_answers" edge to the SurveyQuestionAnswers entity by ids.
func (m *QuestionMutation) AddSurveyQuestionAnswerIDs(ids ...int) {
	if m.survey_question_answers == nil {
		m.survey_question_answers = make(map[int]struct{})
	}
	for i := range ids {
		m.survey_question_answers[ids[i]] = struct{}{}
	}
}

// ClearSurveyQuestionAnswers clears the "survey_question_answers" edge to the SurveyQuestionAnswers entity.
func (m *QuestionMutation) ClearSurveyQuestionAnswers() {
	m.clearedsurvey_question_answers = true
}

// SurveyQuestionAnswersCleared reports if the "survey_question_answers" edge to the SurveyQuestionAnswers entity was cleared.
func (m *QuestionMutation) SurveyQuestionAnswersCleared() bool {
	return m.clearedsurvey_question_answers
}

// RemoveSurveyQuestionAnswerIDs removes the "survey_question_answers" edge to the SurveyQuestionAnswers entity by IDs.
func (m *QuestionMutation) RemoveSurveyQuestionAnswerIDs(ids ...int) {
	if m.removedsurvey_question_answers == nil {
		m.removedsurvey_question_answers = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.survey_question_answers, ids[i])
		m.removedsurvey_question_answers[ids[i]] = struct{}{}
	}
}

// RemovedSurveyQuestionAnswers returns the removed IDs of the "survey_question_answers" edge to the SurveyQuestionAnswers entity.
func (m *QuestionMutation) RemovedSurveyQuestionAnswersIDs() (ids []int) {
	for id := range m.removedsurvey_question_answers {
		ids = append(ids, id)
	}
	return
}

// SurveyQuestionAnswersIDs returns the "survey_question_answers" edge IDs in the mutation.
func (m *QuestionMutation) SurveyQuestionAnswersIDs() (ids []int) {
	for id := range m.survey_question_answers {
		ids = append(ids, id)
	}
	return
}

// ResetSurveyQuestionAnswers resets all changes to the "survey_question_answers" edge.
func (m *QuestionMutation) ResetSurveyQuestionAnswers() {
	m.survey_question_answers = nil
	m.clearedsurvey_question_answers = false
	m.removedsurvey_question_answers = nil
}

// AddQuestionTypeIDs adds the "questionType" edge to the QuestionType entity by ids.
func (m *QuestionMutation) AddQuestionTypeIDs(ids ...int) {
	if m.questionType == nil {
		m.questionType = make(map[int]struct{})
	}
	for i := range ids {
		m.questionType[ids[i]] = struct{}{}
	}
}

// ClearQuestionType clears the "questionType" edge to the QuestionType entity.
func (m *QuestionMutation) ClearQuestionType() {
	m.clearedquestionType = true
}

// QuestionTypeCleared reports if the "questionType" edge to the QuestionType entity was cleared.
func (m *QuestionMutation) QuestionTypeCleared() bool {
	return m.clearedquestionType
}

// RemoveQuestionTypeIDs removes the "questionType" edge to the QuestionType entity by IDs.
func (m *QuestionMutation) RemoveQuestionTypeIDs(ids ...int) {
	if m.removedquestionType == nil {
		m.removedquestionType = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.questionType, ids[i])
		m.removedquestionType[ids[i]] = struct{}{}
	}
}

// RemovedQuestionType returns the removed IDs of the "questionType" edge to the QuestionType entity.
func (m *QuestionMutation) RemovedQuestionTypeIDs() (ids []int) {
	for id := range m.removedquestionType {
		ids = append(ids, id)
	}
	return
}

// QuestionTypeIDs returns the "questionType" edge IDs in the mutation.
func (m *QuestionMutation) QuestionTypeIDs() (ids []int) {
	for id := range m.questionType {
		ids = append(ids, id)
	}
	return
}

// ResetQuestionType resets all changes to the "questionType" edge.
func (m *QuestionMutation) ResetQuestionType() {
	m.questionType = nil
	m.clearedquestionType = false
	m.removedquestionType = nil
}

// AddChoiceIDs adds the "choices" edge to the Choice entity by ids.
func (m *QuestionMutation) AddChoiceIDs(ids ...int) {
	if m.choices == nil {
		m.choices = make(map[int]struct{})
	}
	for i := range ids {
		m.choices[ids[i]] = struct{}{}
	}
}

// ClearChoices clears the "choices" edge to the Choice entity.
func (m *QuestionMutation) ClearChoices() {
	m.clearedchoices = true
}

// ChoicesCleared reports if the "choices" edge to the Choice entity was cleared.
func (m *QuestionMutation) ChoicesCleared() bool {
	return m.clearedchoices
}

// RemoveChoiceIDs removes the "choices" edge to the Choice entity by IDs.
func (m *QuestionMutation) RemoveChoiceIDs(ids ...int) {
	if m.removedchoices == nil {
		m.removedchoices = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.choices, ids[i])
		m.removedchoices[ids[i]] = struct{}{}
	}
}

// RemovedChoices returns the removed IDs of the "choices" edge to the Choice entity.
func (m *QuestionMutation) RemovedChoicesIDs() (ids []int) {
	for id := range m.removedchoices {
		ids = append(ids, id)
	}
	return
}

// ChoicesIDs returns the "choices" edge IDs in the mutation.
func (m *QuestionMutation) ChoicesIDs() (ids []int) {
	for id := range m.choices {
		ids = append(ids, id)
	}
	return
}

// ResetChoices resets all changes to the "choices" edge.
func (m *QuestionMutation) ResetChoices() {
	m.choices = nil
	m.clearedchoices = false
	m.removedchoices = nil
}

// Where appends a list predicates to the QuestionMutation builder.
func (m *QuestionMutation) Where(ps ...predicate.Question) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the QuestionMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *QuestionMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Question, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *QuestionMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *QuestionMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Question).
func (m *QuestionMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *QuestionMutation) Fields() []string {
	fields := make([]string, 0, 7)
	if m.text != nil {
		fields = append(fields, question.FieldText)
	}
	if m.sub_text != nil {
		fields = append(fields, question.FieldSubText)
	}
	if m.weight != nil {
		fields = append(fields, question.FieldWeight)
	}
	if m.required != nil {
		fields = append(fields, question.FieldRequired)
	}
	if m.meta != nil {
		fields = append(fields, question.FieldMeta)
	}
	if m.created_at != nil {
		fields = append(fields, question.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, question.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *QuestionMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case question.FieldText:
		return m.Text()
	case question.FieldSubText:
		return m.SubText()
	case question.FieldWeight:
		return m.Weight()
	case question.FieldRequired:
		return m.Required()
	case question.FieldMeta:
		return m.Meta()
	case question.FieldCreatedAt:
		return m.CreatedAt()
	case question.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *QuestionMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case question.FieldText:
		return m.OldText(ctx)
	case question.FieldSubText:
		return m.OldSubText(ctx)
	case question.FieldWeight:
		return m.OldWeight(ctx)
	case question.FieldRequired:
		return m.OldRequired(ctx)
	case question.FieldMeta:
		return m.OldMeta(ctx)
	case question.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case question.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Question field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *QuestionMutation) SetField(name string, value ent.Value) error {
	switch name {
	case question.FieldText:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetText(v)
		return nil
	case question.FieldSubText:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSubText(v)
		return nil
	case question.FieldWeight:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetWeight(v)
		return nil
	case question.FieldRequired:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRequired(v)
		return nil
	case question.FieldMeta:
		v, ok := value.(*schematype.Metadata)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMeta(v)
		return nil
	case question.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case question.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Question field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *QuestionMutation) AddedFields() []string {
	var fields []string
	if m.addweight != nil {
		fields = append(fields, question.FieldWeight)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *QuestionMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case question.FieldWeight:
		return m.AddedWeight()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *QuestionMutation) AddField(name string, value ent.Value) error {
	switch name {
	case question.FieldWeight:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddWeight(v)
		return nil
	}
	return fmt.Errorf("unknown Question numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *QuestionMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(question.FieldSubText) {
		fields = append(fields, question.FieldSubText)
	}
	if m.FieldCleared(question.FieldWeight) {
		fields = append(fields, question.FieldWeight)
	}
	if m.FieldCleared(question.FieldRequired) {
		fields = append(fields, question.FieldRequired)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *QuestionMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *QuestionMutation) ClearField(name string) error {
	switch name {
	case question.FieldSubText:
		m.ClearSubText()
		return nil
	case question.FieldWeight:
		m.ClearWeight()
		return nil
	case question.FieldRequired:
		m.ClearRequired()
		return nil
	}
	return fmt.Errorf("unknown Question nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *QuestionMutation) ResetField(name string) error {
	switch name {
	case question.FieldText:
		m.ResetText()
		return nil
	case question.FieldSubText:
		m.ResetSubText()
		return nil
	case question.FieldWeight:
		m.ResetWeight()
		return nil
	case question.FieldRequired:
		m.ResetRequired()
		return nil
	case question.FieldMeta:
		m.ResetMeta()
		return nil
	case question.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case question.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown Question field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *QuestionMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.survey_question_answers != nil {
		edges = append(edges, question.EdgeSurveyQuestionAnswers)
	}
	if m.questionType != nil {
		edges = append(edges, question.EdgeQuestionType)
	}
	if m.choices != nil {
		edges = append(edges, question.EdgeChoices)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *QuestionMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case question.EdgeSurveyQuestionAnswers:
		ids := make([]ent.Value, 0, len(m.survey_question_answers))
		for id := range m.survey_question_answers {
			ids = append(ids, id)
		}
		return ids
	case question.EdgeQuestionType:
		ids := make([]ent.Value, 0, len(m.questionType))
		for id := range m.questionType {
			ids = append(ids, id)
		}
		return ids
	case question.EdgeChoices:
		ids := make([]ent.Value, 0, len(m.choices))
		for id := range m.choices {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *QuestionMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	if m.removedsurvey_question_answers != nil {
		edges = append(edges, question.EdgeSurveyQuestionAnswers)
	}
	if m.removedquestionType != nil {
		edges = append(edges, question.EdgeQuestionType)
	}
	if m.removedchoices != nil {
		edges = append(edges, question.EdgeChoices)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *QuestionMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case question.EdgeSurveyQuestionAnswers:
		ids := make([]ent.Value, 0, len(m.removedsurvey_question_answers))
		for id := range m.removedsurvey_question_answers {
			ids = append(ids, id)
		}
		return ids
	case question.EdgeQuestionType:
		ids := make([]ent.Value, 0, len(m.removedquestionType))
		for id := range m.removedquestionType {
			ids = append(ids, id)
		}
		return ids
	case question.EdgeChoices:
		ids := make([]ent.Value, 0, len(m.removedchoices))
		for id := range m.removedchoices {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *QuestionMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.clearedsurvey_question_answers {
		edges = append(edges, question.EdgeSurveyQuestionAnswers)
	}
	if m.clearedquestionType {
		edges = append(edges, question.EdgeQuestionType)
	}
	if m.clearedchoices {
		edges = append(edges, question.EdgeChoices)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *QuestionMutation) EdgeCleared(name string) bool {
	switch name {
	case question.EdgeSurveyQuestionAnswers:
		return m.clearedsurvey_question_answers
	case question.EdgeQuestionType:
		return m.clearedquestionType
	case question.EdgeChoices:
		return m.clearedchoices
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *QuestionMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Question unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *QuestionMutation) ResetEdge(name string) error {
	switch name {
	case question.EdgeSurveyQuestionAnswers:
		m.ResetSurveyQuestionAnswers()
		return nil
	case question.EdgeQuestionType:
		m.ResetQuestionType()
		return nil
	case question.EdgeChoices:
		m.ResetChoices()
		return nil
	}
	return fmt.Errorf("unknown Question edge %s", name)
}

// QuestionTypeMutation represents an operation that mutates the QuestionType nodes in the graph.
type QuestionTypeMutation struct {
	config
	op               Op
	typ              string
	id               *int
	description      *string
	_type            *questiontype.Type
	clearedFields    map[string]struct{}
	questions        map[uuid.UUID]struct{}
	removedquestions map[uuid.UUID]struct{}
	clearedquestions bool
	done             bool
	oldValue         func(context.Context) (*QuestionType, error)
	predicates       []predicate.QuestionType
}

var _ ent.Mutation = (*QuestionTypeMutation)(nil)

// questiontypeOption allows management of the mutation configuration using functional options.
type questiontypeOption func(*QuestionTypeMutation)

// newQuestionTypeMutation creates new mutation for the QuestionType entity.
func newQuestionTypeMutation(c config, op Op, opts ...questiontypeOption) *QuestionTypeMutation {
	m := &QuestionTypeMutation{
		config:        c,
		op:            op,
		typ:           TypeQuestionType,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withQuestionTypeID sets the ID field of the mutation.
func withQuestionTypeID(id int) questiontypeOption {
	return func(m *QuestionTypeMutation) {
		var (
			err   error
			once  sync.Once
			value *QuestionType
		)
		m.oldValue = func(ctx context.Context) (*QuestionType, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().QuestionType.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withQuestionType sets the old QuestionType of the mutation.
func withQuestionType(node *QuestionType) questiontypeOption {
	return func(m *QuestionTypeMutation) {
		m.oldValue = func(context.Context) (*QuestionType, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m QuestionTypeMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m QuestionTypeMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("db: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *QuestionTypeMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *QuestionTypeMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().QuestionType.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetDescription sets the "description" field.
func (m *QuestionTypeMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *QuestionTypeMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the QuestionType entity.
// If the QuestionType object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *QuestionTypeMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ResetDescription resets all changes to the "description" field.
func (m *QuestionTypeMutation) ResetDescription() {
	m.description = nil
}

// SetType sets the "type" field.
func (m *QuestionTypeMutation) SetType(q questiontype.Type) {
	m._type = &q
}

// GetType returns the value of the "type" field in the mutation.
func (m *QuestionTypeMutation) GetType() (r questiontype.Type, exists bool) {
	v := m._type
	if v == nil {
		return
	}
	return *v, true
}

// OldType returns the old "type" field's value of the QuestionType entity.
// If the QuestionType object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *QuestionTypeMutation) OldType(ctx context.Context) (v questiontype.Type, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldType: %w", err)
	}
	return oldValue.Type, nil
}

// ResetType resets all changes to the "type" field.
func (m *QuestionTypeMutation) ResetType() {
	m._type = nil
}

// AddQuestionIDs adds the "questions" edge to the Question entity by ids.
func (m *QuestionTypeMutation) AddQuestionIDs(ids ...uuid.UUID) {
	if m.questions == nil {
		m.questions = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.questions[ids[i]] = struct{}{}
	}
}

// ClearQuestions clears the "questions" edge to the Question entity.
func (m *QuestionTypeMutation) ClearQuestions() {
	m.clearedquestions = true
}

// QuestionsCleared reports if the "questions" edge to the Question entity was cleared.
func (m *QuestionTypeMutation) QuestionsCleared() bool {
	return m.clearedquestions
}

// RemoveQuestionIDs removes the "questions" edge to the Question entity by IDs.
func (m *QuestionTypeMutation) RemoveQuestionIDs(ids ...uuid.UUID) {
	if m.removedquestions == nil {
		m.removedquestions = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.questions, ids[i])
		m.removedquestions[ids[i]] = struct{}{}
	}
}

// RemovedQuestions returns the removed IDs of the "questions" edge to the Question entity.
func (m *QuestionTypeMutation) RemovedQuestionsIDs() (ids []uuid.UUID) {
	for id := range m.removedquestions {
		ids = append(ids, id)
	}
	return
}

// QuestionsIDs returns the "questions" edge IDs in the mutation.
func (m *QuestionTypeMutation) QuestionsIDs() (ids []uuid.UUID) {
	for id := range m.questions {
		ids = append(ids, id)
	}
	return
}

// ResetQuestions resets all changes to the "questions" edge.
func (m *QuestionTypeMutation) ResetQuestions() {
	m.questions = nil
	m.clearedquestions = false
	m.removedquestions = nil
}

// Where appends a list predicates to the QuestionTypeMutation builder.
func (m *QuestionTypeMutation) Where(ps ...predicate.QuestionType) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the QuestionTypeMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *QuestionTypeMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.QuestionType, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *QuestionTypeMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *QuestionTypeMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (QuestionType).
func (m *QuestionTypeMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *QuestionTypeMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.description != nil {
		fields = append(fields, questiontype.FieldDescription)
	}
	if m._type != nil {
		fields = append(fields, questiontype.FieldType)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *QuestionTypeMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case questiontype.FieldDescription:
		return m.Description()
	case questiontype.FieldType:
		return m.GetType()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *QuestionTypeMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case questiontype.FieldDescription:
		return m.OldDescription(ctx)
	case questiontype.FieldType:
		return m.OldType(ctx)
	}
	return nil, fmt.Errorf("unknown QuestionType field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *QuestionTypeMutation) SetField(name string, value ent.Value) error {
	switch name {
	case questiontype.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case questiontype.FieldType:
		v, ok := value.(questiontype.Type)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetType(v)
		return nil
	}
	return fmt.Errorf("unknown QuestionType field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *QuestionTypeMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *QuestionTypeMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *QuestionTypeMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown QuestionType numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *QuestionTypeMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *QuestionTypeMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *QuestionTypeMutation) ClearField(name string) error {
	return fmt.Errorf("unknown QuestionType nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *QuestionTypeMutation) ResetField(name string) error {
	switch name {
	case questiontype.FieldDescription:
		m.ResetDescription()
		return nil
	case questiontype.FieldType:
		m.ResetType()
		return nil
	}
	return fmt.Errorf("unknown QuestionType field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *QuestionTypeMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.questions != nil {
		edges = append(edges, questiontype.EdgeQuestions)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *QuestionTypeMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case questiontype.EdgeQuestions:
		ids := make([]ent.Value, 0, len(m.questions))
		for id := range m.questions {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *QuestionTypeMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedquestions != nil {
		edges = append(edges, questiontype.EdgeQuestions)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *QuestionTypeMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case questiontype.EdgeQuestions:
		ids := make([]ent.Value, 0, len(m.removedquestions))
		for id := range m.removedquestions {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *QuestionTypeMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedquestions {
		edges = append(edges, questiontype.EdgeQuestions)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *QuestionTypeMutation) EdgeCleared(name string) bool {
	switch name {
	case questiontype.EdgeQuestions:
		return m.clearedquestions
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *QuestionTypeMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown QuestionType unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *QuestionTypeMutation) ResetEdge(name string) error {
	switch name {
	case questiontype.EdgeQuestions:
		m.ResetQuestions()
		return nil
	}
	return fmt.Errorf("unknown QuestionType edge %s", name)
}

// SurveyMutation represents an operation that mutates the Survey nodes in the graph.
type SurveyMutation struct {
	config
	op                             Op
	typ                            string
	id                             *uuid.UUID
	identifier                     *string
	name                           *string
	description                    *string
	created_at                     *time.Time
	updated_at                     *time.Time
	clearedFields                  map[string]struct{}
	survey_question_answers        map[int]struct{}
	removedsurvey_question_answers map[int]struct{}
	clearedsurvey_question_answers bool
	survey_invitations             map[int]struct{}
	removedsurvey_invitations      map[int]struct{}
	clearedsurvey_invitations      bool
	done                           bool
	oldValue                       func(context.Context) (*Survey, error)
	predicates                     []predicate.Survey
}

var _ ent.Mutation = (*SurveyMutation)(nil)

// surveyOption allows management of the mutation configuration using functional options.
type surveyOption func(*SurveyMutation)

// newSurveyMutation creates new mutation for the Survey entity.
func newSurveyMutation(c config, op Op, opts ...surveyOption) *SurveyMutation {
	m := &SurveyMutation{
		config:        c,
		op:            op,
		typ:           TypeSurvey,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withSurveyID sets the ID field of the mutation.
func withSurveyID(id uuid.UUID) surveyOption {
	return func(m *SurveyMutation) {
		var (
			err   error
			once  sync.Once
			value *Survey
		)
		m.oldValue = func(ctx context.Context) (*Survey, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Survey.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withSurvey sets the old Survey of the mutation.
func withSurvey(node *Survey) surveyOption {
	return func(m *SurveyMutation) {
		m.oldValue = func(context.Context) (*Survey, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m SurveyMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m SurveyMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("db: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Survey entities.
func (m *SurveyMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *SurveyMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *SurveyMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Survey.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetIdentifier sets the "identifier" field.
func (m *SurveyMutation) SetIdentifier(s string) {
	m.identifier = &s
}

// Identifier returns the value of the "identifier" field in the mutation.
func (m *SurveyMutation) Identifier() (r string, exists bool) {
	v := m.identifier
	if v == nil {
		return
	}
	return *v, true
}

// OldIdentifier returns the old "identifier" field's value of the Survey entity.
// If the Survey object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SurveyMutation) OldIdentifier(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIdentifier is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIdentifier requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIdentifier: %w", err)
	}
	return oldValue.Identifier, nil
}

// ResetIdentifier resets all changes to the "identifier" field.
func (m *SurveyMutation) ResetIdentifier() {
	m.identifier = nil
}

// SetName sets the "name" field.
func (m *SurveyMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *SurveyMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Survey entity.
// If the Survey object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SurveyMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *SurveyMutation) ResetName() {
	m.name = nil
}

// SetDescription sets the "description" field.
func (m *SurveyMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *SurveyMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the Survey entity.
// If the Survey object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SurveyMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ResetDescription resets all changes to the "description" field.
func (m *SurveyMutation) ResetDescription() {
	m.description = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *SurveyMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *SurveyMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Survey entity.
// If the Survey object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SurveyMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *SurveyMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *SurveyMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *SurveyMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Survey entity.
// If the Survey object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SurveyMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *SurveyMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// AddSurveyQuestionAnswerIDs adds the "survey_question_answers" edge to the SurveyQuestionAnswers entity by ids.
func (m *SurveyMutation) AddSurveyQuestionAnswerIDs(ids ...int) {
	if m.survey_question_answers == nil {
		m.survey_question_answers = make(map[int]struct{})
	}
	for i := range ids {
		m.survey_question_answers[ids[i]] = struct{}{}
	}
}

// ClearSurveyQuestionAnswers clears the "survey_question_answers" edge to the SurveyQuestionAnswers entity.
func (m *SurveyMutation) ClearSurveyQuestionAnswers() {
	m.clearedsurvey_question_answers = true
}

// SurveyQuestionAnswersCleared reports if the "survey_question_answers" edge to the SurveyQuestionAnswers entity was cleared.
func (m *SurveyMutation) SurveyQuestionAnswersCleared() bool {
	return m.clearedsurvey_question_answers
}

// RemoveSurveyQuestionAnswerIDs removes the "survey_question_answers" edge to the SurveyQuestionAnswers entity by IDs.
func (m *SurveyMutation) RemoveSurveyQuestionAnswerIDs(ids ...int) {
	if m.removedsurvey_question_answers == nil {
		m.removedsurvey_question_answers = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.survey_question_answers, ids[i])
		m.removedsurvey_question_answers[ids[i]] = struct{}{}
	}
}

// RemovedSurveyQuestionAnswers returns the removed IDs of the "survey_question_answers" edge to the SurveyQuestionAnswers entity.
func (m *SurveyMutation) RemovedSurveyQuestionAnswersIDs() (ids []int) {
	for id := range m.removedsurvey_question_answers {
		ids = append(ids, id)
	}
	return
}

// SurveyQuestionAnswersIDs returns the "survey_question_answers" edge IDs in the mutation.
func (m *SurveyMutation) SurveyQuestionAnswersIDs() (ids []int) {
	for id := range m.survey_question_answers {
		ids = append(ids, id)
	}
	return
}

// ResetSurveyQuestionAnswers resets all changes to the "survey_question_answers" edge.
func (m *SurveyMutation) ResetSurveyQuestionAnswers() {
	m.survey_question_answers = nil
	m.clearedsurvey_question_answers = false
	m.removedsurvey_question_answers = nil
}

// AddSurveyInvitationIDs adds the "survey_invitations" edge to the SurveyInvitation entity by ids.
func (m *SurveyMutation) AddSurveyInvitationIDs(ids ...int) {
	if m.survey_invitations == nil {
		m.survey_invitations = make(map[int]struct{})
	}
	for i := range ids {
		m.survey_invitations[ids[i]] = struct{}{}
	}
}

// ClearSurveyInvitations clears the "survey_invitations" edge to the SurveyInvitation entity.
func (m *SurveyMutation) ClearSurveyInvitations() {
	m.clearedsurvey_invitations = true
}

// SurveyInvitationsCleared reports if the "survey_invitations" edge to the SurveyInvitation entity was cleared.
func (m *SurveyMutation) SurveyInvitationsCleared() bool {
	return m.clearedsurvey_invitations
}

// RemoveSurveyInvitationIDs removes the "survey_invitations" edge to the SurveyInvitation entity by IDs.
func (m *SurveyMutation) RemoveSurveyInvitationIDs(ids ...int) {
	if m.removedsurvey_invitations == nil {
		m.removedsurvey_invitations = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.survey_invitations, ids[i])
		m.removedsurvey_invitations[ids[i]] = struct{}{}
	}
}

// RemovedSurveyInvitations returns the removed IDs of the "survey_invitations" edge to the SurveyInvitation entity.
func (m *SurveyMutation) RemovedSurveyInvitationsIDs() (ids []int) {
	for id := range m.removedsurvey_invitations {
		ids = append(ids, id)
	}
	return
}

// SurveyInvitationsIDs returns the "survey_invitations" edge IDs in the mutation.
func (m *SurveyMutation) SurveyInvitationsIDs() (ids []int) {
	for id := range m.survey_invitations {
		ids = append(ids, id)
	}
	return
}

// ResetSurveyInvitations resets all changes to the "survey_invitations" edge.
func (m *SurveyMutation) ResetSurveyInvitations() {
	m.survey_invitations = nil
	m.clearedsurvey_invitations = false
	m.removedsurvey_invitations = nil
}

// Where appends a list predicates to the SurveyMutation builder.
func (m *SurveyMutation) Where(ps ...predicate.Survey) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the SurveyMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *SurveyMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Survey, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *SurveyMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *SurveyMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Survey).
func (m *SurveyMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *SurveyMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.identifier != nil {
		fields = append(fields, survey.FieldIdentifier)
	}
	if m.name != nil {
		fields = append(fields, survey.FieldName)
	}
	if m.description != nil {
		fields = append(fields, survey.FieldDescription)
	}
	if m.created_at != nil {
		fields = append(fields, survey.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, survey.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *SurveyMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case survey.FieldIdentifier:
		return m.Identifier()
	case survey.FieldName:
		return m.Name()
	case survey.FieldDescription:
		return m.Description()
	case survey.FieldCreatedAt:
		return m.CreatedAt()
	case survey.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *SurveyMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case survey.FieldIdentifier:
		return m.OldIdentifier(ctx)
	case survey.FieldName:
		return m.OldName(ctx)
	case survey.FieldDescription:
		return m.OldDescription(ctx)
	case survey.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case survey.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Survey field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SurveyMutation) SetField(name string, value ent.Value) error {
	switch name {
	case survey.FieldIdentifier:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIdentifier(v)
		return nil
	case survey.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case survey.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case survey.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case survey.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Survey field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *SurveyMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *SurveyMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SurveyMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Survey numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *SurveyMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *SurveyMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *SurveyMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Survey nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *SurveyMutation) ResetField(name string) error {
	switch name {
	case survey.FieldIdentifier:
		m.ResetIdentifier()
		return nil
	case survey.FieldName:
		m.ResetName()
		return nil
	case survey.FieldDescription:
		m.ResetDescription()
		return nil
	case survey.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case survey.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown Survey field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *SurveyMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.survey_question_answers != nil {
		edges = append(edges, survey.EdgeSurveyQuestionAnswers)
	}
	if m.survey_invitations != nil {
		edges = append(edges, survey.EdgeSurveyInvitations)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *SurveyMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case survey.EdgeSurveyQuestionAnswers:
		ids := make([]ent.Value, 0, len(m.survey_question_answers))
		for id := range m.survey_question_answers {
			ids = append(ids, id)
		}
		return ids
	case survey.EdgeSurveyInvitations:
		ids := make([]ent.Value, 0, len(m.survey_invitations))
		for id := range m.survey_invitations {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *SurveyMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedsurvey_question_answers != nil {
		edges = append(edges, survey.EdgeSurveyQuestionAnswers)
	}
	if m.removedsurvey_invitations != nil {
		edges = append(edges, survey.EdgeSurveyInvitations)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *SurveyMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case survey.EdgeSurveyQuestionAnswers:
		ids := make([]ent.Value, 0, len(m.removedsurvey_question_answers))
		for id := range m.removedsurvey_question_answers {
			ids = append(ids, id)
		}
		return ids
	case survey.EdgeSurveyInvitations:
		ids := make([]ent.Value, 0, len(m.removedsurvey_invitations))
		for id := range m.removedsurvey_invitations {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *SurveyMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedsurvey_question_answers {
		edges = append(edges, survey.EdgeSurveyQuestionAnswers)
	}
	if m.clearedsurvey_invitations {
		edges = append(edges, survey.EdgeSurveyInvitations)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *SurveyMutation) EdgeCleared(name string) bool {
	switch name {
	case survey.EdgeSurveyQuestionAnswers:
		return m.clearedsurvey_question_answers
	case survey.EdgeSurveyInvitations:
		return m.clearedsurvey_invitations
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *SurveyMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Survey unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *SurveyMutation) ResetEdge(name string) error {
	switch name {
	case survey.EdgeSurveyQuestionAnswers:
		m.ResetSurveyQuestionAnswers()
		return nil
	case survey.EdgeSurveyInvitations:
		m.ResetSurveyInvitations()
		return nil
	}
	return fmt.Errorf("unknown Survey edge %s", name)
}

// SurveyInvitationMutation represents an operation that mutates the SurveyInvitation nodes in the graph.
type SurveyInvitationMutation struct {
	config
	op               Op
	typ              string
	id               *int
	status           *surveyinvitation.Status
	sent             *bool
	sent_times       *[]string
	appendsent_times []string
	created_at       *time.Time
	updated_at       *time.Time
	clearedFields    map[string]struct{}
	customer         *uuid.UUID
	clearedcustomer  bool
	project          *uuid.UUID
	clearedproject   bool
	survey           *uuid.UUID
	clearedsurvey    bool
	done             bool
	oldValue         func(context.Context) (*SurveyInvitation, error)
	predicates       []predicate.SurveyInvitation
}

var _ ent.Mutation = (*SurveyInvitationMutation)(nil)

// surveyinvitationOption allows management of the mutation configuration using functional options.
type surveyinvitationOption func(*SurveyInvitationMutation)

// newSurveyInvitationMutation creates new mutation for the SurveyInvitation entity.
func newSurveyInvitationMutation(c config, op Op, opts ...surveyinvitationOption) *SurveyInvitationMutation {
	m := &SurveyInvitationMutation{
		config:        c,
		op:            op,
		typ:           TypeSurveyInvitation,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withSurveyInvitationID sets the ID field of the mutation.
func withSurveyInvitationID(id int) surveyinvitationOption {
	return func(m *SurveyInvitationMutation) {
		var (
			err   error
			once  sync.Once
			value *SurveyInvitation
		)
		m.oldValue = func(ctx context.Context) (*SurveyInvitation, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().SurveyInvitation.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withSurveyInvitation sets the old SurveyInvitation of the mutation.
func withSurveyInvitation(node *SurveyInvitation) surveyinvitationOption {
	return func(m *SurveyInvitationMutation) {
		m.oldValue = func(context.Context) (*SurveyInvitation, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m SurveyInvitationMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m SurveyInvitationMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("db: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *SurveyInvitationMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *SurveyInvitationMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().SurveyInvitation.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetStatus sets the "status" field.
func (m *SurveyInvitationMutation) SetStatus(s surveyinvitation.Status) {
	m.status = &s
}

// Status returns the value of the "status" field in the mutation.
func (m *SurveyInvitationMutation) Status() (r surveyinvitation.Status, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the SurveyInvitation entity.
// If the SurveyInvitation object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SurveyInvitationMutation) OldStatus(ctx context.Context) (v surveyinvitation.Status, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// ResetStatus resets all changes to the "status" field.
func (m *SurveyInvitationMutation) ResetStatus() {
	m.status = nil
}

// SetSent sets the "sent" field.
func (m *SurveyInvitationMutation) SetSent(b bool) {
	m.sent = &b
}

// Sent returns the value of the "sent" field in the mutation.
func (m *SurveyInvitationMutation) Sent() (r bool, exists bool) {
	v := m.sent
	if v == nil {
		return
	}
	return *v, true
}

// OldSent returns the old "sent" field's value of the SurveyInvitation entity.
// If the SurveyInvitation object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SurveyInvitationMutation) OldSent(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSent is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSent requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSent: %w", err)
	}
	return oldValue.Sent, nil
}

// ResetSent resets all changes to the "sent" field.
func (m *SurveyInvitationMutation) ResetSent() {
	m.sent = nil
}

// SetSentTimes sets the "sent_times" field.
func (m *SurveyInvitationMutation) SetSentTimes(s []string) {
	m.sent_times = &s
	m.appendsent_times = nil
}

// SentTimes returns the value of the "sent_times" field in the mutation.
func (m *SurveyInvitationMutation) SentTimes() (r []string, exists bool) {
	v := m.sent_times
	if v == nil {
		return
	}
	return *v, true
}

// OldSentTimes returns the old "sent_times" field's value of the SurveyInvitation entity.
// If the SurveyInvitation object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SurveyInvitationMutation) OldSentTimes(ctx context.Context) (v []string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSentTimes is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSentTimes requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSentTimes: %w", err)
	}
	return oldValue.SentTimes, nil
}

// AppendSentTimes adds s to the "sent_times" field.
func (m *SurveyInvitationMutation) AppendSentTimes(s []string) {
	m.appendsent_times = append(m.appendsent_times, s...)
}

// AppendedSentTimes returns the list of values that were appended to the "sent_times" field in this mutation.
func (m *SurveyInvitationMutation) AppendedSentTimes() ([]string, bool) {
	if len(m.appendsent_times) == 0 {
		return nil, false
	}
	return m.appendsent_times, true
}

// ResetSentTimes resets all changes to the "sent_times" field.
func (m *SurveyInvitationMutation) ResetSentTimes() {
	m.sent_times = nil
	m.appendsent_times = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *SurveyInvitationMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *SurveyInvitationMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the SurveyInvitation entity.
// If the SurveyInvitation object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SurveyInvitationMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *SurveyInvitationMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *SurveyInvitationMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *SurveyInvitationMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the SurveyInvitation entity.
// If the SurveyInvitation object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SurveyInvitationMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *SurveyInvitationMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetCustomerID sets the "customer" edge to the Customer entity by id.
func (m *SurveyInvitationMutation) SetCustomerID(id uuid.UUID) {
	m.customer = &id
}

// ClearCustomer clears the "customer" edge to the Customer entity.
func (m *SurveyInvitationMutation) ClearCustomer() {
	m.clearedcustomer = true
}

// CustomerCleared reports if the "customer" edge to the Customer entity was cleared.
func (m *SurveyInvitationMutation) CustomerCleared() bool {
	return m.clearedcustomer
}

// CustomerID returns the "customer" edge ID in the mutation.
func (m *SurveyInvitationMutation) CustomerID() (id uuid.UUID, exists bool) {
	if m.customer != nil {
		return *m.customer, true
	}
	return
}

// CustomerIDs returns the "customer" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// CustomerID instead. It exists only for internal usage by the builders.
func (m *SurveyInvitationMutation) CustomerIDs() (ids []uuid.UUID) {
	if id := m.customer; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetCustomer resets all changes to the "customer" edge.
func (m *SurveyInvitationMutation) ResetCustomer() {
	m.customer = nil
	m.clearedcustomer = false
}

// SetProjectID sets the "project" edge to the Project entity by id.
func (m *SurveyInvitationMutation) SetProjectID(id uuid.UUID) {
	m.project = &id
}

// ClearProject clears the "project" edge to the Project entity.
func (m *SurveyInvitationMutation) ClearProject() {
	m.clearedproject = true
}

// ProjectCleared reports if the "project" edge to the Project entity was cleared.
func (m *SurveyInvitationMutation) ProjectCleared() bool {
	return m.clearedproject
}

// ProjectID returns the "project" edge ID in the mutation.
func (m *SurveyInvitationMutation) ProjectID() (id uuid.UUID, exists bool) {
	if m.project != nil {
		return *m.project, true
	}
	return
}

// ProjectIDs returns the "project" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ProjectID instead. It exists only for internal usage by the builders.
func (m *SurveyInvitationMutation) ProjectIDs() (ids []uuid.UUID) {
	if id := m.project; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetProject resets all changes to the "project" edge.
func (m *SurveyInvitationMutation) ResetProject() {
	m.project = nil
	m.clearedproject = false
}

// SetSurveyID sets the "survey" edge to the Survey entity by id.
func (m *SurveyInvitationMutation) SetSurveyID(id uuid.UUID) {
	m.survey = &id
}

// ClearSurvey clears the "survey" edge to the Survey entity.
func (m *SurveyInvitationMutation) ClearSurvey() {
	m.clearedsurvey = true
}

// SurveyCleared reports if the "survey" edge to the Survey entity was cleared.
func (m *SurveyInvitationMutation) SurveyCleared() bool {
	return m.clearedsurvey
}

// SurveyID returns the "survey" edge ID in the mutation.
func (m *SurveyInvitationMutation) SurveyID() (id uuid.UUID, exists bool) {
	if m.survey != nil {
		return *m.survey, true
	}
	return
}

// SurveyIDs returns the "survey" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// SurveyID instead. It exists only for internal usage by the builders.
func (m *SurveyInvitationMutation) SurveyIDs() (ids []uuid.UUID) {
	if id := m.survey; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetSurvey resets all changes to the "survey" edge.
func (m *SurveyInvitationMutation) ResetSurvey() {
	m.survey = nil
	m.clearedsurvey = false
}

// Where appends a list predicates to the SurveyInvitationMutation builder.
func (m *SurveyInvitationMutation) Where(ps ...predicate.SurveyInvitation) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the SurveyInvitationMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *SurveyInvitationMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.SurveyInvitation, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *SurveyInvitationMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *SurveyInvitationMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (SurveyInvitation).
func (m *SurveyInvitationMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *SurveyInvitationMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.status != nil {
		fields = append(fields, surveyinvitation.FieldStatus)
	}
	if m.sent != nil {
		fields = append(fields, surveyinvitation.FieldSent)
	}
	if m.sent_times != nil {
		fields = append(fields, surveyinvitation.FieldSentTimes)
	}
	if m.created_at != nil {
		fields = append(fields, surveyinvitation.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, surveyinvitation.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *SurveyInvitationMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case surveyinvitation.FieldStatus:
		return m.Status()
	case surveyinvitation.FieldSent:
		return m.Sent()
	case surveyinvitation.FieldSentTimes:
		return m.SentTimes()
	case surveyinvitation.FieldCreatedAt:
		return m.CreatedAt()
	case surveyinvitation.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *SurveyInvitationMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case surveyinvitation.FieldStatus:
		return m.OldStatus(ctx)
	case surveyinvitation.FieldSent:
		return m.OldSent(ctx)
	case surveyinvitation.FieldSentTimes:
		return m.OldSentTimes(ctx)
	case surveyinvitation.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case surveyinvitation.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown SurveyInvitation field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SurveyInvitationMutation) SetField(name string, value ent.Value) error {
	switch name {
	case surveyinvitation.FieldStatus:
		v, ok := value.(surveyinvitation.Status)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case surveyinvitation.FieldSent:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSent(v)
		return nil
	case surveyinvitation.FieldSentTimes:
		v, ok := value.([]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSentTimes(v)
		return nil
	case surveyinvitation.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case surveyinvitation.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown SurveyInvitation field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *SurveyInvitationMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *SurveyInvitationMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SurveyInvitationMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown SurveyInvitation numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *SurveyInvitationMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *SurveyInvitationMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *SurveyInvitationMutation) ClearField(name string) error {
	return fmt.Errorf("unknown SurveyInvitation nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *SurveyInvitationMutation) ResetField(name string) error {
	switch name {
	case surveyinvitation.FieldStatus:
		m.ResetStatus()
		return nil
	case surveyinvitation.FieldSent:
		m.ResetSent()
		return nil
	case surveyinvitation.FieldSentTimes:
		m.ResetSentTimes()
		return nil
	case surveyinvitation.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case surveyinvitation.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown SurveyInvitation field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *SurveyInvitationMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.customer != nil {
		edges = append(edges, surveyinvitation.EdgeCustomer)
	}
	if m.project != nil {
		edges = append(edges, surveyinvitation.EdgeProject)
	}
	if m.survey != nil {
		edges = append(edges, surveyinvitation.EdgeSurvey)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *SurveyInvitationMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case surveyinvitation.EdgeCustomer:
		if id := m.customer; id != nil {
			return []ent.Value{*id}
		}
	case surveyinvitation.EdgeProject:
		if id := m.project; id != nil {
			return []ent.Value{*id}
		}
	case surveyinvitation.EdgeSurvey:
		if id := m.survey; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *SurveyInvitationMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *SurveyInvitationMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *SurveyInvitationMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.clearedcustomer {
		edges = append(edges, surveyinvitation.EdgeCustomer)
	}
	if m.clearedproject {
		edges = append(edges, surveyinvitation.EdgeProject)
	}
	if m.clearedsurvey {
		edges = append(edges, surveyinvitation.EdgeSurvey)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *SurveyInvitationMutation) EdgeCleared(name string) bool {
	switch name {
	case surveyinvitation.EdgeCustomer:
		return m.clearedcustomer
	case surveyinvitation.EdgeProject:
		return m.clearedproject
	case surveyinvitation.EdgeSurvey:
		return m.clearedsurvey
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *SurveyInvitationMutation) ClearEdge(name string) error {
	switch name {
	case surveyinvitation.EdgeCustomer:
		m.ClearCustomer()
		return nil
	case surveyinvitation.EdgeProject:
		m.ClearProject()
		return nil
	case surveyinvitation.EdgeSurvey:
		m.ClearSurvey()
		return nil
	}
	return fmt.Errorf("unknown SurveyInvitation unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *SurveyInvitationMutation) ResetEdge(name string) error {
	switch name {
	case surveyinvitation.EdgeCustomer:
		m.ResetCustomer()
		return nil
	case surveyinvitation.EdgeProject:
		m.ResetProject()
		return nil
	case surveyinvitation.EdgeSurvey:
		m.ResetSurvey()
		return nil
	}
	return fmt.Errorf("unknown SurveyInvitation edge %s", name)
}

// SurveyQuestionAnswersMutation represents an operation that mutates the SurveyQuestionAnswers nodes in the graph.
type SurveyQuestionAnswersMutation struct {
	config
	op              Op
	typ             string
	id              *int
	question_num    *int64
	addquestion_num *int64
	clearedFields   map[string]struct{}
	survey          *uuid.UUID
	clearedsurvey   bool
	question        *uuid.UUID
	clearedquestion bool
	answer          *uuid.UUID
	clearedanswer   bool
	done            bool
	oldValue        func(context.Context) (*SurveyQuestionAnswers, error)
	predicates      []predicate.SurveyQuestionAnswers
}

var _ ent.Mutation = (*SurveyQuestionAnswersMutation)(nil)

// surveyquestionanswersOption allows management of the mutation configuration using functional options.
type surveyquestionanswersOption func(*SurveyQuestionAnswersMutation)

// newSurveyQuestionAnswersMutation creates new mutation for the SurveyQuestionAnswers entity.
func newSurveyQuestionAnswersMutation(c config, op Op, opts ...surveyquestionanswersOption) *SurveyQuestionAnswersMutation {
	m := &SurveyQuestionAnswersMutation{
		config:        c,
		op:            op,
		typ:           TypeSurveyQuestionAnswers,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withSurveyQuestionAnswersID sets the ID field of the mutation.
func withSurveyQuestionAnswersID(id int) surveyquestionanswersOption {
	return func(m *SurveyQuestionAnswersMutation) {
		var (
			err   error
			once  sync.Once
			value *SurveyQuestionAnswers
		)
		m.oldValue = func(ctx context.Context) (*SurveyQuestionAnswers, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().SurveyQuestionAnswers.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withSurveyQuestionAnswers sets the old SurveyQuestionAnswers of the mutation.
func withSurveyQuestionAnswers(node *SurveyQuestionAnswers) surveyquestionanswersOption {
	return func(m *SurveyQuestionAnswersMutation) {
		m.oldValue = func(context.Context) (*SurveyQuestionAnswers, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m SurveyQuestionAnswersMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m SurveyQuestionAnswersMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("db: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *SurveyQuestionAnswersMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *SurveyQuestionAnswersMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().SurveyQuestionAnswers.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetQuestionNum sets the "question_num" field.
func (m *SurveyQuestionAnswersMutation) SetQuestionNum(i int64) {
	m.question_num = &i
	m.addquestion_num = nil
}

// QuestionNum returns the value of the "question_num" field in the mutation.
func (m *SurveyQuestionAnswersMutation) QuestionNum() (r int64, exists bool) {
	v := m.question_num
	if v == nil {
		return
	}
	return *v, true
}

// OldQuestionNum returns the old "question_num" field's value of the SurveyQuestionAnswers entity.
// If the SurveyQuestionAnswers object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SurveyQuestionAnswersMutation) OldQuestionNum(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldQuestionNum is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldQuestionNum requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldQuestionNum: %w", err)
	}
	return oldValue.QuestionNum, nil
}

// AddQuestionNum adds i to the "question_num" field.
func (m *SurveyQuestionAnswersMutation) AddQuestionNum(i int64) {
	if m.addquestion_num != nil {
		*m.addquestion_num += i
	} else {
		m.addquestion_num = &i
	}
}

// AddedQuestionNum returns the value that was added to the "question_num" field in this mutation.
func (m *SurveyQuestionAnswersMutation) AddedQuestionNum() (r int64, exists bool) {
	v := m.addquestion_num
	if v == nil {
		return
	}
	return *v, true
}

// ResetQuestionNum resets all changes to the "question_num" field.
func (m *SurveyQuestionAnswersMutation) ResetQuestionNum() {
	m.question_num = nil
	m.addquestion_num = nil
}

// SetSurveyID sets the "survey" edge to the Survey entity by id.
func (m *SurveyQuestionAnswersMutation) SetSurveyID(id uuid.UUID) {
	m.survey = &id
}

// ClearSurvey clears the "survey" edge to the Survey entity.
func (m *SurveyQuestionAnswersMutation) ClearSurvey() {
	m.clearedsurvey = true
}

// SurveyCleared reports if the "survey" edge to the Survey entity was cleared.
func (m *SurveyQuestionAnswersMutation) SurveyCleared() bool {
	return m.clearedsurvey
}

// SurveyID returns the "survey" edge ID in the mutation.
func (m *SurveyQuestionAnswersMutation) SurveyID() (id uuid.UUID, exists bool) {
	if m.survey != nil {
		return *m.survey, true
	}
	return
}

// SurveyIDs returns the "survey" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// SurveyID instead. It exists only for internal usage by the builders.
func (m *SurveyQuestionAnswersMutation) SurveyIDs() (ids []uuid.UUID) {
	if id := m.survey; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetSurvey resets all changes to the "survey" edge.
func (m *SurveyQuestionAnswersMutation) ResetSurvey() {
	m.survey = nil
	m.clearedsurvey = false
}

// SetQuestionID sets the "question" edge to the Question entity by id.
func (m *SurveyQuestionAnswersMutation) SetQuestionID(id uuid.UUID) {
	m.question = &id
}

// ClearQuestion clears the "question" edge to the Question entity.
func (m *SurveyQuestionAnswersMutation) ClearQuestion() {
	m.clearedquestion = true
}

// QuestionCleared reports if the "question" edge to the Question entity was cleared.
func (m *SurveyQuestionAnswersMutation) QuestionCleared() bool {
	return m.clearedquestion
}

// QuestionID returns the "question" edge ID in the mutation.
func (m *SurveyQuestionAnswersMutation) QuestionID() (id uuid.UUID, exists bool) {
	if m.question != nil {
		return *m.question, true
	}
	return
}

// QuestionIDs returns the "question" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// QuestionID instead. It exists only for internal usage by the builders.
func (m *SurveyQuestionAnswersMutation) QuestionIDs() (ids []uuid.UUID) {
	if id := m.question; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetQuestion resets all changes to the "question" edge.
func (m *SurveyQuestionAnswersMutation) ResetQuestion() {
	m.question = nil
	m.clearedquestion = false
}

// SetAnswerID sets the "answer" edge to the Answer entity by id.
func (m *SurveyQuestionAnswersMutation) SetAnswerID(id uuid.UUID) {
	m.answer = &id
}

// ClearAnswer clears the "answer" edge to the Answer entity.
func (m *SurveyQuestionAnswersMutation) ClearAnswer() {
	m.clearedanswer = true
}

// AnswerCleared reports if the "answer" edge to the Answer entity was cleared.
func (m *SurveyQuestionAnswersMutation) AnswerCleared() bool {
	return m.clearedanswer
}

// AnswerID returns the "answer" edge ID in the mutation.
func (m *SurveyQuestionAnswersMutation) AnswerID() (id uuid.UUID, exists bool) {
	if m.answer != nil {
		return *m.answer, true
	}
	return
}

// AnswerIDs returns the "answer" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// AnswerID instead. It exists only for internal usage by the builders.
func (m *SurveyQuestionAnswersMutation) AnswerIDs() (ids []uuid.UUID) {
	if id := m.answer; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetAnswer resets all changes to the "answer" edge.
func (m *SurveyQuestionAnswersMutation) ResetAnswer() {
	m.answer = nil
	m.clearedanswer = false
}

// Where appends a list predicates to the SurveyQuestionAnswersMutation builder.
func (m *SurveyQuestionAnswersMutation) Where(ps ...predicate.SurveyQuestionAnswers) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the SurveyQuestionAnswersMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *SurveyQuestionAnswersMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.SurveyQuestionAnswers, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *SurveyQuestionAnswersMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *SurveyQuestionAnswersMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (SurveyQuestionAnswers).
func (m *SurveyQuestionAnswersMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *SurveyQuestionAnswersMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.question_num != nil {
		fields = append(fields, surveyquestionanswers.FieldQuestionNum)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *SurveyQuestionAnswersMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case surveyquestionanswers.FieldQuestionNum:
		return m.QuestionNum()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *SurveyQuestionAnswersMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case surveyquestionanswers.FieldQuestionNum:
		return m.OldQuestionNum(ctx)
	}
	return nil, fmt.Errorf("unknown SurveyQuestionAnswers field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SurveyQuestionAnswersMutation) SetField(name string, value ent.Value) error {
	switch name {
	case surveyquestionanswers.FieldQuestionNum:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetQuestionNum(v)
		return nil
	}
	return fmt.Errorf("unknown SurveyQuestionAnswers field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *SurveyQuestionAnswersMutation) AddedFields() []string {
	var fields []string
	if m.addquestion_num != nil {
		fields = append(fields, surveyquestionanswers.FieldQuestionNum)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *SurveyQuestionAnswersMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case surveyquestionanswers.FieldQuestionNum:
		return m.AddedQuestionNum()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SurveyQuestionAnswersMutation) AddField(name string, value ent.Value) error {
	switch name {
	case surveyquestionanswers.FieldQuestionNum:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddQuestionNum(v)
		return nil
	}
	return fmt.Errorf("unknown SurveyQuestionAnswers numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *SurveyQuestionAnswersMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *SurveyQuestionAnswersMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *SurveyQuestionAnswersMutation) ClearField(name string) error {
	return fmt.Errorf("unknown SurveyQuestionAnswers nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *SurveyQuestionAnswersMutation) ResetField(name string) error {
	switch name {
	case surveyquestionanswers.FieldQuestionNum:
		m.ResetQuestionNum()
		return nil
	}
	return fmt.Errorf("unknown SurveyQuestionAnswers field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *SurveyQuestionAnswersMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.survey != nil {
		edges = append(edges, surveyquestionanswers.EdgeSurvey)
	}
	if m.question != nil {
		edges = append(edges, surveyquestionanswers.EdgeQuestion)
	}
	if m.answer != nil {
		edges = append(edges, surveyquestionanswers.EdgeAnswer)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *SurveyQuestionAnswersMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case surveyquestionanswers.EdgeSurvey:
		if id := m.survey; id != nil {
			return []ent.Value{*id}
		}
	case surveyquestionanswers.EdgeQuestion:
		if id := m.question; id != nil {
			return []ent.Value{*id}
		}
	case surveyquestionanswers.EdgeAnswer:
		if id := m.answer; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *SurveyQuestionAnswersMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *SurveyQuestionAnswersMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *SurveyQuestionAnswersMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.clearedsurvey {
		edges = append(edges, surveyquestionanswers.EdgeSurvey)
	}
	if m.clearedquestion {
		edges = append(edges, surveyquestionanswers.EdgeQuestion)
	}
	if m.clearedanswer {
		edges = append(edges, surveyquestionanswers.EdgeAnswer)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *SurveyQuestionAnswersMutation) EdgeCleared(name string) bool {
	switch name {
	case surveyquestionanswers.EdgeSurvey:
		return m.clearedsurvey
	case surveyquestionanswers.EdgeQuestion:
		return m.clearedquestion
	case surveyquestionanswers.EdgeAnswer:
		return m.clearedanswer
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *SurveyQuestionAnswersMutation) ClearEdge(name string) error {
	switch name {
	case surveyquestionanswers.EdgeSurvey:
		m.ClearSurvey()
		return nil
	case surveyquestionanswers.EdgeQuestion:
		m.ClearQuestion()
		return nil
	case surveyquestionanswers.EdgeAnswer:
		m.ClearAnswer()
		return nil
	}
	return fmt.Errorf("unknown SurveyQuestionAnswers unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *SurveyQuestionAnswersMutation) ResetEdge(name string) error {
	switch name {
	case surveyquestionanswers.EdgeSurvey:
		m.ResetSurvey()
		return nil
	case surveyquestionanswers.EdgeQuestion:
		m.ResetQuestion()
		return nil
	case surveyquestionanswers.EdgeAnswer:
		m.ResetAnswer()
		return nil
	}
	return fmt.Errorf("unknown SurveyQuestionAnswers edge %s", name)
}
