// Code generated by ent, DO NOT EDIT.

package answer

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the answer type in the database.
	Label = "answer"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "oid"
	// FieldText holds the string denoting the text field in the database.
	FieldText = "text"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// EdgeChoices holds the string denoting the choices edge name in mutations.
	EdgeChoices = "choices"
	// EdgeSurveyQuestionAnswers holds the string denoting the survey_question_answers edge name in mutations.
	EdgeSurveyQuestionAnswers = "survey_question_answers"
	// ChoiceFieldID holds the string denoting the ID field of the Choice.
	ChoiceFieldID = "id"
	// SurveyQuestionAnswersFieldID holds the string denoting the ID field of the SurveyQuestionAnswers.
	SurveyQuestionAnswersFieldID = "id"
	// Table holds the table name of the answer in the database.
	Table = "answers"
	// ChoicesTable is the table that holds the choices relation/edge.
	ChoicesTable = "choices"
	// ChoicesInverseTable is the table name for the Choice entity.
	// It exists in this package in order to avoid circular dependency with the "choice" package.
	ChoicesInverseTable = "choices"
	// ChoicesColumn is the table column denoting the choices relation/edge.
	ChoicesColumn = "answer_choices"
	// SurveyQuestionAnswersTable is the table that holds the survey_question_answers relation/edge.
	SurveyQuestionAnswersTable = "survey_question_answers"
	// SurveyQuestionAnswersInverseTable is the table name for the SurveyQuestionAnswers entity.
	// It exists in this package in order to avoid circular dependency with the "surveyquestionanswers" package.
	SurveyQuestionAnswersInverseTable = "survey_question_answers"
	// SurveyQuestionAnswersColumn is the table column denoting the survey_question_answers relation/edge.
	SurveyQuestionAnswersColumn = "answer_survey_question_answers"
)

// Columns holds all SQL columns for answer fields.
var Columns = []string{
	FieldID,
	FieldText,
	FieldCreatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the Answer queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByText orders the results by the text field.
func ByText(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldText, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByChoicesCount orders the results by choices count.
func ByChoicesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newChoicesStep(), opts...)
	}
}

// ByChoices orders the results by choices terms.
func ByChoices(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newChoicesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// BySurveyQuestionAnswersCount orders the results by survey_question_answers count.
func BySurveyQuestionAnswersCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newSurveyQuestionAnswersStep(), opts...)
	}
}

// BySurveyQuestionAnswers orders the results by survey_question_answers terms.
func BySurveyQuestionAnswers(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSurveyQuestionAnswersStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newChoicesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ChoicesInverseTable, ChoiceFieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ChoicesTable, ChoicesColumn),
	)
}
func newSurveyQuestionAnswersStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SurveyQuestionAnswersInverseTable, SurveyQuestionAnswersFieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, SurveyQuestionAnswersTable, SurveyQuestionAnswersColumn),
	)
}
