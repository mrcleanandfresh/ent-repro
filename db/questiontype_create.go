// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"test/db/question"
	"test/db/questiontype"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// QuestionTypeCreate is the builder for creating a QuestionType entity.
type QuestionTypeCreate struct {
	config
	mutation *QuestionTypeMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetDescription sets the "description" field.
func (qtc *QuestionTypeCreate) SetDescription(s string) *QuestionTypeCreate {
	qtc.mutation.SetDescription(s)
	return qtc
}

// SetType sets the "type" field.
func (qtc *QuestionTypeCreate) SetType(q questiontype.Type) *QuestionTypeCreate {
	qtc.mutation.SetType(q)
	return qtc
}

// AddQuestionIDs adds the "questions" edge to the Question entity by IDs.
func (qtc *QuestionTypeCreate) AddQuestionIDs(ids ...uuid.UUID) *QuestionTypeCreate {
	qtc.mutation.AddQuestionIDs(ids...)
	return qtc
}

// AddQuestions adds the "questions" edges to the Question entity.
func (qtc *QuestionTypeCreate) AddQuestions(q ...*Question) *QuestionTypeCreate {
	ids := make([]uuid.UUID, len(q))
	for i := range q {
		ids[i] = q[i].ID
	}
	return qtc.AddQuestionIDs(ids...)
}

// Mutation returns the QuestionTypeMutation object of the builder.
func (qtc *QuestionTypeCreate) Mutation() *QuestionTypeMutation {
	return qtc.mutation
}

// Save creates the QuestionType in the database.
func (qtc *QuestionTypeCreate) Save(ctx context.Context) (*QuestionType, error) {
	return withHooks(ctx, qtc.sqlSave, qtc.mutation, qtc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (qtc *QuestionTypeCreate) SaveX(ctx context.Context) *QuestionType {
	v, err := qtc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (qtc *QuestionTypeCreate) Exec(ctx context.Context) error {
	_, err := qtc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (qtc *QuestionTypeCreate) ExecX(ctx context.Context) {
	if err := qtc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (qtc *QuestionTypeCreate) check() error {
	if _, ok := qtc.mutation.Description(); !ok {
		return &ValidationError{Name: "description", err: errors.New(`db: missing required field "QuestionType.description"`)}
	}
	if _, ok := qtc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`db: missing required field "QuestionType.type"`)}
	}
	if v, ok := qtc.mutation.GetType(); ok {
		if err := questiontype.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`db: validator failed for field "QuestionType.type": %w`, err)}
		}
	}
	return nil
}

func (qtc *QuestionTypeCreate) sqlSave(ctx context.Context) (*QuestionType, error) {
	if err := qtc.check(); err != nil {
		return nil, err
	}
	_node, _spec := qtc.createSpec()
	if err := sqlgraph.CreateNode(ctx, qtc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	qtc.mutation.id = &_node.ID
	qtc.mutation.done = true
	return _node, nil
}

func (qtc *QuestionTypeCreate) createSpec() (*QuestionType, *sqlgraph.CreateSpec) {
	var (
		_node = &QuestionType{config: qtc.config}
		_spec = sqlgraph.NewCreateSpec(questiontype.Table, sqlgraph.NewFieldSpec(questiontype.FieldID, field.TypeInt))
	)
	_spec.OnConflict = qtc.conflict
	if value, ok := qtc.mutation.Description(); ok {
		_spec.SetField(questiontype.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := qtc.mutation.GetType(); ok {
		_spec.SetField(questiontype.FieldType, field.TypeEnum, value)
		_node.Type = value
	}
	if nodes := qtc.mutation.QuestionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   questiontype.QuestionsTable,
			Columns: questiontype.QuestionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(question.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.QuestionType.Create().
//		SetDescription(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.QuestionTypeUpsert) {
//			SetDescription(v+v).
//		}).
//		Exec(ctx)
func (qtc *QuestionTypeCreate) OnConflict(opts ...sql.ConflictOption) *QuestionTypeUpsertOne {
	qtc.conflict = opts
	return &QuestionTypeUpsertOne{
		create: qtc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.QuestionType.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (qtc *QuestionTypeCreate) OnConflictColumns(columns ...string) *QuestionTypeUpsertOne {
	qtc.conflict = append(qtc.conflict, sql.ConflictColumns(columns...))
	return &QuestionTypeUpsertOne{
		create: qtc,
	}
}

type (
	// QuestionTypeUpsertOne is the builder for "upsert"-ing
	//  one QuestionType node.
	QuestionTypeUpsertOne struct {
		create *QuestionTypeCreate
	}

	// QuestionTypeUpsert is the "OnConflict" setter.
	QuestionTypeUpsert struct {
		*sql.UpdateSet
	}
)

// SetDescription sets the "description" field.
func (u *QuestionTypeUpsert) SetDescription(v string) *QuestionTypeUpsert {
	u.Set(questiontype.FieldDescription, v)
	return u
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *QuestionTypeUpsert) UpdateDescription() *QuestionTypeUpsert {
	u.SetExcluded(questiontype.FieldDescription)
	return u
}

// SetType sets the "type" field.
func (u *QuestionTypeUpsert) SetType(v questiontype.Type) *QuestionTypeUpsert {
	u.Set(questiontype.FieldType, v)
	return u
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *QuestionTypeUpsert) UpdateType() *QuestionTypeUpsert {
	u.SetExcluded(questiontype.FieldType)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.QuestionType.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *QuestionTypeUpsertOne) UpdateNewValues() *QuestionTypeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.QuestionType.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *QuestionTypeUpsertOne) Ignore() *QuestionTypeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *QuestionTypeUpsertOne) DoNothing() *QuestionTypeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the QuestionTypeCreate.OnConflict
// documentation for more info.
func (u *QuestionTypeUpsertOne) Update(set func(*QuestionTypeUpsert)) *QuestionTypeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&QuestionTypeUpsert{UpdateSet: update})
	}))
	return u
}

// SetDescription sets the "description" field.
func (u *QuestionTypeUpsertOne) SetDescription(v string) *QuestionTypeUpsertOne {
	return u.Update(func(s *QuestionTypeUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *QuestionTypeUpsertOne) UpdateDescription() *QuestionTypeUpsertOne {
	return u.Update(func(s *QuestionTypeUpsert) {
		s.UpdateDescription()
	})
}

// SetType sets the "type" field.
func (u *QuestionTypeUpsertOne) SetType(v questiontype.Type) *QuestionTypeUpsertOne {
	return u.Update(func(s *QuestionTypeUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *QuestionTypeUpsertOne) UpdateType() *QuestionTypeUpsertOne {
	return u.Update(func(s *QuestionTypeUpsert) {
		s.UpdateType()
	})
}

// Exec executes the query.
func (u *QuestionTypeUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("db: missing options for QuestionTypeCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *QuestionTypeUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *QuestionTypeUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *QuestionTypeUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// QuestionTypeCreateBulk is the builder for creating many QuestionType entities in bulk.
type QuestionTypeCreateBulk struct {
	config
	err      error
	builders []*QuestionTypeCreate
	conflict []sql.ConflictOption
}

// Save creates the QuestionType entities in the database.
func (qtcb *QuestionTypeCreateBulk) Save(ctx context.Context) ([]*QuestionType, error) {
	if qtcb.err != nil {
		return nil, qtcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(qtcb.builders))
	nodes := make([]*QuestionType, len(qtcb.builders))
	mutators := make([]Mutator, len(qtcb.builders))
	for i := range qtcb.builders {
		func(i int, root context.Context) {
			builder := qtcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*QuestionTypeMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, qtcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = qtcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, qtcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, qtcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (qtcb *QuestionTypeCreateBulk) SaveX(ctx context.Context) []*QuestionType {
	v, err := qtcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (qtcb *QuestionTypeCreateBulk) Exec(ctx context.Context) error {
	_, err := qtcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (qtcb *QuestionTypeCreateBulk) ExecX(ctx context.Context) {
	if err := qtcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.QuestionType.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.QuestionTypeUpsert) {
//			SetDescription(v+v).
//		}).
//		Exec(ctx)
func (qtcb *QuestionTypeCreateBulk) OnConflict(opts ...sql.ConflictOption) *QuestionTypeUpsertBulk {
	qtcb.conflict = opts
	return &QuestionTypeUpsertBulk{
		create: qtcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.QuestionType.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (qtcb *QuestionTypeCreateBulk) OnConflictColumns(columns ...string) *QuestionTypeUpsertBulk {
	qtcb.conflict = append(qtcb.conflict, sql.ConflictColumns(columns...))
	return &QuestionTypeUpsertBulk{
		create: qtcb,
	}
}

// QuestionTypeUpsertBulk is the builder for "upsert"-ing
// a bulk of QuestionType nodes.
type QuestionTypeUpsertBulk struct {
	create *QuestionTypeCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.QuestionType.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *QuestionTypeUpsertBulk) UpdateNewValues() *QuestionTypeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.QuestionType.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *QuestionTypeUpsertBulk) Ignore() *QuestionTypeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *QuestionTypeUpsertBulk) DoNothing() *QuestionTypeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the QuestionTypeCreateBulk.OnConflict
// documentation for more info.
func (u *QuestionTypeUpsertBulk) Update(set func(*QuestionTypeUpsert)) *QuestionTypeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&QuestionTypeUpsert{UpdateSet: update})
	}))
	return u
}

// SetDescription sets the "description" field.
func (u *QuestionTypeUpsertBulk) SetDescription(v string) *QuestionTypeUpsertBulk {
	return u.Update(func(s *QuestionTypeUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *QuestionTypeUpsertBulk) UpdateDescription() *QuestionTypeUpsertBulk {
	return u.Update(func(s *QuestionTypeUpsert) {
		s.UpdateDescription()
	})
}

// SetType sets the "type" field.
func (u *QuestionTypeUpsertBulk) SetType(v questiontype.Type) *QuestionTypeUpsertBulk {
	return u.Update(func(s *QuestionTypeUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *QuestionTypeUpsertBulk) UpdateType() *QuestionTypeUpsertBulk {
	return u.Update(func(s *QuestionTypeUpsert) {
		s.UpdateType()
	})
}

// Exec executes the query.
func (u *QuestionTypeUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("db: OnConflict was set for builder %d. Set it on the QuestionTypeCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("db: missing options for QuestionTypeCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *QuestionTypeUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
