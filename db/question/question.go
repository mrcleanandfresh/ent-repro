// Code generated by ent, DO NOT EDIT.

package question

import (
	"test/db/schema/schematype"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the question type in the database.
	Label = "question"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "oid"
	// FieldText holds the string denoting the text field in the database.
	FieldText = "text"
	// FieldSubText holds the string denoting the sub_text field in the database.
	FieldSubText = "sub_text"
	// FieldWeight holds the string denoting the weight field in the database.
	FieldWeight = "weight"
	// FieldRequired holds the string denoting the required field in the database.
	FieldRequired = "required"
	// FieldMeta holds the string denoting the meta field in the database.
	FieldMeta = "meta"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeSurveyQuestionAnswers holds the string denoting the survey_question_answers edge name in mutations.
	EdgeSurveyQuestionAnswers = "survey_question_answers"
	// EdgeQuestionType holds the string denoting the questiontype edge name in mutations.
	EdgeQuestionType = "questionType"
	// EdgeChoices holds the string denoting the choices edge name in mutations.
	EdgeChoices = "choices"
	// SurveyQuestionAnswersFieldID holds the string denoting the ID field of the SurveyQuestionAnswers.
	SurveyQuestionAnswersFieldID = "id"
	// QuestionTypeFieldID holds the string denoting the ID field of the QuestionType.
	QuestionTypeFieldID = "id"
	// ChoiceFieldID holds the string denoting the ID field of the Choice.
	ChoiceFieldID = "id"
	// Table holds the table name of the question in the database.
	Table = "questions"
	// SurveyQuestionAnswersTable is the table that holds the survey_question_answers relation/edge.
	SurveyQuestionAnswersTable = "survey_question_answers"
	// SurveyQuestionAnswersInverseTable is the table name for the SurveyQuestionAnswers entity.
	// It exists in this package in order to avoid circular dependency with the "surveyquestionanswers" package.
	SurveyQuestionAnswersInverseTable = "survey_question_answers"
	// SurveyQuestionAnswersColumn is the table column denoting the survey_question_answers relation/edge.
	SurveyQuestionAnswersColumn = "question_survey_question_answers"
	// QuestionTypeTable is the table that holds the questionType relation/edge. The primary key declared below.
	QuestionTypeTable = "question_type_questions"
	// QuestionTypeInverseTable is the table name for the QuestionType entity.
	// It exists in this package in order to avoid circular dependency with the "questiontype" package.
	QuestionTypeInverseTable = "question_types"
	// ChoicesTable is the table that holds the choices relation/edge.
	ChoicesTable = "choices"
	// ChoicesInverseTable is the table name for the Choice entity.
	// It exists in this package in order to avoid circular dependency with the "choice" package.
	ChoicesInverseTable = "choices"
	// ChoicesColumn is the table column denoting the choices relation/edge.
	ChoicesColumn = "question_choices"
)

// Columns holds all SQL columns for question fields.
var Columns = []string{
	FieldID,
	FieldText,
	FieldSubText,
	FieldWeight,
	FieldRequired,
	FieldMeta,
	FieldCreatedAt,
	FieldUpdatedAt,
}

var (
	// QuestionTypePrimaryKey and QuestionTypeColumn2 are the table columns denoting the
	// primary key for the questionType relation (M2M).
	QuestionTypePrimaryKey = []string{"question_type_id", "question_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "test/db/runtime"
var (
	Hooks [1]ent.Hook
	// DefaultWeight holds the default value on creation for the "weight" field.
	DefaultWeight int
	// DefaultRequired holds the default value on creation for the "required" field.
	DefaultRequired bool
	// DefaultMeta holds the default value on creation for the "meta" field.
	DefaultMeta *schematype.Metadata
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the Question queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByText orders the results by the text field.
func ByText(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldText, opts...).ToFunc()
}

// BySubText orders the results by the sub_text field.
func BySubText(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSubText, opts...).ToFunc()
}

// ByWeight orders the results by the weight field.
func ByWeight(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldWeight, opts...).ToFunc()
}

// ByRequired orders the results by the required field.
func ByRequired(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRequired, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// BySurveyQuestionAnswersCount orders the results by survey_question_answers count.
func BySurveyQuestionAnswersCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newSurveyQuestionAnswersStep(), opts...)
	}
}

// BySurveyQuestionAnswers orders the results by survey_question_answers terms.
func BySurveyQuestionAnswers(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSurveyQuestionAnswersStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByQuestionTypeCount orders the results by questionType count.
func ByQuestionTypeCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newQuestionTypeStep(), opts...)
	}
}

// ByQuestionType orders the results by questionType terms.
func ByQuestionType(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newQuestionTypeStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByChoicesCount orders the results by choices count.
func ByChoicesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newChoicesStep(), opts...)
	}
}

// ByChoices orders the results by choices terms.
func ByChoices(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newChoicesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newSurveyQuestionAnswersStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SurveyQuestionAnswersInverseTable, SurveyQuestionAnswersFieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, SurveyQuestionAnswersTable, SurveyQuestionAnswersColumn),
	)
}
func newQuestionTypeStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(QuestionTypeInverseTable, QuestionTypeFieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, QuestionTypeTable, QuestionTypePrimaryKey...),
	)
}
func newChoicesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ChoicesInverseTable, ChoiceFieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ChoicesTable, ChoicesColumn),
	)
}
