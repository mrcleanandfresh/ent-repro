// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"test/db/predicate"
	"test/db/survey"
	"test/db/surveyinvitation"
	"test/db/surveyquestionanswers"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SurveyUpdate is the builder for updating Survey entities.
type SurveyUpdate struct {
	config
	hooks    []Hook
	mutation *SurveyMutation
}

// Where appends a list predicates to the SurveyUpdate builder.
func (su *SurveyUpdate) Where(ps ...predicate.Survey) *SurveyUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetIdentifier sets the "identifier" field.
func (su *SurveyUpdate) SetIdentifier(s string) *SurveyUpdate {
	su.mutation.SetIdentifier(s)
	return su
}

// SetNillableIdentifier sets the "identifier" field if the given value is not nil.
func (su *SurveyUpdate) SetNillableIdentifier(s *string) *SurveyUpdate {
	if s != nil {
		su.SetIdentifier(*s)
	}
	return su
}

// SetName sets the "name" field.
func (su *SurveyUpdate) SetName(s string) *SurveyUpdate {
	su.mutation.SetName(s)
	return su
}

// SetDescription sets the "description" field.
func (su *SurveyUpdate) SetDescription(s string) *SurveyUpdate {
	su.mutation.SetDescription(s)
	return su
}

// SetUpdatedAt sets the "updated_at" field.
func (su *SurveyUpdate) SetUpdatedAt(t time.Time) *SurveyUpdate {
	su.mutation.SetUpdatedAt(t)
	return su
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (su *SurveyUpdate) SetNillableUpdatedAt(t *time.Time) *SurveyUpdate {
	if t != nil {
		su.SetUpdatedAt(*t)
	}
	return su
}

// AddSurveyQuestionAnswerIDs adds the "survey_question_answers" edge to the SurveyQuestionAnswers entity by IDs.
func (su *SurveyUpdate) AddSurveyQuestionAnswerIDs(ids ...int) *SurveyUpdate {
	su.mutation.AddSurveyQuestionAnswerIDs(ids...)
	return su
}

// AddSurveyQuestionAnswers adds the "survey_question_answers" edges to the SurveyQuestionAnswers entity.
func (su *SurveyUpdate) AddSurveyQuestionAnswers(s ...*SurveyQuestionAnswers) *SurveyUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return su.AddSurveyQuestionAnswerIDs(ids...)
}

// AddSurveyInvitationIDs adds the "survey_invitations" edge to the SurveyInvitation entity by IDs.
func (su *SurveyUpdate) AddSurveyInvitationIDs(ids ...int) *SurveyUpdate {
	su.mutation.AddSurveyInvitationIDs(ids...)
	return su
}

// AddSurveyInvitations adds the "survey_invitations" edges to the SurveyInvitation entity.
func (su *SurveyUpdate) AddSurveyInvitations(s ...*SurveyInvitation) *SurveyUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return su.AddSurveyInvitationIDs(ids...)
}

// Mutation returns the SurveyMutation object of the builder.
func (su *SurveyUpdate) Mutation() *SurveyMutation {
	return su.mutation
}

// ClearSurveyQuestionAnswers clears all "survey_question_answers" edges to the SurveyQuestionAnswers entity.
func (su *SurveyUpdate) ClearSurveyQuestionAnswers() *SurveyUpdate {
	su.mutation.ClearSurveyQuestionAnswers()
	return su
}

// RemoveSurveyQuestionAnswerIDs removes the "survey_question_answers" edge to SurveyQuestionAnswers entities by IDs.
func (su *SurveyUpdate) RemoveSurveyQuestionAnswerIDs(ids ...int) *SurveyUpdate {
	su.mutation.RemoveSurveyQuestionAnswerIDs(ids...)
	return su
}

// RemoveSurveyQuestionAnswers removes "survey_question_answers" edges to SurveyQuestionAnswers entities.
func (su *SurveyUpdate) RemoveSurveyQuestionAnswers(s ...*SurveyQuestionAnswers) *SurveyUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return su.RemoveSurveyQuestionAnswerIDs(ids...)
}

// ClearSurveyInvitations clears all "survey_invitations" edges to the SurveyInvitation entity.
func (su *SurveyUpdate) ClearSurveyInvitations() *SurveyUpdate {
	su.mutation.ClearSurveyInvitations()
	return su
}

// RemoveSurveyInvitationIDs removes the "survey_invitations" edge to SurveyInvitation entities by IDs.
func (su *SurveyUpdate) RemoveSurveyInvitationIDs(ids ...int) *SurveyUpdate {
	su.mutation.RemoveSurveyInvitationIDs(ids...)
	return su
}

// RemoveSurveyInvitations removes "survey_invitations" edges to SurveyInvitation entities.
func (su *SurveyUpdate) RemoveSurveyInvitations(s ...*SurveyInvitation) *SurveyUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return su.RemoveSurveyInvitationIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *SurveyUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, su.sqlSave, su.mutation, su.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (su *SurveyUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *SurveyUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *SurveyUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (su *SurveyUpdate) check() error {
	if v, ok := su.mutation.Name(); ok {
		if err := survey.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`db: validator failed for field "Survey.name": %w`, err)}
		}
	}
	if v, ok := su.mutation.Description(); ok {
		if err := survey.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`db: validator failed for field "Survey.description": %w`, err)}
		}
	}
	return nil
}

func (su *SurveyUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := su.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(survey.Table, survey.Columns, sqlgraph.NewFieldSpec(survey.FieldID, field.TypeUUID))
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.Identifier(); ok {
		_spec.SetField(survey.FieldIdentifier, field.TypeString, value)
	}
	if value, ok := su.mutation.Name(); ok {
		_spec.SetField(survey.FieldName, field.TypeString, value)
	}
	if value, ok := su.mutation.Description(); ok {
		_spec.SetField(survey.FieldDescription, field.TypeString, value)
	}
	if value, ok := su.mutation.UpdatedAt(); ok {
		_spec.SetField(survey.FieldUpdatedAt, field.TypeTime, value)
	}
	if su.mutation.SurveyQuestionAnswersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   survey.SurveyQuestionAnswersTable,
			Columns: []string{survey.SurveyQuestionAnswersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(surveyquestionanswers.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedSurveyQuestionAnswersIDs(); len(nodes) > 0 && !su.mutation.SurveyQuestionAnswersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   survey.SurveyQuestionAnswersTable,
			Columns: []string{survey.SurveyQuestionAnswersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(surveyquestionanswers.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.SurveyQuestionAnswersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   survey.SurveyQuestionAnswersTable,
			Columns: []string{survey.SurveyQuestionAnswersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(surveyquestionanswers.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.SurveyInvitationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   survey.SurveyInvitationsTable,
			Columns: []string{survey.SurveyInvitationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(surveyinvitation.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedSurveyInvitationsIDs(); len(nodes) > 0 && !su.mutation.SurveyInvitationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   survey.SurveyInvitationsTable,
			Columns: []string{survey.SurveyInvitationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(surveyinvitation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.SurveyInvitationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   survey.SurveyInvitationsTable,
			Columns: []string{survey.SurveyInvitationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(surveyinvitation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{survey.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	su.mutation.done = true
	return n, nil
}

// SurveyUpdateOne is the builder for updating a single Survey entity.
type SurveyUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SurveyMutation
}

// SetIdentifier sets the "identifier" field.
func (suo *SurveyUpdateOne) SetIdentifier(s string) *SurveyUpdateOne {
	suo.mutation.SetIdentifier(s)
	return suo
}

// SetNillableIdentifier sets the "identifier" field if the given value is not nil.
func (suo *SurveyUpdateOne) SetNillableIdentifier(s *string) *SurveyUpdateOne {
	if s != nil {
		suo.SetIdentifier(*s)
	}
	return suo
}

// SetName sets the "name" field.
func (suo *SurveyUpdateOne) SetName(s string) *SurveyUpdateOne {
	suo.mutation.SetName(s)
	return suo
}

// SetDescription sets the "description" field.
func (suo *SurveyUpdateOne) SetDescription(s string) *SurveyUpdateOne {
	suo.mutation.SetDescription(s)
	return suo
}

// SetUpdatedAt sets the "updated_at" field.
func (suo *SurveyUpdateOne) SetUpdatedAt(t time.Time) *SurveyUpdateOne {
	suo.mutation.SetUpdatedAt(t)
	return suo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (suo *SurveyUpdateOne) SetNillableUpdatedAt(t *time.Time) *SurveyUpdateOne {
	if t != nil {
		suo.SetUpdatedAt(*t)
	}
	return suo
}

// AddSurveyQuestionAnswerIDs adds the "survey_question_answers" edge to the SurveyQuestionAnswers entity by IDs.
func (suo *SurveyUpdateOne) AddSurveyQuestionAnswerIDs(ids ...int) *SurveyUpdateOne {
	suo.mutation.AddSurveyQuestionAnswerIDs(ids...)
	return suo
}

// AddSurveyQuestionAnswers adds the "survey_question_answers" edges to the SurveyQuestionAnswers entity.
func (suo *SurveyUpdateOne) AddSurveyQuestionAnswers(s ...*SurveyQuestionAnswers) *SurveyUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return suo.AddSurveyQuestionAnswerIDs(ids...)
}

// AddSurveyInvitationIDs adds the "survey_invitations" edge to the SurveyInvitation entity by IDs.
func (suo *SurveyUpdateOne) AddSurveyInvitationIDs(ids ...int) *SurveyUpdateOne {
	suo.mutation.AddSurveyInvitationIDs(ids...)
	return suo
}

// AddSurveyInvitations adds the "survey_invitations" edges to the SurveyInvitation entity.
func (suo *SurveyUpdateOne) AddSurveyInvitations(s ...*SurveyInvitation) *SurveyUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return suo.AddSurveyInvitationIDs(ids...)
}

// Mutation returns the SurveyMutation object of the builder.
func (suo *SurveyUpdateOne) Mutation() *SurveyMutation {
	return suo.mutation
}

// ClearSurveyQuestionAnswers clears all "survey_question_answers" edges to the SurveyQuestionAnswers entity.
func (suo *SurveyUpdateOne) ClearSurveyQuestionAnswers() *SurveyUpdateOne {
	suo.mutation.ClearSurveyQuestionAnswers()
	return suo
}

// RemoveSurveyQuestionAnswerIDs removes the "survey_question_answers" edge to SurveyQuestionAnswers entities by IDs.
func (suo *SurveyUpdateOne) RemoveSurveyQuestionAnswerIDs(ids ...int) *SurveyUpdateOne {
	suo.mutation.RemoveSurveyQuestionAnswerIDs(ids...)
	return suo
}

// RemoveSurveyQuestionAnswers removes "survey_question_answers" edges to SurveyQuestionAnswers entities.
func (suo *SurveyUpdateOne) RemoveSurveyQuestionAnswers(s ...*SurveyQuestionAnswers) *SurveyUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return suo.RemoveSurveyQuestionAnswerIDs(ids...)
}

// ClearSurveyInvitations clears all "survey_invitations" edges to the SurveyInvitation entity.
func (suo *SurveyUpdateOne) ClearSurveyInvitations() *SurveyUpdateOne {
	suo.mutation.ClearSurveyInvitations()
	return suo
}

// RemoveSurveyInvitationIDs removes the "survey_invitations" edge to SurveyInvitation entities by IDs.
func (suo *SurveyUpdateOne) RemoveSurveyInvitationIDs(ids ...int) *SurveyUpdateOne {
	suo.mutation.RemoveSurveyInvitationIDs(ids...)
	return suo
}

// RemoveSurveyInvitations removes "survey_invitations" edges to SurveyInvitation entities.
func (suo *SurveyUpdateOne) RemoveSurveyInvitations(s ...*SurveyInvitation) *SurveyUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return suo.RemoveSurveyInvitationIDs(ids...)
}

// Where appends a list predicates to the SurveyUpdate builder.
func (suo *SurveyUpdateOne) Where(ps ...predicate.Survey) *SurveyUpdateOne {
	suo.mutation.Where(ps...)
	return suo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *SurveyUpdateOne) Select(field string, fields ...string) *SurveyUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated Survey entity.
func (suo *SurveyUpdateOne) Save(ctx context.Context) (*Survey, error) {
	return withHooks(ctx, suo.sqlSave, suo.mutation, suo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (suo *SurveyUpdateOne) SaveX(ctx context.Context) *Survey {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *SurveyUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *SurveyUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (suo *SurveyUpdateOne) check() error {
	if v, ok := suo.mutation.Name(); ok {
		if err := survey.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`db: validator failed for field "Survey.name": %w`, err)}
		}
	}
	if v, ok := suo.mutation.Description(); ok {
		if err := survey.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`db: validator failed for field "Survey.description": %w`, err)}
		}
	}
	return nil
}

func (suo *SurveyUpdateOne) sqlSave(ctx context.Context) (_node *Survey, err error) {
	if err := suo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(survey.Table, survey.Columns, sqlgraph.NewFieldSpec(survey.FieldID, field.TypeUUID))
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`db: missing "Survey.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, survey.FieldID)
		for _, f := range fields {
			if !survey.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("db: invalid field %q for query", f)}
			}
			if f != survey.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.Identifier(); ok {
		_spec.SetField(survey.FieldIdentifier, field.TypeString, value)
	}
	if value, ok := suo.mutation.Name(); ok {
		_spec.SetField(survey.FieldName, field.TypeString, value)
	}
	if value, ok := suo.mutation.Description(); ok {
		_spec.SetField(survey.FieldDescription, field.TypeString, value)
	}
	if value, ok := suo.mutation.UpdatedAt(); ok {
		_spec.SetField(survey.FieldUpdatedAt, field.TypeTime, value)
	}
	if suo.mutation.SurveyQuestionAnswersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   survey.SurveyQuestionAnswersTable,
			Columns: []string{survey.SurveyQuestionAnswersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(surveyquestionanswers.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedSurveyQuestionAnswersIDs(); len(nodes) > 0 && !suo.mutation.SurveyQuestionAnswersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   survey.SurveyQuestionAnswersTable,
			Columns: []string{survey.SurveyQuestionAnswersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(surveyquestionanswers.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.SurveyQuestionAnswersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   survey.SurveyQuestionAnswersTable,
			Columns: []string{survey.SurveyQuestionAnswersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(surveyquestionanswers.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.SurveyInvitationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   survey.SurveyInvitationsTable,
			Columns: []string{survey.SurveyInvitationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(surveyinvitation.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedSurveyInvitationsIDs(); len(nodes) > 0 && !suo.mutation.SurveyInvitationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   survey.SurveyInvitationsTable,
			Columns: []string{survey.SurveyInvitationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(surveyinvitation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.SurveyInvitationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   survey.SurveyInvitationsTable,
			Columns: []string{survey.SurveyInvitationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(surveyinvitation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Survey{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{survey.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	suo.mutation.done = true
	return _node, nil
}
