// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"test/db/predicate"
	"test/db/question"
	"test/db/questiontype"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// QuestionTypeUpdate is the builder for updating QuestionType entities.
type QuestionTypeUpdate struct {
	config
	hooks    []Hook
	mutation *QuestionTypeMutation
}

// Where appends a list predicates to the QuestionTypeUpdate builder.
func (qtu *QuestionTypeUpdate) Where(ps ...predicate.QuestionType) *QuestionTypeUpdate {
	qtu.mutation.Where(ps...)
	return qtu
}

// SetDescription sets the "description" field.
func (qtu *QuestionTypeUpdate) SetDescription(s string) *QuestionTypeUpdate {
	qtu.mutation.SetDescription(s)
	return qtu
}

// SetType sets the "type" field.
func (qtu *QuestionTypeUpdate) SetType(q questiontype.Type) *QuestionTypeUpdate {
	qtu.mutation.SetType(q)
	return qtu
}

// AddQuestionIDs adds the "questions" edge to the Question entity by IDs.
func (qtu *QuestionTypeUpdate) AddQuestionIDs(ids ...uuid.UUID) *QuestionTypeUpdate {
	qtu.mutation.AddQuestionIDs(ids...)
	return qtu
}

// AddQuestions adds the "questions" edges to the Question entity.
func (qtu *QuestionTypeUpdate) AddQuestions(q ...*Question) *QuestionTypeUpdate {
	ids := make([]uuid.UUID, len(q))
	for i := range q {
		ids[i] = q[i].ID
	}
	return qtu.AddQuestionIDs(ids...)
}

// Mutation returns the QuestionTypeMutation object of the builder.
func (qtu *QuestionTypeUpdate) Mutation() *QuestionTypeMutation {
	return qtu.mutation
}

// ClearQuestions clears all "questions" edges to the Question entity.
func (qtu *QuestionTypeUpdate) ClearQuestions() *QuestionTypeUpdate {
	qtu.mutation.ClearQuestions()
	return qtu
}

// RemoveQuestionIDs removes the "questions" edge to Question entities by IDs.
func (qtu *QuestionTypeUpdate) RemoveQuestionIDs(ids ...uuid.UUID) *QuestionTypeUpdate {
	qtu.mutation.RemoveQuestionIDs(ids...)
	return qtu
}

// RemoveQuestions removes "questions" edges to Question entities.
func (qtu *QuestionTypeUpdate) RemoveQuestions(q ...*Question) *QuestionTypeUpdate {
	ids := make([]uuid.UUID, len(q))
	for i := range q {
		ids[i] = q[i].ID
	}
	return qtu.RemoveQuestionIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (qtu *QuestionTypeUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, qtu.sqlSave, qtu.mutation, qtu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (qtu *QuestionTypeUpdate) SaveX(ctx context.Context) int {
	affected, err := qtu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (qtu *QuestionTypeUpdate) Exec(ctx context.Context) error {
	_, err := qtu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (qtu *QuestionTypeUpdate) ExecX(ctx context.Context) {
	if err := qtu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (qtu *QuestionTypeUpdate) check() error {
	if v, ok := qtu.mutation.GetType(); ok {
		if err := questiontype.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`db: validator failed for field "QuestionType.type": %w`, err)}
		}
	}
	return nil
}

func (qtu *QuestionTypeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := qtu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(questiontype.Table, questiontype.Columns, sqlgraph.NewFieldSpec(questiontype.FieldID, field.TypeInt))
	if ps := qtu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := qtu.mutation.Description(); ok {
		_spec.SetField(questiontype.FieldDescription, field.TypeString, value)
	}
	if value, ok := qtu.mutation.GetType(); ok {
		_spec.SetField(questiontype.FieldType, field.TypeEnum, value)
	}
	if qtu.mutation.QuestionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   questiontype.QuestionsTable,
			Columns: questiontype.QuestionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(question.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := qtu.mutation.RemovedQuestionsIDs(); len(nodes) > 0 && !qtu.mutation.QuestionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   questiontype.QuestionsTable,
			Columns: questiontype.QuestionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(question.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := qtu.mutation.QuestionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   questiontype.QuestionsTable,
			Columns: questiontype.QuestionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(question.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, qtu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{questiontype.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	qtu.mutation.done = true
	return n, nil
}

// QuestionTypeUpdateOne is the builder for updating a single QuestionType entity.
type QuestionTypeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *QuestionTypeMutation
}

// SetDescription sets the "description" field.
func (qtuo *QuestionTypeUpdateOne) SetDescription(s string) *QuestionTypeUpdateOne {
	qtuo.mutation.SetDescription(s)
	return qtuo
}

// SetType sets the "type" field.
func (qtuo *QuestionTypeUpdateOne) SetType(q questiontype.Type) *QuestionTypeUpdateOne {
	qtuo.mutation.SetType(q)
	return qtuo
}

// AddQuestionIDs adds the "questions" edge to the Question entity by IDs.
func (qtuo *QuestionTypeUpdateOne) AddQuestionIDs(ids ...uuid.UUID) *QuestionTypeUpdateOne {
	qtuo.mutation.AddQuestionIDs(ids...)
	return qtuo
}

// AddQuestions adds the "questions" edges to the Question entity.
func (qtuo *QuestionTypeUpdateOne) AddQuestions(q ...*Question) *QuestionTypeUpdateOne {
	ids := make([]uuid.UUID, len(q))
	for i := range q {
		ids[i] = q[i].ID
	}
	return qtuo.AddQuestionIDs(ids...)
}

// Mutation returns the QuestionTypeMutation object of the builder.
func (qtuo *QuestionTypeUpdateOne) Mutation() *QuestionTypeMutation {
	return qtuo.mutation
}

// ClearQuestions clears all "questions" edges to the Question entity.
func (qtuo *QuestionTypeUpdateOne) ClearQuestions() *QuestionTypeUpdateOne {
	qtuo.mutation.ClearQuestions()
	return qtuo
}

// RemoveQuestionIDs removes the "questions" edge to Question entities by IDs.
func (qtuo *QuestionTypeUpdateOne) RemoveQuestionIDs(ids ...uuid.UUID) *QuestionTypeUpdateOne {
	qtuo.mutation.RemoveQuestionIDs(ids...)
	return qtuo
}

// RemoveQuestions removes "questions" edges to Question entities.
func (qtuo *QuestionTypeUpdateOne) RemoveQuestions(q ...*Question) *QuestionTypeUpdateOne {
	ids := make([]uuid.UUID, len(q))
	for i := range q {
		ids[i] = q[i].ID
	}
	return qtuo.RemoveQuestionIDs(ids...)
}

// Where appends a list predicates to the QuestionTypeUpdate builder.
func (qtuo *QuestionTypeUpdateOne) Where(ps ...predicate.QuestionType) *QuestionTypeUpdateOne {
	qtuo.mutation.Where(ps...)
	return qtuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (qtuo *QuestionTypeUpdateOne) Select(field string, fields ...string) *QuestionTypeUpdateOne {
	qtuo.fields = append([]string{field}, fields...)
	return qtuo
}

// Save executes the query and returns the updated QuestionType entity.
func (qtuo *QuestionTypeUpdateOne) Save(ctx context.Context) (*QuestionType, error) {
	return withHooks(ctx, qtuo.sqlSave, qtuo.mutation, qtuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (qtuo *QuestionTypeUpdateOne) SaveX(ctx context.Context) *QuestionType {
	node, err := qtuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (qtuo *QuestionTypeUpdateOne) Exec(ctx context.Context) error {
	_, err := qtuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (qtuo *QuestionTypeUpdateOne) ExecX(ctx context.Context) {
	if err := qtuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (qtuo *QuestionTypeUpdateOne) check() error {
	if v, ok := qtuo.mutation.GetType(); ok {
		if err := questiontype.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`db: validator failed for field "QuestionType.type": %w`, err)}
		}
	}
	return nil
}

func (qtuo *QuestionTypeUpdateOne) sqlSave(ctx context.Context) (_node *QuestionType, err error) {
	if err := qtuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(questiontype.Table, questiontype.Columns, sqlgraph.NewFieldSpec(questiontype.FieldID, field.TypeInt))
	id, ok := qtuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`db: missing "QuestionType.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := qtuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, questiontype.FieldID)
		for _, f := range fields {
			if !questiontype.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("db: invalid field %q for query", f)}
			}
			if f != questiontype.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := qtuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := qtuo.mutation.Description(); ok {
		_spec.SetField(questiontype.FieldDescription, field.TypeString, value)
	}
	if value, ok := qtuo.mutation.GetType(); ok {
		_spec.SetField(questiontype.FieldType, field.TypeEnum, value)
	}
	if qtuo.mutation.QuestionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   questiontype.QuestionsTable,
			Columns: questiontype.QuestionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(question.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := qtuo.mutation.RemovedQuestionsIDs(); len(nodes) > 0 && !qtuo.mutation.QuestionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   questiontype.QuestionsTable,
			Columns: questiontype.QuestionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(question.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := qtuo.mutation.QuestionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   questiontype.QuestionsTable,
			Columns: questiontype.QuestionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(question.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &QuestionType{config: qtuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, qtuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{questiontype.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	qtuo.mutation.done = true
	return _node, nil
}
