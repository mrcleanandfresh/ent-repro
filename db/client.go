// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"log"
	"reflect"

	"test/db/migrate"

	"test/db/answer"
	"test/db/choice"
	"test/db/customer"
	"test/db/project"
	"test/db/question"
	"test/db/questiontype"
	"test/db/survey"
	"test/db/surveyinvitation"
	"test/db/surveyquestionanswers"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Answer is the client for interacting with the Answer builders.
	Answer *AnswerClient
	// Choice is the client for interacting with the Choice builders.
	Choice *ChoiceClient
	// Customer is the client for interacting with the Customer builders.
	Customer *CustomerClient
	// Project is the client for interacting with the Project builders.
	Project *ProjectClient
	// Question is the client for interacting with the Question builders.
	Question *QuestionClient
	// QuestionType is the client for interacting with the QuestionType builders.
	QuestionType *QuestionTypeClient
	// Survey is the client for interacting with the Survey builders.
	Survey *SurveyClient
	// SurveyInvitation is the client for interacting with the SurveyInvitation builders.
	SurveyInvitation *SurveyInvitationClient
	// SurveyQuestionAnswers is the client for interacting with the SurveyQuestionAnswers builders.
	SurveyQuestionAnswers *SurveyQuestionAnswersClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Answer = NewAnswerClient(c.config)
	c.Choice = NewChoiceClient(c.config)
	c.Customer = NewCustomerClient(c.config)
	c.Project = NewProjectClient(c.config)
	c.Question = NewQuestionClient(c.config)
	c.QuestionType = NewQuestionTypeClient(c.config)
	c.Survey = NewSurveyClient(c.config)
	c.SurveyInvitation = NewSurveyInvitationClient(c.config)
	c.SurveyQuestionAnswers = NewSurveyQuestionAnswersClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// ErrTxStarted is returned when trying to start a new transaction from a transactional client.
var ErrTxStarted = errors.New("db: cannot start a transaction within a transaction")

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, ErrTxStarted
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("db: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:                   ctx,
		config:                cfg,
		Answer:                NewAnswerClient(cfg),
		Choice:                NewChoiceClient(cfg),
		Customer:              NewCustomerClient(cfg),
		Project:               NewProjectClient(cfg),
		Question:              NewQuestionClient(cfg),
		QuestionType:          NewQuestionTypeClient(cfg),
		Survey:                NewSurveyClient(cfg),
		SurveyInvitation:      NewSurveyInvitationClient(cfg),
		SurveyQuestionAnswers: NewSurveyQuestionAnswersClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:                   ctx,
		config:                cfg,
		Answer:                NewAnswerClient(cfg),
		Choice:                NewChoiceClient(cfg),
		Customer:              NewCustomerClient(cfg),
		Project:               NewProjectClient(cfg),
		Question:              NewQuestionClient(cfg),
		QuestionType:          NewQuestionTypeClient(cfg),
		Survey:                NewSurveyClient(cfg),
		SurveyInvitation:      NewSurveyInvitationClient(cfg),
		SurveyQuestionAnswers: NewSurveyQuestionAnswersClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Answer.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	for _, n := range []interface{ Use(...Hook) }{
		c.Answer, c.Choice, c.Customer, c.Project, c.Question, c.QuestionType, c.Survey,
		c.SurveyInvitation, c.SurveyQuestionAnswers,
	} {
		n.Use(hooks...)
	}
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	for _, n := range []interface{ Intercept(...Interceptor) }{
		c.Answer, c.Choice, c.Customer, c.Project, c.Question, c.QuestionType, c.Survey,
		c.SurveyInvitation, c.SurveyQuestionAnswers,
	} {
		n.Intercept(interceptors...)
	}
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *AnswerMutation:
		return c.Answer.mutate(ctx, m)
	case *ChoiceMutation:
		return c.Choice.mutate(ctx, m)
	case *CustomerMutation:
		return c.Customer.mutate(ctx, m)
	case *ProjectMutation:
		return c.Project.mutate(ctx, m)
	case *QuestionMutation:
		return c.Question.mutate(ctx, m)
	case *QuestionTypeMutation:
		return c.QuestionType.mutate(ctx, m)
	case *SurveyMutation:
		return c.Survey.mutate(ctx, m)
	case *SurveyInvitationMutation:
		return c.SurveyInvitation.mutate(ctx, m)
	case *SurveyQuestionAnswersMutation:
		return c.SurveyQuestionAnswers.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("db: unknown mutation type %T", m)
	}
}

// AnswerClient is a client for the Answer schema.
type AnswerClient struct {
	config
}

// NewAnswerClient returns a client for the Answer from the given config.
func NewAnswerClient(c config) *AnswerClient {
	return &AnswerClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `answer.Hooks(f(g(h())))`.
func (c *AnswerClient) Use(hooks ...Hook) {
	c.hooks.Answer = append(c.hooks.Answer, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `answer.Intercept(f(g(h())))`.
func (c *AnswerClient) Intercept(interceptors ...Interceptor) {
	c.inters.Answer = append(c.inters.Answer, interceptors...)
}

// Create returns a builder for creating a Answer entity.
func (c *AnswerClient) Create() *AnswerCreate {
	mutation := newAnswerMutation(c.config, OpCreate)
	return &AnswerCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Answer entities.
func (c *AnswerClient) CreateBulk(builders ...*AnswerCreate) *AnswerCreateBulk {
	return &AnswerCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *AnswerClient) MapCreateBulk(slice any, setFunc func(*AnswerCreate, int)) *AnswerCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &AnswerCreateBulk{err: fmt.Errorf("calling to AnswerClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*AnswerCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &AnswerCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Answer.
func (c *AnswerClient) Update() *AnswerUpdate {
	mutation := newAnswerMutation(c.config, OpUpdate)
	return &AnswerUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AnswerClient) UpdateOne(a *Answer) *AnswerUpdateOne {
	mutation := newAnswerMutation(c.config, OpUpdateOne, withAnswer(a))
	return &AnswerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AnswerClient) UpdateOneID(id uuid.UUID) *AnswerUpdateOne {
	mutation := newAnswerMutation(c.config, OpUpdateOne, withAnswerID(id))
	return &AnswerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Answer.
func (c *AnswerClient) Delete() *AnswerDelete {
	mutation := newAnswerMutation(c.config, OpDelete)
	return &AnswerDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *AnswerClient) DeleteOne(a *Answer) *AnswerDeleteOne {
	return c.DeleteOneID(a.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *AnswerClient) DeleteOneID(id uuid.UUID) *AnswerDeleteOne {
	builder := c.Delete().Where(answer.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AnswerDeleteOne{builder}
}

// Query returns a query builder for Answer.
func (c *AnswerClient) Query() *AnswerQuery {
	return &AnswerQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeAnswer},
		inters: c.Interceptors(),
	}
}

// Get returns a Answer entity by its id.
func (c *AnswerClient) Get(ctx context.Context, id uuid.UUID) (*Answer, error) {
	return c.Query().Where(answer.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AnswerClient) GetX(ctx context.Context, id uuid.UUID) *Answer {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryChoices queries the choices edge of a Answer.
func (c *AnswerClient) QueryChoices(a *Answer) *ChoiceQuery {
	query := (&ChoiceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(answer.Table, answer.FieldID, id),
			sqlgraph.To(choice.Table, choice.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, answer.ChoicesTable, answer.ChoicesColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySurveyQuestionAnswers queries the survey_question_answers edge of a Answer.
func (c *AnswerClient) QuerySurveyQuestionAnswers(a *Answer) *SurveyQuestionAnswersQuery {
	query := (&SurveyQuestionAnswersClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(answer.Table, answer.FieldID, id),
			sqlgraph.To(surveyquestionanswers.Table, surveyquestionanswers.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, answer.SurveyQuestionAnswersTable, answer.SurveyQuestionAnswersColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *AnswerClient) Hooks() []Hook {
	return c.hooks.Answer
}

// Interceptors returns the client interceptors.
func (c *AnswerClient) Interceptors() []Interceptor {
	return c.inters.Answer
}

func (c *AnswerClient) mutate(ctx context.Context, m *AnswerMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&AnswerCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&AnswerUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&AnswerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&AnswerDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("db: unknown Answer mutation op: %q", m.Op())
	}
}

// ChoiceClient is a client for the Choice schema.
type ChoiceClient struct {
	config
}

// NewChoiceClient returns a client for the Choice from the given config.
func NewChoiceClient(c config) *ChoiceClient {
	return &ChoiceClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `choice.Hooks(f(g(h())))`.
func (c *ChoiceClient) Use(hooks ...Hook) {
	c.hooks.Choice = append(c.hooks.Choice, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `choice.Intercept(f(g(h())))`.
func (c *ChoiceClient) Intercept(interceptors ...Interceptor) {
	c.inters.Choice = append(c.inters.Choice, interceptors...)
}

// Create returns a builder for creating a Choice entity.
func (c *ChoiceClient) Create() *ChoiceCreate {
	mutation := newChoiceMutation(c.config, OpCreate)
	return &ChoiceCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Choice entities.
func (c *ChoiceClient) CreateBulk(builders ...*ChoiceCreate) *ChoiceCreateBulk {
	return &ChoiceCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ChoiceClient) MapCreateBulk(slice any, setFunc func(*ChoiceCreate, int)) *ChoiceCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ChoiceCreateBulk{err: fmt.Errorf("calling to ChoiceClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ChoiceCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ChoiceCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Choice.
func (c *ChoiceClient) Update() *ChoiceUpdate {
	mutation := newChoiceMutation(c.config, OpUpdate)
	return &ChoiceUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ChoiceClient) UpdateOne(ch *Choice) *ChoiceUpdateOne {
	mutation := newChoiceMutation(c.config, OpUpdateOne, withChoice(ch))
	return &ChoiceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ChoiceClient) UpdateOneID(id int) *ChoiceUpdateOne {
	mutation := newChoiceMutation(c.config, OpUpdateOne, withChoiceID(id))
	return &ChoiceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Choice.
func (c *ChoiceClient) Delete() *ChoiceDelete {
	mutation := newChoiceMutation(c.config, OpDelete)
	return &ChoiceDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ChoiceClient) DeleteOne(ch *Choice) *ChoiceDeleteOne {
	return c.DeleteOneID(ch.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ChoiceClient) DeleteOneID(id int) *ChoiceDeleteOne {
	builder := c.Delete().Where(choice.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ChoiceDeleteOne{builder}
}

// Query returns a query builder for Choice.
func (c *ChoiceClient) Query() *ChoiceQuery {
	return &ChoiceQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeChoice},
		inters: c.Interceptors(),
	}
}

// Get returns a Choice entity by its id.
func (c *ChoiceClient) Get(ctx context.Context, id int) (*Choice, error) {
	return c.Query().Where(choice.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ChoiceClient) GetX(ctx context.Context, id int) *Choice {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryAnswer queries the answer edge of a Choice.
func (c *ChoiceClient) QueryAnswer(ch *Choice) *AnswerQuery {
	query := (&AnswerClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ch.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(choice.Table, choice.FieldID, id),
			sqlgraph.To(answer.Table, answer.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, choice.AnswerTable, choice.AnswerColumn),
		)
		fromV = sqlgraph.Neighbors(ch.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryQuestion queries the question edge of a Choice.
func (c *ChoiceClient) QueryQuestion(ch *Choice) *QuestionQuery {
	query := (&QuestionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ch.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(choice.Table, choice.FieldID, id),
			sqlgraph.To(question.Table, question.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, choice.QuestionTable, choice.QuestionColumn),
		)
		fromV = sqlgraph.Neighbors(ch.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ChoiceClient) Hooks() []Hook {
	return c.hooks.Choice
}

// Interceptors returns the client interceptors.
func (c *ChoiceClient) Interceptors() []Interceptor {
	return c.inters.Choice
}

func (c *ChoiceClient) mutate(ctx context.Context, m *ChoiceMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ChoiceCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ChoiceUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ChoiceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ChoiceDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("db: unknown Choice mutation op: %q", m.Op())
	}
}

// CustomerClient is a client for the Customer schema.
type CustomerClient struct {
	config
}

// NewCustomerClient returns a client for the Customer from the given config.
func NewCustomerClient(c config) *CustomerClient {
	return &CustomerClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `customer.Hooks(f(g(h())))`.
func (c *CustomerClient) Use(hooks ...Hook) {
	c.hooks.Customer = append(c.hooks.Customer, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `customer.Intercept(f(g(h())))`.
func (c *CustomerClient) Intercept(interceptors ...Interceptor) {
	c.inters.Customer = append(c.inters.Customer, interceptors...)
}

// Create returns a builder for creating a Customer entity.
func (c *CustomerClient) Create() *CustomerCreate {
	mutation := newCustomerMutation(c.config, OpCreate)
	return &CustomerCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Customer entities.
func (c *CustomerClient) CreateBulk(builders ...*CustomerCreate) *CustomerCreateBulk {
	return &CustomerCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *CustomerClient) MapCreateBulk(slice any, setFunc func(*CustomerCreate, int)) *CustomerCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &CustomerCreateBulk{err: fmt.Errorf("calling to CustomerClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*CustomerCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &CustomerCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Customer.
func (c *CustomerClient) Update() *CustomerUpdate {
	mutation := newCustomerMutation(c.config, OpUpdate)
	return &CustomerUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CustomerClient) UpdateOne(cu *Customer) *CustomerUpdateOne {
	mutation := newCustomerMutation(c.config, OpUpdateOne, withCustomer(cu))
	return &CustomerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CustomerClient) UpdateOneID(id uuid.UUID) *CustomerUpdateOne {
	mutation := newCustomerMutation(c.config, OpUpdateOne, withCustomerID(id))
	return &CustomerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Customer.
func (c *CustomerClient) Delete() *CustomerDelete {
	mutation := newCustomerMutation(c.config, OpDelete)
	return &CustomerDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CustomerClient) DeleteOne(cu *Customer) *CustomerDeleteOne {
	return c.DeleteOneID(cu.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *CustomerClient) DeleteOneID(id uuid.UUID) *CustomerDeleteOne {
	builder := c.Delete().Where(customer.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CustomerDeleteOne{builder}
}

// Query returns a query builder for Customer.
func (c *CustomerClient) Query() *CustomerQuery {
	return &CustomerQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeCustomer},
		inters: c.Interceptors(),
	}
}

// Get returns a Customer entity by its id.
func (c *CustomerClient) Get(ctx context.Context, id uuid.UUID) (*Customer, error) {
	return c.Query().Where(customer.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CustomerClient) GetX(ctx context.Context, id uuid.UUID) *Customer {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QuerySurveyInvitations queries the survey_invitations edge of a Customer.
func (c *CustomerClient) QuerySurveyInvitations(cu *Customer) *SurveyInvitationQuery {
	query := (&SurveyInvitationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := cu.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(customer.Table, customer.FieldID, id),
			sqlgraph.To(surveyinvitation.Table, surveyinvitation.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, customer.SurveyInvitationsTable, customer.SurveyInvitationsColumn),
		)
		fromV = sqlgraph.Neighbors(cu.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryProjects queries the projects edge of a Customer.
func (c *CustomerClient) QueryProjects(cu *Customer) *ProjectQuery {
	query := (&ProjectClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := cu.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(customer.Table, customer.FieldID, id),
			sqlgraph.To(project.Table, project.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, customer.ProjectsTable, customer.ProjectsColumn),
		)
		fromV = sqlgraph.Neighbors(cu.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CustomerClient) Hooks() []Hook {
	hooks := c.hooks.Customer
	return append(hooks[:len(hooks):len(hooks)], customer.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *CustomerClient) Interceptors() []Interceptor {
	return c.inters.Customer
}

func (c *CustomerClient) mutate(ctx context.Context, m *CustomerMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&CustomerCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&CustomerUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&CustomerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&CustomerDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("db: unknown Customer mutation op: %q", m.Op())
	}
}

// ProjectClient is a client for the Project schema.
type ProjectClient struct {
	config
}

// NewProjectClient returns a client for the Project from the given config.
func NewProjectClient(c config) *ProjectClient {
	return &ProjectClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `project.Hooks(f(g(h())))`.
func (c *ProjectClient) Use(hooks ...Hook) {
	c.hooks.Project = append(c.hooks.Project, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `project.Intercept(f(g(h())))`.
func (c *ProjectClient) Intercept(interceptors ...Interceptor) {
	c.inters.Project = append(c.inters.Project, interceptors...)
}

// Create returns a builder for creating a Project entity.
func (c *ProjectClient) Create() *ProjectCreate {
	mutation := newProjectMutation(c.config, OpCreate)
	return &ProjectCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Project entities.
func (c *ProjectClient) CreateBulk(builders ...*ProjectCreate) *ProjectCreateBulk {
	return &ProjectCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ProjectClient) MapCreateBulk(slice any, setFunc func(*ProjectCreate, int)) *ProjectCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ProjectCreateBulk{err: fmt.Errorf("calling to ProjectClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ProjectCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ProjectCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Project.
func (c *ProjectClient) Update() *ProjectUpdate {
	mutation := newProjectMutation(c.config, OpUpdate)
	return &ProjectUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ProjectClient) UpdateOne(pr *Project) *ProjectUpdateOne {
	mutation := newProjectMutation(c.config, OpUpdateOne, withProject(pr))
	return &ProjectUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ProjectClient) UpdateOneID(id uuid.UUID) *ProjectUpdateOne {
	mutation := newProjectMutation(c.config, OpUpdateOne, withProjectID(id))
	return &ProjectUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Project.
func (c *ProjectClient) Delete() *ProjectDelete {
	mutation := newProjectMutation(c.config, OpDelete)
	return &ProjectDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ProjectClient) DeleteOne(pr *Project) *ProjectDeleteOne {
	return c.DeleteOneID(pr.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ProjectClient) DeleteOneID(id uuid.UUID) *ProjectDeleteOne {
	builder := c.Delete().Where(project.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ProjectDeleteOne{builder}
}

// Query returns a query builder for Project.
func (c *ProjectClient) Query() *ProjectQuery {
	return &ProjectQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeProject},
		inters: c.Interceptors(),
	}
}

// Get returns a Project entity by its id.
func (c *ProjectClient) Get(ctx context.Context, id uuid.UUID) (*Project, error) {
	return c.Query().Where(project.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ProjectClient) GetX(ctx context.Context, id uuid.UUID) *Project {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryCustomer queries the customer edge of a Project.
func (c *ProjectClient) QueryCustomer(pr *Project) *CustomerQuery {
	query := (&CustomerClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(project.Table, project.FieldID, id),
			sqlgraph.To(customer.Table, customer.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, project.CustomerTable, project.CustomerColumn),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySurveyInvitations queries the survey_invitations edge of a Project.
func (c *ProjectClient) QuerySurveyInvitations(pr *Project) *SurveyInvitationQuery {
	query := (&SurveyInvitationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(project.Table, project.FieldID, id),
			sqlgraph.To(surveyinvitation.Table, surveyinvitation.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, project.SurveyInvitationsTable, project.SurveyInvitationsColumn),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ProjectClient) Hooks() []Hook {
	hooks := c.hooks.Project
	return append(hooks[:len(hooks):len(hooks)], project.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *ProjectClient) Interceptors() []Interceptor {
	return c.inters.Project
}

func (c *ProjectClient) mutate(ctx context.Context, m *ProjectMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ProjectCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ProjectUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ProjectUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ProjectDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("db: unknown Project mutation op: %q", m.Op())
	}
}

// QuestionClient is a client for the Question schema.
type QuestionClient struct {
	config
}

// NewQuestionClient returns a client for the Question from the given config.
func NewQuestionClient(c config) *QuestionClient {
	return &QuestionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `question.Hooks(f(g(h())))`.
func (c *QuestionClient) Use(hooks ...Hook) {
	c.hooks.Question = append(c.hooks.Question, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `question.Intercept(f(g(h())))`.
func (c *QuestionClient) Intercept(interceptors ...Interceptor) {
	c.inters.Question = append(c.inters.Question, interceptors...)
}

// Create returns a builder for creating a Question entity.
func (c *QuestionClient) Create() *QuestionCreate {
	mutation := newQuestionMutation(c.config, OpCreate)
	return &QuestionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Question entities.
func (c *QuestionClient) CreateBulk(builders ...*QuestionCreate) *QuestionCreateBulk {
	return &QuestionCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *QuestionClient) MapCreateBulk(slice any, setFunc func(*QuestionCreate, int)) *QuestionCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &QuestionCreateBulk{err: fmt.Errorf("calling to QuestionClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*QuestionCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &QuestionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Question.
func (c *QuestionClient) Update() *QuestionUpdate {
	mutation := newQuestionMutation(c.config, OpUpdate)
	return &QuestionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *QuestionClient) UpdateOne(q *Question) *QuestionUpdateOne {
	mutation := newQuestionMutation(c.config, OpUpdateOne, withQuestion(q))
	return &QuestionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *QuestionClient) UpdateOneID(id uuid.UUID) *QuestionUpdateOne {
	mutation := newQuestionMutation(c.config, OpUpdateOne, withQuestionID(id))
	return &QuestionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Question.
func (c *QuestionClient) Delete() *QuestionDelete {
	mutation := newQuestionMutation(c.config, OpDelete)
	return &QuestionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *QuestionClient) DeleteOne(q *Question) *QuestionDeleteOne {
	return c.DeleteOneID(q.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *QuestionClient) DeleteOneID(id uuid.UUID) *QuestionDeleteOne {
	builder := c.Delete().Where(question.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &QuestionDeleteOne{builder}
}

// Query returns a query builder for Question.
func (c *QuestionClient) Query() *QuestionQuery {
	return &QuestionQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeQuestion},
		inters: c.Interceptors(),
	}
}

// Get returns a Question entity by its id.
func (c *QuestionClient) Get(ctx context.Context, id uuid.UUID) (*Question, error) {
	return c.Query().Where(question.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *QuestionClient) GetX(ctx context.Context, id uuid.UUID) *Question {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QuerySurveyQuestionAnswers queries the survey_question_answers edge of a Question.
func (c *QuestionClient) QuerySurveyQuestionAnswers(q *Question) *SurveyQuestionAnswersQuery {
	query := (&SurveyQuestionAnswersClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := q.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(question.Table, question.FieldID, id),
			sqlgraph.To(surveyquestionanswers.Table, surveyquestionanswers.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, question.SurveyQuestionAnswersTable, question.SurveyQuestionAnswersColumn),
		)
		fromV = sqlgraph.Neighbors(q.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryQuestionType queries the questionType edge of a Question.
func (c *QuestionClient) QueryQuestionType(q *Question) *QuestionTypeQuery {
	query := (&QuestionTypeClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := q.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(question.Table, question.FieldID, id),
			sqlgraph.To(questiontype.Table, questiontype.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, question.QuestionTypeTable, question.QuestionTypePrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(q.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryChoices queries the choices edge of a Question.
func (c *QuestionClient) QueryChoices(q *Question) *ChoiceQuery {
	query := (&ChoiceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := q.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(question.Table, question.FieldID, id),
			sqlgraph.To(choice.Table, choice.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, question.ChoicesTable, question.ChoicesColumn),
		)
		fromV = sqlgraph.Neighbors(q.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *QuestionClient) Hooks() []Hook {
	hooks := c.hooks.Question
	return append(hooks[:len(hooks):len(hooks)], question.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *QuestionClient) Interceptors() []Interceptor {
	return c.inters.Question
}

func (c *QuestionClient) mutate(ctx context.Context, m *QuestionMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&QuestionCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&QuestionUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&QuestionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&QuestionDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("db: unknown Question mutation op: %q", m.Op())
	}
}

// QuestionTypeClient is a client for the QuestionType schema.
type QuestionTypeClient struct {
	config
}

// NewQuestionTypeClient returns a client for the QuestionType from the given config.
func NewQuestionTypeClient(c config) *QuestionTypeClient {
	return &QuestionTypeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `questiontype.Hooks(f(g(h())))`.
func (c *QuestionTypeClient) Use(hooks ...Hook) {
	c.hooks.QuestionType = append(c.hooks.QuestionType, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `questiontype.Intercept(f(g(h())))`.
func (c *QuestionTypeClient) Intercept(interceptors ...Interceptor) {
	c.inters.QuestionType = append(c.inters.QuestionType, interceptors...)
}

// Create returns a builder for creating a QuestionType entity.
func (c *QuestionTypeClient) Create() *QuestionTypeCreate {
	mutation := newQuestionTypeMutation(c.config, OpCreate)
	return &QuestionTypeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of QuestionType entities.
func (c *QuestionTypeClient) CreateBulk(builders ...*QuestionTypeCreate) *QuestionTypeCreateBulk {
	return &QuestionTypeCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *QuestionTypeClient) MapCreateBulk(slice any, setFunc func(*QuestionTypeCreate, int)) *QuestionTypeCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &QuestionTypeCreateBulk{err: fmt.Errorf("calling to QuestionTypeClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*QuestionTypeCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &QuestionTypeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for QuestionType.
func (c *QuestionTypeClient) Update() *QuestionTypeUpdate {
	mutation := newQuestionTypeMutation(c.config, OpUpdate)
	return &QuestionTypeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *QuestionTypeClient) UpdateOne(qt *QuestionType) *QuestionTypeUpdateOne {
	mutation := newQuestionTypeMutation(c.config, OpUpdateOne, withQuestionType(qt))
	return &QuestionTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *QuestionTypeClient) UpdateOneID(id int) *QuestionTypeUpdateOne {
	mutation := newQuestionTypeMutation(c.config, OpUpdateOne, withQuestionTypeID(id))
	return &QuestionTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for QuestionType.
func (c *QuestionTypeClient) Delete() *QuestionTypeDelete {
	mutation := newQuestionTypeMutation(c.config, OpDelete)
	return &QuestionTypeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *QuestionTypeClient) DeleteOne(qt *QuestionType) *QuestionTypeDeleteOne {
	return c.DeleteOneID(qt.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *QuestionTypeClient) DeleteOneID(id int) *QuestionTypeDeleteOne {
	builder := c.Delete().Where(questiontype.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &QuestionTypeDeleteOne{builder}
}

// Query returns a query builder for QuestionType.
func (c *QuestionTypeClient) Query() *QuestionTypeQuery {
	return &QuestionTypeQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeQuestionType},
		inters: c.Interceptors(),
	}
}

// Get returns a QuestionType entity by its id.
func (c *QuestionTypeClient) Get(ctx context.Context, id int) (*QuestionType, error) {
	return c.Query().Where(questiontype.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *QuestionTypeClient) GetX(ctx context.Context, id int) *QuestionType {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryQuestions queries the questions edge of a QuestionType.
func (c *QuestionTypeClient) QueryQuestions(qt *QuestionType) *QuestionQuery {
	query := (&QuestionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := qt.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(questiontype.Table, questiontype.FieldID, id),
			sqlgraph.To(question.Table, question.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, questiontype.QuestionsTable, questiontype.QuestionsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(qt.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *QuestionTypeClient) Hooks() []Hook {
	return c.hooks.QuestionType
}

// Interceptors returns the client interceptors.
func (c *QuestionTypeClient) Interceptors() []Interceptor {
	return c.inters.QuestionType
}

func (c *QuestionTypeClient) mutate(ctx context.Context, m *QuestionTypeMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&QuestionTypeCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&QuestionTypeUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&QuestionTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&QuestionTypeDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("db: unknown QuestionType mutation op: %q", m.Op())
	}
}

// SurveyClient is a client for the Survey schema.
type SurveyClient struct {
	config
}

// NewSurveyClient returns a client for the Survey from the given config.
func NewSurveyClient(c config) *SurveyClient {
	return &SurveyClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `survey.Hooks(f(g(h())))`.
func (c *SurveyClient) Use(hooks ...Hook) {
	c.hooks.Survey = append(c.hooks.Survey, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `survey.Intercept(f(g(h())))`.
func (c *SurveyClient) Intercept(interceptors ...Interceptor) {
	c.inters.Survey = append(c.inters.Survey, interceptors...)
}

// Create returns a builder for creating a Survey entity.
func (c *SurveyClient) Create() *SurveyCreate {
	mutation := newSurveyMutation(c.config, OpCreate)
	return &SurveyCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Survey entities.
func (c *SurveyClient) CreateBulk(builders ...*SurveyCreate) *SurveyCreateBulk {
	return &SurveyCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *SurveyClient) MapCreateBulk(slice any, setFunc func(*SurveyCreate, int)) *SurveyCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &SurveyCreateBulk{err: fmt.Errorf("calling to SurveyClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*SurveyCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &SurveyCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Survey.
func (c *SurveyClient) Update() *SurveyUpdate {
	mutation := newSurveyMutation(c.config, OpUpdate)
	return &SurveyUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SurveyClient) UpdateOne(s *Survey) *SurveyUpdateOne {
	mutation := newSurveyMutation(c.config, OpUpdateOne, withSurvey(s))
	return &SurveyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SurveyClient) UpdateOneID(id uuid.UUID) *SurveyUpdateOne {
	mutation := newSurveyMutation(c.config, OpUpdateOne, withSurveyID(id))
	return &SurveyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Survey.
func (c *SurveyClient) Delete() *SurveyDelete {
	mutation := newSurveyMutation(c.config, OpDelete)
	return &SurveyDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *SurveyClient) DeleteOne(s *Survey) *SurveyDeleteOne {
	return c.DeleteOneID(s.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *SurveyClient) DeleteOneID(id uuid.UUID) *SurveyDeleteOne {
	builder := c.Delete().Where(survey.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SurveyDeleteOne{builder}
}

// Query returns a query builder for Survey.
func (c *SurveyClient) Query() *SurveyQuery {
	return &SurveyQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeSurvey},
		inters: c.Interceptors(),
	}
}

// Get returns a Survey entity by its id.
func (c *SurveyClient) Get(ctx context.Context, id uuid.UUID) (*Survey, error) {
	return c.Query().Where(survey.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SurveyClient) GetX(ctx context.Context, id uuid.UUID) *Survey {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QuerySurveyQuestionAnswers queries the survey_question_answers edge of a Survey.
func (c *SurveyClient) QuerySurveyQuestionAnswers(s *Survey) *SurveyQuestionAnswersQuery {
	query := (&SurveyQuestionAnswersClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(survey.Table, survey.FieldID, id),
			sqlgraph.To(surveyquestionanswers.Table, surveyquestionanswers.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, survey.SurveyQuestionAnswersTable, survey.SurveyQuestionAnswersColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySurveyInvitations queries the survey_invitations edge of a Survey.
func (c *SurveyClient) QuerySurveyInvitations(s *Survey) *SurveyInvitationQuery {
	query := (&SurveyInvitationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(survey.Table, survey.FieldID, id),
			sqlgraph.To(surveyinvitation.Table, surveyinvitation.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, survey.SurveyInvitationsTable, survey.SurveyInvitationsColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *SurveyClient) Hooks() []Hook {
	hooks := c.hooks.Survey
	return append(hooks[:len(hooks):len(hooks)], survey.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *SurveyClient) Interceptors() []Interceptor {
	return c.inters.Survey
}

func (c *SurveyClient) mutate(ctx context.Context, m *SurveyMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&SurveyCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&SurveyUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&SurveyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&SurveyDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("db: unknown Survey mutation op: %q", m.Op())
	}
}

// SurveyInvitationClient is a client for the SurveyInvitation schema.
type SurveyInvitationClient struct {
	config
}

// NewSurveyInvitationClient returns a client for the SurveyInvitation from the given config.
func NewSurveyInvitationClient(c config) *SurveyInvitationClient {
	return &SurveyInvitationClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `surveyinvitation.Hooks(f(g(h())))`.
func (c *SurveyInvitationClient) Use(hooks ...Hook) {
	c.hooks.SurveyInvitation = append(c.hooks.SurveyInvitation, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `surveyinvitation.Intercept(f(g(h())))`.
func (c *SurveyInvitationClient) Intercept(interceptors ...Interceptor) {
	c.inters.SurveyInvitation = append(c.inters.SurveyInvitation, interceptors...)
}

// Create returns a builder for creating a SurveyInvitation entity.
func (c *SurveyInvitationClient) Create() *SurveyInvitationCreate {
	mutation := newSurveyInvitationMutation(c.config, OpCreate)
	return &SurveyInvitationCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of SurveyInvitation entities.
func (c *SurveyInvitationClient) CreateBulk(builders ...*SurveyInvitationCreate) *SurveyInvitationCreateBulk {
	return &SurveyInvitationCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *SurveyInvitationClient) MapCreateBulk(slice any, setFunc func(*SurveyInvitationCreate, int)) *SurveyInvitationCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &SurveyInvitationCreateBulk{err: fmt.Errorf("calling to SurveyInvitationClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*SurveyInvitationCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &SurveyInvitationCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for SurveyInvitation.
func (c *SurveyInvitationClient) Update() *SurveyInvitationUpdate {
	mutation := newSurveyInvitationMutation(c.config, OpUpdate)
	return &SurveyInvitationUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SurveyInvitationClient) UpdateOne(si *SurveyInvitation) *SurveyInvitationUpdateOne {
	mutation := newSurveyInvitationMutation(c.config, OpUpdateOne, withSurveyInvitation(si))
	return &SurveyInvitationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SurveyInvitationClient) UpdateOneID(id int) *SurveyInvitationUpdateOne {
	mutation := newSurveyInvitationMutation(c.config, OpUpdateOne, withSurveyInvitationID(id))
	return &SurveyInvitationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for SurveyInvitation.
func (c *SurveyInvitationClient) Delete() *SurveyInvitationDelete {
	mutation := newSurveyInvitationMutation(c.config, OpDelete)
	return &SurveyInvitationDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *SurveyInvitationClient) DeleteOne(si *SurveyInvitation) *SurveyInvitationDeleteOne {
	return c.DeleteOneID(si.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *SurveyInvitationClient) DeleteOneID(id int) *SurveyInvitationDeleteOne {
	builder := c.Delete().Where(surveyinvitation.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SurveyInvitationDeleteOne{builder}
}

// Query returns a query builder for SurveyInvitation.
func (c *SurveyInvitationClient) Query() *SurveyInvitationQuery {
	return &SurveyInvitationQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeSurveyInvitation},
		inters: c.Interceptors(),
	}
}

// Get returns a SurveyInvitation entity by its id.
func (c *SurveyInvitationClient) Get(ctx context.Context, id int) (*SurveyInvitation, error) {
	return c.Query().Where(surveyinvitation.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SurveyInvitationClient) GetX(ctx context.Context, id int) *SurveyInvitation {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryCustomer queries the customer edge of a SurveyInvitation.
func (c *SurveyInvitationClient) QueryCustomer(si *SurveyInvitation) *CustomerQuery {
	query := (&CustomerClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := si.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(surveyinvitation.Table, surveyinvitation.FieldID, id),
			sqlgraph.To(customer.Table, customer.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, surveyinvitation.CustomerTable, surveyinvitation.CustomerColumn),
		)
		fromV = sqlgraph.Neighbors(si.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryProject queries the project edge of a SurveyInvitation.
func (c *SurveyInvitationClient) QueryProject(si *SurveyInvitation) *ProjectQuery {
	query := (&ProjectClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := si.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(surveyinvitation.Table, surveyinvitation.FieldID, id),
			sqlgraph.To(project.Table, project.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, surveyinvitation.ProjectTable, surveyinvitation.ProjectColumn),
		)
		fromV = sqlgraph.Neighbors(si.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySurvey queries the survey edge of a SurveyInvitation.
func (c *SurveyInvitationClient) QuerySurvey(si *SurveyInvitation) *SurveyQuery {
	query := (&SurveyClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := si.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(surveyinvitation.Table, surveyinvitation.FieldID, id),
			sqlgraph.To(survey.Table, survey.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, surveyinvitation.SurveyTable, surveyinvitation.SurveyColumn),
		)
		fromV = sqlgraph.Neighbors(si.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *SurveyInvitationClient) Hooks() []Hook {
	return c.hooks.SurveyInvitation
}

// Interceptors returns the client interceptors.
func (c *SurveyInvitationClient) Interceptors() []Interceptor {
	return c.inters.SurveyInvitation
}

func (c *SurveyInvitationClient) mutate(ctx context.Context, m *SurveyInvitationMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&SurveyInvitationCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&SurveyInvitationUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&SurveyInvitationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&SurveyInvitationDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("db: unknown SurveyInvitation mutation op: %q", m.Op())
	}
}

// SurveyQuestionAnswersClient is a client for the SurveyQuestionAnswers schema.
type SurveyQuestionAnswersClient struct {
	config
}

// NewSurveyQuestionAnswersClient returns a client for the SurveyQuestionAnswers from the given config.
func NewSurveyQuestionAnswersClient(c config) *SurveyQuestionAnswersClient {
	return &SurveyQuestionAnswersClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `surveyquestionanswers.Hooks(f(g(h())))`.
func (c *SurveyQuestionAnswersClient) Use(hooks ...Hook) {
	c.hooks.SurveyQuestionAnswers = append(c.hooks.SurveyQuestionAnswers, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `surveyquestionanswers.Intercept(f(g(h())))`.
func (c *SurveyQuestionAnswersClient) Intercept(interceptors ...Interceptor) {
	c.inters.SurveyQuestionAnswers = append(c.inters.SurveyQuestionAnswers, interceptors...)
}

// Create returns a builder for creating a SurveyQuestionAnswers entity.
func (c *SurveyQuestionAnswersClient) Create() *SurveyQuestionAnswersCreate {
	mutation := newSurveyQuestionAnswersMutation(c.config, OpCreate)
	return &SurveyQuestionAnswersCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of SurveyQuestionAnswers entities.
func (c *SurveyQuestionAnswersClient) CreateBulk(builders ...*SurveyQuestionAnswersCreate) *SurveyQuestionAnswersCreateBulk {
	return &SurveyQuestionAnswersCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *SurveyQuestionAnswersClient) MapCreateBulk(slice any, setFunc func(*SurveyQuestionAnswersCreate, int)) *SurveyQuestionAnswersCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &SurveyQuestionAnswersCreateBulk{err: fmt.Errorf("calling to SurveyQuestionAnswersClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*SurveyQuestionAnswersCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &SurveyQuestionAnswersCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for SurveyQuestionAnswers.
func (c *SurveyQuestionAnswersClient) Update() *SurveyQuestionAnswersUpdate {
	mutation := newSurveyQuestionAnswersMutation(c.config, OpUpdate)
	return &SurveyQuestionAnswersUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SurveyQuestionAnswersClient) UpdateOne(sqa *SurveyQuestionAnswers) *SurveyQuestionAnswersUpdateOne {
	mutation := newSurveyQuestionAnswersMutation(c.config, OpUpdateOne, withSurveyQuestionAnswers(sqa))
	return &SurveyQuestionAnswersUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SurveyQuestionAnswersClient) UpdateOneID(id int) *SurveyQuestionAnswersUpdateOne {
	mutation := newSurveyQuestionAnswersMutation(c.config, OpUpdateOne, withSurveyQuestionAnswersID(id))
	return &SurveyQuestionAnswersUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for SurveyQuestionAnswers.
func (c *SurveyQuestionAnswersClient) Delete() *SurveyQuestionAnswersDelete {
	mutation := newSurveyQuestionAnswersMutation(c.config, OpDelete)
	return &SurveyQuestionAnswersDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *SurveyQuestionAnswersClient) DeleteOne(sqa *SurveyQuestionAnswers) *SurveyQuestionAnswersDeleteOne {
	return c.DeleteOneID(sqa.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *SurveyQuestionAnswersClient) DeleteOneID(id int) *SurveyQuestionAnswersDeleteOne {
	builder := c.Delete().Where(surveyquestionanswers.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SurveyQuestionAnswersDeleteOne{builder}
}

// Query returns a query builder for SurveyQuestionAnswers.
func (c *SurveyQuestionAnswersClient) Query() *SurveyQuestionAnswersQuery {
	return &SurveyQuestionAnswersQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeSurveyQuestionAnswers},
		inters: c.Interceptors(),
	}
}

// Get returns a SurveyQuestionAnswers entity by its id.
func (c *SurveyQuestionAnswersClient) Get(ctx context.Context, id int) (*SurveyQuestionAnswers, error) {
	return c.Query().Where(surveyquestionanswers.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SurveyQuestionAnswersClient) GetX(ctx context.Context, id int) *SurveyQuestionAnswers {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QuerySurvey queries the survey edge of a SurveyQuestionAnswers.
func (c *SurveyQuestionAnswersClient) QuerySurvey(sqa *SurveyQuestionAnswers) *SurveyQuery {
	query := (&SurveyClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := sqa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(surveyquestionanswers.Table, surveyquestionanswers.FieldID, id),
			sqlgraph.To(survey.Table, survey.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, surveyquestionanswers.SurveyTable, surveyquestionanswers.SurveyColumn),
		)
		fromV = sqlgraph.Neighbors(sqa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryQuestion queries the question edge of a SurveyQuestionAnswers.
func (c *SurveyQuestionAnswersClient) QueryQuestion(sqa *SurveyQuestionAnswers) *QuestionQuery {
	query := (&QuestionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := sqa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(surveyquestionanswers.Table, surveyquestionanswers.FieldID, id),
			sqlgraph.To(question.Table, question.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, surveyquestionanswers.QuestionTable, surveyquestionanswers.QuestionColumn),
		)
		fromV = sqlgraph.Neighbors(sqa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAnswer queries the answer edge of a SurveyQuestionAnswers.
func (c *SurveyQuestionAnswersClient) QueryAnswer(sqa *SurveyQuestionAnswers) *AnswerQuery {
	query := (&AnswerClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := sqa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(surveyquestionanswers.Table, surveyquestionanswers.FieldID, id),
			sqlgraph.To(answer.Table, answer.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, surveyquestionanswers.AnswerTable, surveyquestionanswers.AnswerColumn),
		)
		fromV = sqlgraph.Neighbors(sqa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *SurveyQuestionAnswersClient) Hooks() []Hook {
	return c.hooks.SurveyQuestionAnswers
}

// Interceptors returns the client interceptors.
func (c *SurveyQuestionAnswersClient) Interceptors() []Interceptor {
	return c.inters.SurveyQuestionAnswers
}

func (c *SurveyQuestionAnswersClient) mutate(ctx context.Context, m *SurveyQuestionAnswersMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&SurveyQuestionAnswersCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&SurveyQuestionAnswersUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&SurveyQuestionAnswersUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&SurveyQuestionAnswersDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("db: unknown SurveyQuestionAnswers mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		Answer, Choice, Customer, Project, Question, QuestionType, Survey,
		SurveyInvitation, SurveyQuestionAnswers []ent.Hook
	}
	inters struct {
		Answer, Choice, Customer, Project, Question, QuestionType, Survey,
		SurveyInvitation, SurveyQuestionAnswers []ent.Interceptor
	}
)
