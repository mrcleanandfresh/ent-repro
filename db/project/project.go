// Code generated by ent, DO NOT EDIT.

package project

import (
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the project type in the database.
	Label = "project"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "oid"
	// FieldProspectiveID holds the string denoting the prospective_id field in the database.
	FieldProspectiveID = "prospective_id"
	// FieldExistingID holds the string denoting the existing_id field in the database.
	FieldExistingID = "existing_id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldEstBudget holds the string denoting the est_budget field in the database.
	FieldEstBudget = "est_budget"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeCustomer holds the string denoting the customer edge name in mutations.
	EdgeCustomer = "customer"
	// EdgeSurveyInvitations holds the string denoting the survey_invitations edge name in mutations.
	EdgeSurveyInvitations = "survey_invitations"
	// SurveyInvitationFieldID holds the string denoting the ID field of the SurveyInvitation.
	SurveyInvitationFieldID = "id"
	// Table holds the table name of the project in the database.
	Table = "projects"
	// CustomerTable is the table that holds the customer relation/edge.
	CustomerTable = "projects"
	// CustomerInverseTable is the table name for the Customer entity.
	// It exists in this package in order to avoid circular dependency with the "customer" package.
	CustomerInverseTable = "customers"
	// CustomerColumn is the table column denoting the customer relation/edge.
	CustomerColumn = "customer_projects"
	// SurveyInvitationsTable is the table that holds the survey_invitations relation/edge.
	SurveyInvitationsTable = "survey_invitations"
	// SurveyInvitationsInverseTable is the table name for the SurveyInvitation entity.
	// It exists in this package in order to avoid circular dependency with the "surveyinvitation" package.
	SurveyInvitationsInverseTable = "survey_invitations"
	// SurveyInvitationsColumn is the table column denoting the survey_invitations relation/edge.
	SurveyInvitationsColumn = "project_survey_invitations"
)

// Columns holds all SQL columns for project fields.
var Columns = []string{
	FieldID,
	FieldProspectiveID,
	FieldExistingID,
	FieldName,
	FieldDescription,
	FieldEstBudget,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "projects"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"customer_projects",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "test/db/runtime"
var (
	Hooks [1]ent.Hook
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// DescriptionValidator is a validator for the "description" field. It is called by the builders before save.
	DescriptionValidator func(string) error
	// EstBudgetValidator is a validator for the "est_budget" field. It is called by the builders before save.
	EstBudgetValidator func(float64) error
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the Project queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByProspectiveID orders the results by the prospective_id field.
func ByProspectiveID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProspectiveID, opts...).ToFunc()
}

// ByExistingID orders the results by the existing_id field.
func ByExistingID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExistingID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByEstBudget orders the results by the est_budget field.
func ByEstBudget(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEstBudget, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByCustomerField orders the results by customer field.
func ByCustomerField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCustomerStep(), sql.OrderByField(field, opts...))
	}
}

// BySurveyInvitationsCount orders the results by survey_invitations count.
func BySurveyInvitationsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newSurveyInvitationsStep(), opts...)
	}
}

// BySurveyInvitations orders the results by survey_invitations terms.
func BySurveyInvitations(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSurveyInvitationsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newCustomerStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CustomerInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, CustomerTable, CustomerColumn),
	)
}
func newSurveyInvitationsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SurveyInvitationsInverseTable, SurveyInvitationFieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, SurveyInvitationsTable, SurveyInvitationsColumn),
	)
}
