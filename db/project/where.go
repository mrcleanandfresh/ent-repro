// Code generated by ent, DO NOT EDIT.

package project

import (
	"test/db/predicate"
	"test/db/schema/schematype"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Project {
	return predicate.Project(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Project {
	return predicate.Project(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Project {
	return predicate.Project(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Project {
	return predicate.Project(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Project {
	return predicate.Project(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Project {
	return predicate.Project(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Project {
	return predicate.Project(sql.FieldLTE(FieldID, id))
}

// ProspectiveID applies equality check predicate on the "prospective_id" field. It's identical to ProspectiveIDEQ.
func ProspectiveID(v string) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldProspectiveID, v))
}

// ExistingID applies equality check predicate on the "existing_id" field. It's identical to ExistingIDEQ.
func ExistingID(v string) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldExistingID, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldName, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldDescription, v))
}

// EstBudget applies equality check predicate on the "est_budget" field. It's identical to EstBudgetEQ.
func EstBudget(v schematype.Amount) predicate.Project {
	vc := float64(v)
	return predicate.Project(sql.FieldEQ(FieldEstBudget, vc))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldUpdatedAt, v))
}

// ProspectiveIDEQ applies the EQ predicate on the "prospective_id" field.
func ProspectiveIDEQ(v string) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldProspectiveID, v))
}

// ProspectiveIDNEQ applies the NEQ predicate on the "prospective_id" field.
func ProspectiveIDNEQ(v string) predicate.Project {
	return predicate.Project(sql.FieldNEQ(FieldProspectiveID, v))
}

// ProspectiveIDIn applies the In predicate on the "prospective_id" field.
func ProspectiveIDIn(vs ...string) predicate.Project {
	return predicate.Project(sql.FieldIn(FieldProspectiveID, vs...))
}

// ProspectiveIDNotIn applies the NotIn predicate on the "prospective_id" field.
func ProspectiveIDNotIn(vs ...string) predicate.Project {
	return predicate.Project(sql.FieldNotIn(FieldProspectiveID, vs...))
}

// ProspectiveIDGT applies the GT predicate on the "prospective_id" field.
func ProspectiveIDGT(v string) predicate.Project {
	return predicate.Project(sql.FieldGT(FieldProspectiveID, v))
}

// ProspectiveIDGTE applies the GTE predicate on the "prospective_id" field.
func ProspectiveIDGTE(v string) predicate.Project {
	return predicate.Project(sql.FieldGTE(FieldProspectiveID, v))
}

// ProspectiveIDLT applies the LT predicate on the "prospective_id" field.
func ProspectiveIDLT(v string) predicate.Project {
	return predicate.Project(sql.FieldLT(FieldProspectiveID, v))
}

// ProspectiveIDLTE applies the LTE predicate on the "prospective_id" field.
func ProspectiveIDLTE(v string) predicate.Project {
	return predicate.Project(sql.FieldLTE(FieldProspectiveID, v))
}

// ProspectiveIDContains applies the Contains predicate on the "prospective_id" field.
func ProspectiveIDContains(v string) predicate.Project {
	return predicate.Project(sql.FieldContains(FieldProspectiveID, v))
}

// ProspectiveIDHasPrefix applies the HasPrefix predicate on the "prospective_id" field.
func ProspectiveIDHasPrefix(v string) predicate.Project {
	return predicate.Project(sql.FieldHasPrefix(FieldProspectiveID, v))
}

// ProspectiveIDHasSuffix applies the HasSuffix predicate on the "prospective_id" field.
func ProspectiveIDHasSuffix(v string) predicate.Project {
	return predicate.Project(sql.FieldHasSuffix(FieldProspectiveID, v))
}

// ProspectiveIDEqualFold applies the EqualFold predicate on the "prospective_id" field.
func ProspectiveIDEqualFold(v string) predicate.Project {
	return predicate.Project(sql.FieldEqualFold(FieldProspectiveID, v))
}

// ProspectiveIDContainsFold applies the ContainsFold predicate on the "prospective_id" field.
func ProspectiveIDContainsFold(v string) predicate.Project {
	return predicate.Project(sql.FieldContainsFold(FieldProspectiveID, v))
}

// ExistingIDEQ applies the EQ predicate on the "existing_id" field.
func ExistingIDEQ(v string) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldExistingID, v))
}

// ExistingIDNEQ applies the NEQ predicate on the "existing_id" field.
func ExistingIDNEQ(v string) predicate.Project {
	return predicate.Project(sql.FieldNEQ(FieldExistingID, v))
}

// ExistingIDIn applies the In predicate on the "existing_id" field.
func ExistingIDIn(vs ...string) predicate.Project {
	return predicate.Project(sql.FieldIn(FieldExistingID, vs...))
}

// ExistingIDNotIn applies the NotIn predicate on the "existing_id" field.
func ExistingIDNotIn(vs ...string) predicate.Project {
	return predicate.Project(sql.FieldNotIn(FieldExistingID, vs...))
}

// ExistingIDGT applies the GT predicate on the "existing_id" field.
func ExistingIDGT(v string) predicate.Project {
	return predicate.Project(sql.FieldGT(FieldExistingID, v))
}

// ExistingIDGTE applies the GTE predicate on the "existing_id" field.
func ExistingIDGTE(v string) predicate.Project {
	return predicate.Project(sql.FieldGTE(FieldExistingID, v))
}

// ExistingIDLT applies the LT predicate on the "existing_id" field.
func ExistingIDLT(v string) predicate.Project {
	return predicate.Project(sql.FieldLT(FieldExistingID, v))
}

// ExistingIDLTE applies the LTE predicate on the "existing_id" field.
func ExistingIDLTE(v string) predicate.Project {
	return predicate.Project(sql.FieldLTE(FieldExistingID, v))
}

// ExistingIDContains applies the Contains predicate on the "existing_id" field.
func ExistingIDContains(v string) predicate.Project {
	return predicate.Project(sql.FieldContains(FieldExistingID, v))
}

// ExistingIDHasPrefix applies the HasPrefix predicate on the "existing_id" field.
func ExistingIDHasPrefix(v string) predicate.Project {
	return predicate.Project(sql.FieldHasPrefix(FieldExistingID, v))
}

// ExistingIDHasSuffix applies the HasSuffix predicate on the "existing_id" field.
func ExistingIDHasSuffix(v string) predicate.Project {
	return predicate.Project(sql.FieldHasSuffix(FieldExistingID, v))
}

// ExistingIDIsNil applies the IsNil predicate on the "existing_id" field.
func ExistingIDIsNil() predicate.Project {
	return predicate.Project(sql.FieldIsNull(FieldExistingID))
}

// ExistingIDNotNil applies the NotNil predicate on the "existing_id" field.
func ExistingIDNotNil() predicate.Project {
	return predicate.Project(sql.FieldNotNull(FieldExistingID))
}

// ExistingIDEqualFold applies the EqualFold predicate on the "existing_id" field.
func ExistingIDEqualFold(v string) predicate.Project {
	return predicate.Project(sql.FieldEqualFold(FieldExistingID, v))
}

// ExistingIDContainsFold applies the ContainsFold predicate on the "existing_id" field.
func ExistingIDContainsFold(v string) predicate.Project {
	return predicate.Project(sql.FieldContainsFold(FieldExistingID, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Project {
	return predicate.Project(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Project {
	return predicate.Project(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Project {
	return predicate.Project(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Project {
	return predicate.Project(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Project {
	return predicate.Project(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Project {
	return predicate.Project(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Project {
	return predicate.Project(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Project {
	return predicate.Project(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Project {
	return predicate.Project(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Project {
	return predicate.Project(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Project {
	return predicate.Project(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Project {
	return predicate.Project(sql.FieldContainsFold(FieldName, v))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.Project {
	return predicate.Project(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.Project {
	return predicate.Project(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.Project {
	return predicate.Project(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.Project {
	return predicate.Project(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.Project {
	return predicate.Project(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.Project {
	return predicate.Project(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.Project {
	return predicate.Project(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.Project {
	return predicate.Project(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.Project {
	return predicate.Project(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.Project {
	return predicate.Project(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.Project {
	return predicate.Project(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.Project {
	return predicate.Project(sql.FieldContainsFold(FieldDescription, v))
}

// EstBudgetEQ applies the EQ predicate on the "est_budget" field.
func EstBudgetEQ(v schematype.Amount) predicate.Project {
	vc := float64(v)
	return predicate.Project(sql.FieldEQ(FieldEstBudget, vc))
}

// EstBudgetNEQ applies the NEQ predicate on the "est_budget" field.
func EstBudgetNEQ(v schematype.Amount) predicate.Project {
	vc := float64(v)
	return predicate.Project(sql.FieldNEQ(FieldEstBudget, vc))
}

// EstBudgetIn applies the In predicate on the "est_budget" field.
func EstBudgetIn(vs ...schematype.Amount) predicate.Project {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = float64(vs[i])
	}
	return predicate.Project(sql.FieldIn(FieldEstBudget, v...))
}

// EstBudgetNotIn applies the NotIn predicate on the "est_budget" field.
func EstBudgetNotIn(vs ...schematype.Amount) predicate.Project {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = float64(vs[i])
	}
	return predicate.Project(sql.FieldNotIn(FieldEstBudget, v...))
}

// EstBudgetGT applies the GT predicate on the "est_budget" field.
func EstBudgetGT(v schematype.Amount) predicate.Project {
	vc := float64(v)
	return predicate.Project(sql.FieldGT(FieldEstBudget, vc))
}

// EstBudgetGTE applies the GTE predicate on the "est_budget" field.
func EstBudgetGTE(v schematype.Amount) predicate.Project {
	vc := float64(v)
	return predicate.Project(sql.FieldGTE(FieldEstBudget, vc))
}

// EstBudgetLT applies the LT predicate on the "est_budget" field.
func EstBudgetLT(v schematype.Amount) predicate.Project {
	vc := float64(v)
	return predicate.Project(sql.FieldLT(FieldEstBudget, vc))
}

// EstBudgetLTE applies the LTE predicate on the "est_budget" field.
func EstBudgetLTE(v schematype.Amount) predicate.Project {
	vc := float64(v)
	return predicate.Project(sql.FieldLTE(FieldEstBudget, vc))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Project {
	return predicate.Project(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Project {
	return predicate.Project(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Project {
	return predicate.Project(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Project {
	return predicate.Project(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Project {
	return predicate.Project(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Project {
	return predicate.Project(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Project {
	return predicate.Project(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Project {
	return predicate.Project(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Project {
	return predicate.Project(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Project {
	return predicate.Project(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Project {
	return predicate.Project(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Project {
	return predicate.Project(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Project {
	return predicate.Project(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Project {
	return predicate.Project(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasCustomer applies the HasEdge predicate on the "customer" edge.
func HasCustomer() predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, CustomerTable, CustomerColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCustomerWith applies the HasEdge predicate on the "customer" edge with a given conditions (other predicates).
func HasCustomerWith(preds ...predicate.Customer) predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		step := newCustomerStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasSurveyInvitations applies the HasEdge predicate on the "survey_invitations" edge.
func HasSurveyInvitations() predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, SurveyInvitationsTable, SurveyInvitationsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSurveyInvitationsWith applies the HasEdge predicate on the "survey_invitations" edge with a given conditions (other predicates).
func HasSurveyInvitationsWith(preds ...predicate.SurveyInvitation) predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		step := newSurveyInvitationsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Project) predicate.Project {
	return predicate.Project(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Project) predicate.Project {
	return predicate.Project(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Project) predicate.Project {
	return predicate.Project(sql.NotPredicates(p))
}
