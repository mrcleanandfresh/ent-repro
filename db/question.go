// Code generated by ent, DO NOT EDIT.

package db

import (
	"encoding/json"
	"fmt"
	"strings"
	"test/db/question"
	"test/db/schema/schematype"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// Question is the model entity for the Question schema.
type Question struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Text holds the value of the "text" field.
	Text string `json:"text,omitempty"`
	// SubText holds the value of the "sub_text" field.
	SubText *string `json:"sub_text,omitempty"`
	// Weight holds the value of the "weight" field.
	Weight *int `json:"weight,omitempty"`
	// Required holds the value of the "required" field.
	Required *bool `json:"required,omitempty"`
	// Meta holds the value of the "meta" field.
	Meta *schematype.Metadata `json:"meta,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the QuestionQuery when eager-loading is set.
	Edges        QuestionEdges `json:"edges"`
	selectValues sql.SelectValues
}

// QuestionEdges holds the relations/edges for other nodes in the graph.
type QuestionEdges struct {
	// SurveyQuestionAnswers holds the value of the survey_question_answers edge.
	SurveyQuestionAnswers []*SurveyQuestionAnswers `json:"survey_question_answers,omitempty"`
	// QuestionType holds the value of the questionType edge.
	QuestionType []*QuestionType `json:"questionType,omitempty"`
	// Choices holds the value of the choices edge.
	Choices []*Choice `json:"choices,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// SurveyQuestionAnswersOrErr returns the SurveyQuestionAnswers value or an error if the edge
// was not loaded in eager-loading.
func (e QuestionEdges) SurveyQuestionAnswersOrErr() ([]*SurveyQuestionAnswers, error) {
	if e.loadedTypes[0] {
		return e.SurveyQuestionAnswers, nil
	}
	return nil, &NotLoadedError{edge: "survey_question_answers"}
}

// QuestionTypeOrErr returns the QuestionType value or an error if the edge
// was not loaded in eager-loading.
func (e QuestionEdges) QuestionTypeOrErr() ([]*QuestionType, error) {
	if e.loadedTypes[1] {
		return e.QuestionType, nil
	}
	return nil, &NotLoadedError{edge: "questionType"}
}

// ChoicesOrErr returns the Choices value or an error if the edge
// was not loaded in eager-loading.
func (e QuestionEdges) ChoicesOrErr() ([]*Choice, error) {
	if e.loadedTypes[2] {
		return e.Choices, nil
	}
	return nil, &NotLoadedError{edge: "choices"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Question) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case question.FieldMeta:
			values[i] = new([]byte)
		case question.FieldRequired:
			values[i] = new(sql.NullBool)
		case question.FieldWeight:
			values[i] = new(sql.NullInt64)
		case question.FieldText, question.FieldSubText:
			values[i] = new(sql.NullString)
		case question.FieldCreatedAt, question.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case question.FieldID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Question fields.
func (q *Question) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case question.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				q.ID = *value
			}
		case question.FieldText:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field text", values[i])
			} else if value.Valid {
				q.Text = value.String
			}
		case question.FieldSubText:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field sub_text", values[i])
			} else if value.Valid {
				q.SubText = new(string)
				*q.SubText = value.String
			}
		case question.FieldWeight:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field weight", values[i])
			} else if value.Valid {
				q.Weight = new(int)
				*q.Weight = int(value.Int64)
			}
		case question.FieldRequired:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field required", values[i])
			} else if value.Valid {
				q.Required = new(bool)
				*q.Required = value.Bool
			}
		case question.FieldMeta:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field meta", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &q.Meta); err != nil {
					return fmt.Errorf("unmarshal field meta: %w", err)
				}
			}
		case question.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				q.CreatedAt = value.Time
			}
		case question.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				q.UpdatedAt = value.Time
			}
		default:
			q.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Question.
// This includes values selected through modifiers, order, etc.
func (q *Question) Value(name string) (ent.Value, error) {
	return q.selectValues.Get(name)
}

// QuerySurveyQuestionAnswers queries the "survey_question_answers" edge of the Question entity.
func (q *Question) QuerySurveyQuestionAnswers() *SurveyQuestionAnswersQuery {
	return NewQuestionClient(q.config).QuerySurveyQuestionAnswers(q)
}

// QueryQuestionType queries the "questionType" edge of the Question entity.
func (q *Question) QueryQuestionType() *QuestionTypeQuery {
	return NewQuestionClient(q.config).QueryQuestionType(q)
}

// QueryChoices queries the "choices" edge of the Question entity.
func (q *Question) QueryChoices() *ChoiceQuery {
	return NewQuestionClient(q.config).QueryChoices(q)
}

// Update returns a builder for updating this Question.
// Note that you need to call Question.Unwrap() before calling this method if this Question
// was returned from a transaction, and the transaction was committed or rolled back.
func (q *Question) Update() *QuestionUpdateOne {
	return NewQuestionClient(q.config).UpdateOne(q)
}

// Unwrap unwraps the Question entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (q *Question) Unwrap() *Question {
	_tx, ok := q.config.driver.(*txDriver)
	if !ok {
		panic("db: Question is not a transactional entity")
	}
	q.config.driver = _tx.drv
	return q
}

// String implements the fmt.Stringer.
func (q *Question) String() string {
	var builder strings.Builder
	builder.WriteString("Question(")
	builder.WriteString(fmt.Sprintf("id=%v, ", q.ID))
	builder.WriteString("text=")
	builder.WriteString(q.Text)
	builder.WriteString(", ")
	if v := q.SubText; v != nil {
		builder.WriteString("sub_text=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := q.Weight; v != nil {
		builder.WriteString("weight=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := q.Required; v != nil {
		builder.WriteString("required=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	builder.WriteString("meta=")
	builder.WriteString(fmt.Sprintf("%v", q.Meta))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(q.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(q.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Questions is a parsable slice of Question.
type Questions []*Question
