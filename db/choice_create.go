// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"test/db/answer"
	"test/db/choice"
	"test/db/question"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// ChoiceCreate is the builder for creating a Choice entity.
type ChoiceCreate struct {
	config
	mutation *ChoiceMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetLabel sets the "label" field.
func (cc *ChoiceCreate) SetLabel(s string) *ChoiceCreate {
	cc.mutation.SetLabel(s)
	return cc
}

// SetNillableLabel sets the "label" field if the given value is not nil.
func (cc *ChoiceCreate) SetNillableLabel(s *string) *ChoiceCreate {
	if s != nil {
		cc.SetLabel(*s)
	}
	return cc
}

// SetValue sets the "value" field.
func (cc *ChoiceCreate) SetValue(s string) *ChoiceCreate {
	cc.mutation.SetValue(s)
	return cc
}

// SetAnswerID sets the "answer" edge to the Answer entity by ID.
func (cc *ChoiceCreate) SetAnswerID(id uuid.UUID) *ChoiceCreate {
	cc.mutation.SetAnswerID(id)
	return cc
}

// SetNillableAnswerID sets the "answer" edge to the Answer entity by ID if the given value is not nil.
func (cc *ChoiceCreate) SetNillableAnswerID(id *uuid.UUID) *ChoiceCreate {
	if id != nil {
		cc = cc.SetAnswerID(*id)
	}
	return cc
}

// SetAnswer sets the "answer" edge to the Answer entity.
func (cc *ChoiceCreate) SetAnswer(a *Answer) *ChoiceCreate {
	return cc.SetAnswerID(a.ID)
}

// SetQuestionID sets the "question" edge to the Question entity by ID.
func (cc *ChoiceCreate) SetQuestionID(id uuid.UUID) *ChoiceCreate {
	cc.mutation.SetQuestionID(id)
	return cc
}

// SetNillableQuestionID sets the "question" edge to the Question entity by ID if the given value is not nil.
func (cc *ChoiceCreate) SetNillableQuestionID(id *uuid.UUID) *ChoiceCreate {
	if id != nil {
		cc = cc.SetQuestionID(*id)
	}
	return cc
}

// SetQuestion sets the "question" edge to the Question entity.
func (cc *ChoiceCreate) SetQuestion(q *Question) *ChoiceCreate {
	return cc.SetQuestionID(q.ID)
}

// Mutation returns the ChoiceMutation object of the builder.
func (cc *ChoiceCreate) Mutation() *ChoiceMutation {
	return cc.mutation
}

// Save creates the Choice in the database.
func (cc *ChoiceCreate) Save(ctx context.Context) (*Choice, error) {
	return withHooks(ctx, cc.sqlSave, cc.mutation, cc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cc *ChoiceCreate) SaveX(ctx context.Context) *Choice {
	v, err := cc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cc *ChoiceCreate) Exec(ctx context.Context) error {
	_, err := cc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cc *ChoiceCreate) ExecX(ctx context.Context) {
	if err := cc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cc *ChoiceCreate) check() error {
	if _, ok := cc.mutation.Value(); !ok {
		return &ValidationError{Name: "value", err: errors.New(`db: missing required field "Choice.value"`)}
	}
	return nil
}

func (cc *ChoiceCreate) sqlSave(ctx context.Context) (*Choice, error) {
	if err := cc.check(); err != nil {
		return nil, err
	}
	_node, _spec := cc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	cc.mutation.id = &_node.ID
	cc.mutation.done = true
	return _node, nil
}

func (cc *ChoiceCreate) createSpec() (*Choice, *sqlgraph.CreateSpec) {
	var (
		_node = &Choice{config: cc.config}
		_spec = sqlgraph.NewCreateSpec(choice.Table, sqlgraph.NewFieldSpec(choice.FieldID, field.TypeInt))
	)
	_spec.OnConflict = cc.conflict
	if value, ok := cc.mutation.Label(); ok {
		_spec.SetField(choice.FieldLabel, field.TypeString, value)
		_node.Label = &value
	}
	if value, ok := cc.mutation.Value(); ok {
		_spec.SetField(choice.FieldValue, field.TypeString, value)
		_node.Value = value
	}
	if nodes := cc.mutation.AnswerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   choice.AnswerTable,
			Columns: []string{choice.AnswerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(answer.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.answer_choices = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.QuestionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   choice.QuestionTable,
			Columns: []string{choice.QuestionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(question.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.question_choices = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Choice.Create().
//		SetLabel(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ChoiceUpsert) {
//			SetLabel(v+v).
//		}).
//		Exec(ctx)
func (cc *ChoiceCreate) OnConflict(opts ...sql.ConflictOption) *ChoiceUpsertOne {
	cc.conflict = opts
	return &ChoiceUpsertOne{
		create: cc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Choice.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (cc *ChoiceCreate) OnConflictColumns(columns ...string) *ChoiceUpsertOne {
	cc.conflict = append(cc.conflict, sql.ConflictColumns(columns...))
	return &ChoiceUpsertOne{
		create: cc,
	}
}

type (
	// ChoiceUpsertOne is the builder for "upsert"-ing
	//  one Choice node.
	ChoiceUpsertOne struct {
		create *ChoiceCreate
	}

	// ChoiceUpsert is the "OnConflict" setter.
	ChoiceUpsert struct {
		*sql.UpdateSet
	}
)

// SetLabel sets the "label" field.
func (u *ChoiceUpsert) SetLabel(v string) *ChoiceUpsert {
	u.Set(choice.FieldLabel, v)
	return u
}

// UpdateLabel sets the "label" field to the value that was provided on create.
func (u *ChoiceUpsert) UpdateLabel() *ChoiceUpsert {
	u.SetExcluded(choice.FieldLabel)
	return u
}

// ClearLabel clears the value of the "label" field.
func (u *ChoiceUpsert) ClearLabel() *ChoiceUpsert {
	u.SetNull(choice.FieldLabel)
	return u
}

// SetValue sets the "value" field.
func (u *ChoiceUpsert) SetValue(v string) *ChoiceUpsert {
	u.Set(choice.FieldValue, v)
	return u
}

// UpdateValue sets the "value" field to the value that was provided on create.
func (u *ChoiceUpsert) UpdateValue() *ChoiceUpsert {
	u.SetExcluded(choice.FieldValue)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.Choice.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *ChoiceUpsertOne) UpdateNewValues() *ChoiceUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Choice.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *ChoiceUpsertOne) Ignore() *ChoiceUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ChoiceUpsertOne) DoNothing() *ChoiceUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ChoiceCreate.OnConflict
// documentation for more info.
func (u *ChoiceUpsertOne) Update(set func(*ChoiceUpsert)) *ChoiceUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ChoiceUpsert{UpdateSet: update})
	}))
	return u
}

// SetLabel sets the "label" field.
func (u *ChoiceUpsertOne) SetLabel(v string) *ChoiceUpsertOne {
	return u.Update(func(s *ChoiceUpsert) {
		s.SetLabel(v)
	})
}

// UpdateLabel sets the "label" field to the value that was provided on create.
func (u *ChoiceUpsertOne) UpdateLabel() *ChoiceUpsertOne {
	return u.Update(func(s *ChoiceUpsert) {
		s.UpdateLabel()
	})
}

// ClearLabel clears the value of the "label" field.
func (u *ChoiceUpsertOne) ClearLabel() *ChoiceUpsertOne {
	return u.Update(func(s *ChoiceUpsert) {
		s.ClearLabel()
	})
}

// SetValue sets the "value" field.
func (u *ChoiceUpsertOne) SetValue(v string) *ChoiceUpsertOne {
	return u.Update(func(s *ChoiceUpsert) {
		s.SetValue(v)
	})
}

// UpdateValue sets the "value" field to the value that was provided on create.
func (u *ChoiceUpsertOne) UpdateValue() *ChoiceUpsertOne {
	return u.Update(func(s *ChoiceUpsert) {
		s.UpdateValue()
	})
}

// Exec executes the query.
func (u *ChoiceUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("db: missing options for ChoiceCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ChoiceUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *ChoiceUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *ChoiceUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// ChoiceCreateBulk is the builder for creating many Choice entities in bulk.
type ChoiceCreateBulk struct {
	config
	err      error
	builders []*ChoiceCreate
	conflict []sql.ConflictOption
}

// Save creates the Choice entities in the database.
func (ccb *ChoiceCreateBulk) Save(ctx context.Context) ([]*Choice, error) {
	if ccb.err != nil {
		return nil, ccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ccb.builders))
	nodes := make([]*Choice, len(ccb.builders))
	mutators := make([]Mutator, len(ccb.builders))
	for i := range ccb.builders {
		func(i int, root context.Context) {
			builder := ccb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ChoiceMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ccb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ccb *ChoiceCreateBulk) SaveX(ctx context.Context) []*Choice {
	v, err := ccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ccb *ChoiceCreateBulk) Exec(ctx context.Context) error {
	_, err := ccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccb *ChoiceCreateBulk) ExecX(ctx context.Context) {
	if err := ccb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Choice.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ChoiceUpsert) {
//			SetLabel(v+v).
//		}).
//		Exec(ctx)
func (ccb *ChoiceCreateBulk) OnConflict(opts ...sql.ConflictOption) *ChoiceUpsertBulk {
	ccb.conflict = opts
	return &ChoiceUpsertBulk{
		create: ccb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Choice.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ccb *ChoiceCreateBulk) OnConflictColumns(columns ...string) *ChoiceUpsertBulk {
	ccb.conflict = append(ccb.conflict, sql.ConflictColumns(columns...))
	return &ChoiceUpsertBulk{
		create: ccb,
	}
}

// ChoiceUpsertBulk is the builder for "upsert"-ing
// a bulk of Choice nodes.
type ChoiceUpsertBulk struct {
	create *ChoiceCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Choice.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *ChoiceUpsertBulk) UpdateNewValues() *ChoiceUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Choice.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *ChoiceUpsertBulk) Ignore() *ChoiceUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ChoiceUpsertBulk) DoNothing() *ChoiceUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ChoiceCreateBulk.OnConflict
// documentation for more info.
func (u *ChoiceUpsertBulk) Update(set func(*ChoiceUpsert)) *ChoiceUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ChoiceUpsert{UpdateSet: update})
	}))
	return u
}

// SetLabel sets the "label" field.
func (u *ChoiceUpsertBulk) SetLabel(v string) *ChoiceUpsertBulk {
	return u.Update(func(s *ChoiceUpsert) {
		s.SetLabel(v)
	})
}

// UpdateLabel sets the "label" field to the value that was provided on create.
func (u *ChoiceUpsertBulk) UpdateLabel() *ChoiceUpsertBulk {
	return u.Update(func(s *ChoiceUpsert) {
		s.UpdateLabel()
	})
}

// ClearLabel clears the value of the "label" field.
func (u *ChoiceUpsertBulk) ClearLabel() *ChoiceUpsertBulk {
	return u.Update(func(s *ChoiceUpsert) {
		s.ClearLabel()
	})
}

// SetValue sets the "value" field.
func (u *ChoiceUpsertBulk) SetValue(v string) *ChoiceUpsertBulk {
	return u.Update(func(s *ChoiceUpsert) {
		s.SetValue(v)
	})
}

// UpdateValue sets the "value" field to the value that was provided on create.
func (u *ChoiceUpsertBulk) UpdateValue() *ChoiceUpsertBulk {
	return u.Update(func(s *ChoiceUpsert) {
		s.UpdateValue()
	})
}

// Exec executes the query.
func (u *ChoiceUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("db: OnConflict was set for builder %d. Set it on the ChoiceCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("db: missing options for ChoiceCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ChoiceUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
