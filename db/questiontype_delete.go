// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"test/db/predicate"
	"test/db/questiontype"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// QuestionTypeDelete is the builder for deleting a QuestionType entity.
type QuestionTypeDelete struct {
	config
	hooks    []Hook
	mutation *QuestionTypeMutation
}

// Where appends a list predicates to the QuestionTypeDelete builder.
func (qtd *QuestionTypeDelete) Where(ps ...predicate.QuestionType) *QuestionTypeDelete {
	qtd.mutation.Where(ps...)
	return qtd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (qtd *QuestionTypeDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, qtd.sqlExec, qtd.mutation, qtd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (qtd *QuestionTypeDelete) ExecX(ctx context.Context) int {
	n, err := qtd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (qtd *QuestionTypeDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(questiontype.Table, sqlgraph.NewFieldSpec(questiontype.FieldID, field.TypeInt))
	if ps := qtd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, qtd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	qtd.mutation.done = true
	return affected, err
}

// QuestionTypeDeleteOne is the builder for deleting a single QuestionType entity.
type QuestionTypeDeleteOne struct {
	qtd *QuestionTypeDelete
}

// Where appends a list predicates to the QuestionTypeDelete builder.
func (qtdo *QuestionTypeDeleteOne) Where(ps ...predicate.QuestionType) *QuestionTypeDeleteOne {
	qtdo.qtd.mutation.Where(ps...)
	return qtdo
}

// Exec executes the deletion query.
func (qtdo *QuestionTypeDeleteOne) Exec(ctx context.Context) error {
	n, err := qtdo.qtd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{questiontype.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (qtdo *QuestionTypeDeleteOne) ExecX(ctx context.Context) {
	if err := qtdo.Exec(ctx); err != nil {
		panic(err)
	}
}
