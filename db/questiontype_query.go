// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"
	"test/db/predicate"
	"test/db/question"
	"test/db/questiontype"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// QuestionTypeQuery is the builder for querying QuestionType entities.
type QuestionTypeQuery struct {
	config
	ctx           *QueryContext
	order         []questiontype.OrderOption
	inters        []Interceptor
	predicates    []predicate.QuestionType
	withQuestions *QuestionQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the QuestionTypeQuery builder.
func (qtq *QuestionTypeQuery) Where(ps ...predicate.QuestionType) *QuestionTypeQuery {
	qtq.predicates = append(qtq.predicates, ps...)
	return qtq
}

// Limit the number of records to be returned by this query.
func (qtq *QuestionTypeQuery) Limit(limit int) *QuestionTypeQuery {
	qtq.ctx.Limit = &limit
	return qtq
}

// Offset to start from.
func (qtq *QuestionTypeQuery) Offset(offset int) *QuestionTypeQuery {
	qtq.ctx.Offset = &offset
	return qtq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (qtq *QuestionTypeQuery) Unique(unique bool) *QuestionTypeQuery {
	qtq.ctx.Unique = &unique
	return qtq
}

// Order specifies how the records should be ordered.
func (qtq *QuestionTypeQuery) Order(o ...questiontype.OrderOption) *QuestionTypeQuery {
	qtq.order = append(qtq.order, o...)
	return qtq
}

// QueryQuestions chains the current query on the "questions" edge.
func (qtq *QuestionTypeQuery) QueryQuestions() *QuestionQuery {
	query := (&QuestionClient{config: qtq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := qtq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := qtq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(questiontype.Table, questiontype.FieldID, selector),
			sqlgraph.To(question.Table, question.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, questiontype.QuestionsTable, questiontype.QuestionsPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(qtq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first QuestionType entity from the query.
// Returns a *NotFoundError when no QuestionType was found.
func (qtq *QuestionTypeQuery) First(ctx context.Context) (*QuestionType, error) {
	nodes, err := qtq.Limit(1).All(setContextOp(ctx, qtq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{questiontype.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (qtq *QuestionTypeQuery) FirstX(ctx context.Context) *QuestionType {
	node, err := qtq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first QuestionType ID from the query.
// Returns a *NotFoundError when no QuestionType ID was found.
func (qtq *QuestionTypeQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = qtq.Limit(1).IDs(setContextOp(ctx, qtq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{questiontype.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (qtq *QuestionTypeQuery) FirstIDX(ctx context.Context) int {
	id, err := qtq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single QuestionType entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one QuestionType entity is found.
// Returns a *NotFoundError when no QuestionType entities are found.
func (qtq *QuestionTypeQuery) Only(ctx context.Context) (*QuestionType, error) {
	nodes, err := qtq.Limit(2).All(setContextOp(ctx, qtq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{questiontype.Label}
	default:
		return nil, &NotSingularError{questiontype.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (qtq *QuestionTypeQuery) OnlyX(ctx context.Context) *QuestionType {
	node, err := qtq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only QuestionType ID in the query.
// Returns a *NotSingularError when more than one QuestionType ID is found.
// Returns a *NotFoundError when no entities are found.
func (qtq *QuestionTypeQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = qtq.Limit(2).IDs(setContextOp(ctx, qtq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{questiontype.Label}
	default:
		err = &NotSingularError{questiontype.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (qtq *QuestionTypeQuery) OnlyIDX(ctx context.Context) int {
	id, err := qtq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of QuestionTypes.
func (qtq *QuestionTypeQuery) All(ctx context.Context) ([]*QuestionType, error) {
	ctx = setContextOp(ctx, qtq.ctx, "All")
	if err := qtq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*QuestionType, *QuestionTypeQuery]()
	return withInterceptors[[]*QuestionType](ctx, qtq, qr, qtq.inters)
}

// AllX is like All, but panics if an error occurs.
func (qtq *QuestionTypeQuery) AllX(ctx context.Context) []*QuestionType {
	nodes, err := qtq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of QuestionType IDs.
func (qtq *QuestionTypeQuery) IDs(ctx context.Context) (ids []int, err error) {
	if qtq.ctx.Unique == nil && qtq.path != nil {
		qtq.Unique(true)
	}
	ctx = setContextOp(ctx, qtq.ctx, "IDs")
	if err = qtq.Select(questiontype.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (qtq *QuestionTypeQuery) IDsX(ctx context.Context) []int {
	ids, err := qtq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (qtq *QuestionTypeQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, qtq.ctx, "Count")
	if err := qtq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, qtq, querierCount[*QuestionTypeQuery](), qtq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (qtq *QuestionTypeQuery) CountX(ctx context.Context) int {
	count, err := qtq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (qtq *QuestionTypeQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, qtq.ctx, "Exist")
	switch _, err := qtq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("db: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (qtq *QuestionTypeQuery) ExistX(ctx context.Context) bool {
	exist, err := qtq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the QuestionTypeQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (qtq *QuestionTypeQuery) Clone() *QuestionTypeQuery {
	if qtq == nil {
		return nil
	}
	return &QuestionTypeQuery{
		config:        qtq.config,
		ctx:           qtq.ctx.Clone(),
		order:         append([]questiontype.OrderOption{}, qtq.order...),
		inters:        append([]Interceptor{}, qtq.inters...),
		predicates:    append([]predicate.QuestionType{}, qtq.predicates...),
		withQuestions: qtq.withQuestions.Clone(),
		// clone intermediate query.
		sql:  qtq.sql.Clone(),
		path: qtq.path,
	}
}

// WithQuestions tells the query-builder to eager-load the nodes that are connected to
// the "questions" edge. The optional arguments are used to configure the query builder of the edge.
func (qtq *QuestionTypeQuery) WithQuestions(opts ...func(*QuestionQuery)) *QuestionTypeQuery {
	query := (&QuestionClient{config: qtq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	qtq.withQuestions = query
	return qtq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Description string `json:"description,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.QuestionType.Query().
//		GroupBy(questiontype.FieldDescription).
//		Aggregate(db.Count()).
//		Scan(ctx, &v)
func (qtq *QuestionTypeQuery) GroupBy(field string, fields ...string) *QuestionTypeGroupBy {
	qtq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &QuestionTypeGroupBy{build: qtq}
	grbuild.flds = &qtq.ctx.Fields
	grbuild.label = questiontype.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Description string `json:"description,omitempty"`
//	}
//
//	client.QuestionType.Query().
//		Select(questiontype.FieldDescription).
//		Scan(ctx, &v)
func (qtq *QuestionTypeQuery) Select(fields ...string) *QuestionTypeSelect {
	qtq.ctx.Fields = append(qtq.ctx.Fields, fields...)
	sbuild := &QuestionTypeSelect{QuestionTypeQuery: qtq}
	sbuild.label = questiontype.Label
	sbuild.flds, sbuild.scan = &qtq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a QuestionTypeSelect configured with the given aggregations.
func (qtq *QuestionTypeQuery) Aggregate(fns ...AggregateFunc) *QuestionTypeSelect {
	return qtq.Select().Aggregate(fns...)
}

func (qtq *QuestionTypeQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range qtq.inters {
		if inter == nil {
			return fmt.Errorf("db: uninitialized interceptor (forgotten import db/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, qtq); err != nil {
				return err
			}
		}
	}
	for _, f := range qtq.ctx.Fields {
		if !questiontype.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("db: invalid field %q for query", f)}
		}
	}
	if qtq.path != nil {
		prev, err := qtq.path(ctx)
		if err != nil {
			return err
		}
		qtq.sql = prev
	}
	return nil
}

func (qtq *QuestionTypeQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*QuestionType, error) {
	var (
		nodes       = []*QuestionType{}
		_spec       = qtq.querySpec()
		loadedTypes = [1]bool{
			qtq.withQuestions != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*QuestionType).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &QuestionType{config: qtq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, qtq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := qtq.withQuestions; query != nil {
		if err := qtq.loadQuestions(ctx, query, nodes,
			func(n *QuestionType) { n.Edges.Questions = []*Question{} },
			func(n *QuestionType, e *Question) { n.Edges.Questions = append(n.Edges.Questions, e) }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (qtq *QuestionTypeQuery) loadQuestions(ctx context.Context, query *QuestionQuery, nodes []*QuestionType, init func(*QuestionType), assign func(*QuestionType, *Question)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[int]*QuestionType)
	nids := make(map[uuid.UUID]map[*QuestionType]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(questiontype.QuestionsTable)
		s.Join(joinT).On(s.C(question.FieldID), joinT.C(questiontype.QuestionsPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(questiontype.QuestionsPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(questiontype.QuestionsPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullInt64)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := int(values[0].(*sql.NullInt64).Int64)
				inValue := *values[1].(*uuid.UUID)
				if nids[inValue] == nil {
					nids[inValue] = map[*QuestionType]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Question](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "questions" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}

func (qtq *QuestionTypeQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := qtq.querySpec()
	_spec.Node.Columns = qtq.ctx.Fields
	if len(qtq.ctx.Fields) > 0 {
		_spec.Unique = qtq.ctx.Unique != nil && *qtq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, qtq.driver, _spec)
}

func (qtq *QuestionTypeQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(questiontype.Table, questiontype.Columns, sqlgraph.NewFieldSpec(questiontype.FieldID, field.TypeInt))
	_spec.From = qtq.sql
	if unique := qtq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if qtq.path != nil {
		_spec.Unique = true
	}
	if fields := qtq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, questiontype.FieldID)
		for i := range fields {
			if fields[i] != questiontype.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := qtq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := qtq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := qtq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := qtq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (qtq *QuestionTypeQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(qtq.driver.Dialect())
	t1 := builder.Table(questiontype.Table)
	columns := qtq.ctx.Fields
	if len(columns) == 0 {
		columns = questiontype.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if qtq.sql != nil {
		selector = qtq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if qtq.ctx.Unique != nil && *qtq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range qtq.predicates {
		p(selector)
	}
	for _, p := range qtq.order {
		p(selector)
	}
	if offset := qtq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := qtq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// QuestionTypeGroupBy is the group-by builder for QuestionType entities.
type QuestionTypeGroupBy struct {
	selector
	build *QuestionTypeQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (qtgb *QuestionTypeGroupBy) Aggregate(fns ...AggregateFunc) *QuestionTypeGroupBy {
	qtgb.fns = append(qtgb.fns, fns...)
	return qtgb
}

// Scan applies the selector query and scans the result into the given value.
func (qtgb *QuestionTypeGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, qtgb.build.ctx, "GroupBy")
	if err := qtgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*QuestionTypeQuery, *QuestionTypeGroupBy](ctx, qtgb.build, qtgb, qtgb.build.inters, v)
}

func (qtgb *QuestionTypeGroupBy) sqlScan(ctx context.Context, root *QuestionTypeQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(qtgb.fns))
	for _, fn := range qtgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*qtgb.flds)+len(qtgb.fns))
		for _, f := range *qtgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*qtgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := qtgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// QuestionTypeSelect is the builder for selecting fields of QuestionType entities.
type QuestionTypeSelect struct {
	*QuestionTypeQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (qts *QuestionTypeSelect) Aggregate(fns ...AggregateFunc) *QuestionTypeSelect {
	qts.fns = append(qts.fns, fns...)
	return qts
}

// Scan applies the selector query and scans the result into the given value.
func (qts *QuestionTypeSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, qts.ctx, "Select")
	if err := qts.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*QuestionTypeQuery, *QuestionTypeSelect](ctx, qts.QuestionTypeQuery, qts, qts.inters, v)
}

func (qts *QuestionTypeSelect) sqlScan(ctx context.Context, root *QuestionTypeQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(qts.fns))
	for _, fn := range qts.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*qts.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := qts.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
