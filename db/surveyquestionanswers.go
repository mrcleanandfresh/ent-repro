// Code generated by ent, DO NOT EDIT.

package db

import (
	"fmt"
	"strings"
	"test/db/answer"
	"test/db/question"
	"test/db/survey"
	"test/db/surveyquestionanswers"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// SurveyQuestionAnswers is the model entity for the SurveyQuestionAnswers schema.
type SurveyQuestionAnswers struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// QuestionNum holds the value of the "question_num" field.
	QuestionNum int64 `json:"question_num,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SurveyQuestionAnswersQuery when eager-loading is set.
	Edges                            SurveyQuestionAnswersEdges `json:"edges"`
	answer_survey_question_answers   *uuid.UUID
	question_survey_question_answers *uuid.UUID
	survey_survey_question_answers   *uuid.UUID
	selectValues                     sql.SelectValues
}

// SurveyQuestionAnswersEdges holds the relations/edges for other nodes in the graph.
type SurveyQuestionAnswersEdges struct {
	// Survey holds the value of the survey edge.
	Survey *Survey `json:"survey,omitempty"`
	// Question holds the value of the question edge.
	Question *Question `json:"question,omitempty"`
	// Answer holds the value of the answer edge.
	Answer *Answer `json:"answer,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// SurveyOrErr returns the Survey value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SurveyQuestionAnswersEdges) SurveyOrErr() (*Survey, error) {
	if e.loadedTypes[0] {
		if e.Survey == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: survey.Label}
		}
		return e.Survey, nil
	}
	return nil, &NotLoadedError{edge: "survey"}
}

// QuestionOrErr returns the Question value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SurveyQuestionAnswersEdges) QuestionOrErr() (*Question, error) {
	if e.loadedTypes[1] {
		if e.Question == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: question.Label}
		}
		return e.Question, nil
	}
	return nil, &NotLoadedError{edge: "question"}
}

// AnswerOrErr returns the Answer value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SurveyQuestionAnswersEdges) AnswerOrErr() (*Answer, error) {
	if e.loadedTypes[2] {
		if e.Answer == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: answer.Label}
		}
		return e.Answer, nil
	}
	return nil, &NotLoadedError{edge: "answer"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SurveyQuestionAnswers) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case surveyquestionanswers.FieldID, surveyquestionanswers.FieldQuestionNum:
			values[i] = new(sql.NullInt64)
		case surveyquestionanswers.ForeignKeys[0]: // answer_survey_question_answers
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case surveyquestionanswers.ForeignKeys[1]: // question_survey_question_answers
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case surveyquestionanswers.ForeignKeys[2]: // survey_survey_question_answers
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SurveyQuestionAnswers fields.
func (sqa *SurveyQuestionAnswers) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case surveyquestionanswers.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			sqa.ID = int(value.Int64)
		case surveyquestionanswers.FieldQuestionNum:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field question_num", values[i])
			} else if value.Valid {
				sqa.QuestionNum = value.Int64
			}
		case surveyquestionanswers.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field answer_survey_question_answers", values[i])
			} else if value.Valid {
				sqa.answer_survey_question_answers = new(uuid.UUID)
				*sqa.answer_survey_question_answers = *value.S.(*uuid.UUID)
			}
		case surveyquestionanswers.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field question_survey_question_answers", values[i])
			} else if value.Valid {
				sqa.question_survey_question_answers = new(uuid.UUID)
				*sqa.question_survey_question_answers = *value.S.(*uuid.UUID)
			}
		case surveyquestionanswers.ForeignKeys[2]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field survey_survey_question_answers", values[i])
			} else if value.Valid {
				sqa.survey_survey_question_answers = new(uuid.UUID)
				*sqa.survey_survey_question_answers = *value.S.(*uuid.UUID)
			}
		default:
			sqa.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the SurveyQuestionAnswers.
// This includes values selected through modifiers, order, etc.
func (sqa *SurveyQuestionAnswers) Value(name string) (ent.Value, error) {
	return sqa.selectValues.Get(name)
}

// QuerySurvey queries the "survey" edge of the SurveyQuestionAnswers entity.
func (sqa *SurveyQuestionAnswers) QuerySurvey() *SurveyQuery {
	return NewSurveyQuestionAnswersClient(sqa.config).QuerySurvey(sqa)
}

// QueryQuestion queries the "question" edge of the SurveyQuestionAnswers entity.
func (sqa *SurveyQuestionAnswers) QueryQuestion() *QuestionQuery {
	return NewSurveyQuestionAnswersClient(sqa.config).QueryQuestion(sqa)
}

// QueryAnswer queries the "answer" edge of the SurveyQuestionAnswers entity.
func (sqa *SurveyQuestionAnswers) QueryAnswer() *AnswerQuery {
	return NewSurveyQuestionAnswersClient(sqa.config).QueryAnswer(sqa)
}

// Update returns a builder for updating this SurveyQuestionAnswers.
// Note that you need to call SurveyQuestionAnswers.Unwrap() before calling this method if this SurveyQuestionAnswers
// was returned from a transaction, and the transaction was committed or rolled back.
func (sqa *SurveyQuestionAnswers) Update() *SurveyQuestionAnswersUpdateOne {
	return NewSurveyQuestionAnswersClient(sqa.config).UpdateOne(sqa)
}

// Unwrap unwraps the SurveyQuestionAnswers entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (sqa *SurveyQuestionAnswers) Unwrap() *SurveyQuestionAnswers {
	_tx, ok := sqa.config.driver.(*txDriver)
	if !ok {
		panic("db: SurveyQuestionAnswers is not a transactional entity")
	}
	sqa.config.driver = _tx.drv
	return sqa
}

// String implements the fmt.Stringer.
func (sqa *SurveyQuestionAnswers) String() string {
	var builder strings.Builder
	builder.WriteString("SurveyQuestionAnswers(")
	builder.WriteString(fmt.Sprintf("id=%v, ", sqa.ID))
	builder.WriteString("question_num=")
	builder.WriteString(fmt.Sprintf("%v", sqa.QuestionNum))
	builder.WriteByte(')')
	return builder.String()
}

// SurveyQuestionAnswersSlice is a parsable slice of SurveyQuestionAnswers.
type SurveyQuestionAnswersSlice []*SurveyQuestionAnswers
