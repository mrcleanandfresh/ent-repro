// Code generated by ent, DO NOT EDIT.

package surveyquestionanswers

import (
	"test/db/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.SurveyQuestionAnswers {
	return predicate.SurveyQuestionAnswers(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.SurveyQuestionAnswers {
	return predicate.SurveyQuestionAnswers(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.SurveyQuestionAnswers {
	return predicate.SurveyQuestionAnswers(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.SurveyQuestionAnswers {
	return predicate.SurveyQuestionAnswers(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.SurveyQuestionAnswers {
	return predicate.SurveyQuestionAnswers(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.SurveyQuestionAnswers {
	return predicate.SurveyQuestionAnswers(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.SurveyQuestionAnswers {
	return predicate.SurveyQuestionAnswers(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.SurveyQuestionAnswers {
	return predicate.SurveyQuestionAnswers(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.SurveyQuestionAnswers {
	return predicate.SurveyQuestionAnswers(sql.FieldLTE(FieldID, id))
}

// QuestionNum applies equality check predicate on the "question_num" field. It's identical to QuestionNumEQ.
func QuestionNum(v int64) predicate.SurveyQuestionAnswers {
	return predicate.SurveyQuestionAnswers(sql.FieldEQ(FieldQuestionNum, v))
}

// QuestionNumEQ applies the EQ predicate on the "question_num" field.
func QuestionNumEQ(v int64) predicate.SurveyQuestionAnswers {
	return predicate.SurveyQuestionAnswers(sql.FieldEQ(FieldQuestionNum, v))
}

// QuestionNumNEQ applies the NEQ predicate on the "question_num" field.
func QuestionNumNEQ(v int64) predicate.SurveyQuestionAnswers {
	return predicate.SurveyQuestionAnswers(sql.FieldNEQ(FieldQuestionNum, v))
}

// QuestionNumIn applies the In predicate on the "question_num" field.
func QuestionNumIn(vs ...int64) predicate.SurveyQuestionAnswers {
	return predicate.SurveyQuestionAnswers(sql.FieldIn(FieldQuestionNum, vs...))
}

// QuestionNumNotIn applies the NotIn predicate on the "question_num" field.
func QuestionNumNotIn(vs ...int64) predicate.SurveyQuestionAnswers {
	return predicate.SurveyQuestionAnswers(sql.FieldNotIn(FieldQuestionNum, vs...))
}

// QuestionNumGT applies the GT predicate on the "question_num" field.
func QuestionNumGT(v int64) predicate.SurveyQuestionAnswers {
	return predicate.SurveyQuestionAnswers(sql.FieldGT(FieldQuestionNum, v))
}

// QuestionNumGTE applies the GTE predicate on the "question_num" field.
func QuestionNumGTE(v int64) predicate.SurveyQuestionAnswers {
	return predicate.SurveyQuestionAnswers(sql.FieldGTE(FieldQuestionNum, v))
}

// QuestionNumLT applies the LT predicate on the "question_num" field.
func QuestionNumLT(v int64) predicate.SurveyQuestionAnswers {
	return predicate.SurveyQuestionAnswers(sql.FieldLT(FieldQuestionNum, v))
}

// QuestionNumLTE applies the LTE predicate on the "question_num" field.
func QuestionNumLTE(v int64) predicate.SurveyQuestionAnswers {
	return predicate.SurveyQuestionAnswers(sql.FieldLTE(FieldQuestionNum, v))
}

// HasSurvey applies the HasEdge predicate on the "survey" edge.
func HasSurvey() predicate.SurveyQuestionAnswers {
	return predicate.SurveyQuestionAnswers(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, SurveyTable, SurveyColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSurveyWith applies the HasEdge predicate on the "survey" edge with a given conditions (other predicates).
func HasSurveyWith(preds ...predicate.Survey) predicate.SurveyQuestionAnswers {
	return predicate.SurveyQuestionAnswers(func(s *sql.Selector) {
		step := newSurveyStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasQuestion applies the HasEdge predicate on the "question" edge.
func HasQuestion() predicate.SurveyQuestionAnswers {
	return predicate.SurveyQuestionAnswers(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, QuestionTable, QuestionColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasQuestionWith applies the HasEdge predicate on the "question" edge with a given conditions (other predicates).
func HasQuestionWith(preds ...predicate.Question) predicate.SurveyQuestionAnswers {
	return predicate.SurveyQuestionAnswers(func(s *sql.Selector) {
		step := newQuestionStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasAnswer applies the HasEdge predicate on the "answer" edge.
func HasAnswer() predicate.SurveyQuestionAnswers {
	return predicate.SurveyQuestionAnswers(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, AnswerTable, AnswerColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAnswerWith applies the HasEdge predicate on the "answer" edge with a given conditions (other predicates).
func HasAnswerWith(preds ...predicate.Answer) predicate.SurveyQuestionAnswers {
	return predicate.SurveyQuestionAnswers(func(s *sql.Selector) {
		step := newAnswerStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.SurveyQuestionAnswers) predicate.SurveyQuestionAnswers {
	return predicate.SurveyQuestionAnswers(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.SurveyQuestionAnswers) predicate.SurveyQuestionAnswers {
	return predicate.SurveyQuestionAnswers(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.SurveyQuestionAnswers) predicate.SurveyQuestionAnswers {
	return predicate.SurveyQuestionAnswers(sql.NotPredicates(p))
}
