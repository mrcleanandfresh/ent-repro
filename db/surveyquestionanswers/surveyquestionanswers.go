// Code generated by ent, DO NOT EDIT.

package surveyquestionanswers

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the surveyquestionanswers type in the database.
	Label = "survey_question_answers"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldQuestionNum holds the string denoting the question_num field in the database.
	FieldQuestionNum = "question_num"
	// EdgeSurvey holds the string denoting the survey edge name in mutations.
	EdgeSurvey = "survey"
	// EdgeQuestion holds the string denoting the question edge name in mutations.
	EdgeQuestion = "question"
	// EdgeAnswer holds the string denoting the answer edge name in mutations.
	EdgeAnswer = "answer"
	// SurveyFieldID holds the string denoting the ID field of the Survey.
	SurveyFieldID = "oid"
	// QuestionFieldID holds the string denoting the ID field of the Question.
	QuestionFieldID = "oid"
	// AnswerFieldID holds the string denoting the ID field of the Answer.
	AnswerFieldID = "oid"
	// Table holds the table name of the surveyquestionanswers in the database.
	Table = "survey_question_answers"
	// SurveyTable is the table that holds the survey relation/edge.
	SurveyTable = "survey_question_answers"
	// SurveyInverseTable is the table name for the Survey entity.
	// It exists in this package in order to avoid circular dependency with the "survey" package.
	SurveyInverseTable = "surveys"
	// SurveyColumn is the table column denoting the survey relation/edge.
	SurveyColumn = "survey_survey_question_answers"
	// QuestionTable is the table that holds the question relation/edge.
	QuestionTable = "survey_question_answers"
	// QuestionInverseTable is the table name for the Question entity.
	// It exists in this package in order to avoid circular dependency with the "question" package.
	QuestionInverseTable = "questions"
	// QuestionColumn is the table column denoting the question relation/edge.
	QuestionColumn = "question_survey_question_answers"
	// AnswerTable is the table that holds the answer relation/edge.
	AnswerTable = "survey_question_answers"
	// AnswerInverseTable is the table name for the Answer entity.
	// It exists in this package in order to avoid circular dependency with the "answer" package.
	AnswerInverseTable = "answers"
	// AnswerColumn is the table column denoting the answer relation/edge.
	AnswerColumn = "answer_survey_question_answers"
)

// Columns holds all SQL columns for surveyquestionanswers fields.
var Columns = []string{
	FieldID,
	FieldQuestionNum,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "survey_question_answers"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"answer_survey_question_answers",
	"question_survey_question_answers",
	"survey_survey_question_answers",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultQuestionNum holds the default value on creation for the "question_num" field.
	DefaultQuestionNum int64
)

// OrderOption defines the ordering options for the SurveyQuestionAnswers queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByQuestionNum orders the results by the question_num field.
func ByQuestionNum(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldQuestionNum, opts...).ToFunc()
}

// BySurveyField orders the results by survey field.
func BySurveyField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSurveyStep(), sql.OrderByField(field, opts...))
	}
}

// ByQuestionField orders the results by question field.
func ByQuestionField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newQuestionStep(), sql.OrderByField(field, opts...))
	}
}

// ByAnswerField orders the results by answer field.
func ByAnswerField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAnswerStep(), sql.OrderByField(field, opts...))
	}
}
func newSurveyStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SurveyInverseTable, SurveyFieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, SurveyTable, SurveyColumn),
	)
}
func newQuestionStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(QuestionInverseTable, QuestionFieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, QuestionTable, QuestionColumn),
	)
}
func newAnswerStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AnswerInverseTable, AnswerFieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, AnswerTable, AnswerColumn),
	)
}
