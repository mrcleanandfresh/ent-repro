// Code generated by ent, DO NOT EDIT.

package questiontype

import (
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the questiontype type in the database.
	Label = "question_type"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// EdgeQuestions holds the string denoting the questions edge name in mutations.
	EdgeQuestions = "questions"
	// QuestionFieldID holds the string denoting the ID field of the Question.
	QuestionFieldID = "oid"
	// Table holds the table name of the questiontype in the database.
	Table = "question_types"
	// QuestionsTable is the table that holds the questions relation/edge. The primary key declared below.
	QuestionsTable = "question_type_questions"
	// QuestionsInverseTable is the table name for the Question entity.
	// It exists in this package in order to avoid circular dependency with the "question" package.
	QuestionsInverseTable = "questions"
)

// Columns holds all SQL columns for questiontype fields.
var Columns = []string{
	FieldID,
	FieldDescription,
	FieldType,
}

var (
	// QuestionsPrimaryKey and QuestionsColumn2 are the table columns denoting the
	// primary key for the questions relation (M2M).
	QuestionsPrimaryKey = []string{"question_type_id", "question_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Type defines the type for the "type" enum field.
type Type string

// Type values.
const (
	TypeMULTIPLE_CHOICE Type = "MULTIPLE_CHOICE"
	TypeNUMBER          Type = "NUMBER"
	TypeMAP             Type = "MAP"
	TypeSHORT           Type = "SHORT"
	TypeESSAY           Type = "ESSAY"
	TypeKEY_VALUE       Type = "KEY_VALUE"
)

func (_type Type) String() string {
	return string(_type)
}

// TypeValidator is a validator for the "type" field enum values. It is called by the builders before save.
func TypeValidator(_type Type) error {
	switch _type {
	case TypeMULTIPLE_CHOICE, TypeNUMBER, TypeMAP, TypeSHORT, TypeESSAY, TypeKEY_VALUE:
		return nil
	default:
		return fmt.Errorf("questiontype: invalid enum value for type field: %q", _type)
	}
}

// OrderOption defines the ordering options for the QuestionType queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// ByQuestionsCount orders the results by questions count.
func ByQuestionsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newQuestionsStep(), opts...)
	}
}

// ByQuestions orders the results by questions terms.
func ByQuestions(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newQuestionsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newQuestionsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(QuestionsInverseTable, QuestionFieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, QuestionsTable, QuestionsPrimaryKey...),
	)
}
