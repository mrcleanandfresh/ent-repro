// Code generated by ent, DO NOT EDIT.

package db

import (
	"encoding/json"
	"fmt"
	"strings"
	"test/db/customer"
	"test/db/project"
	"test/db/survey"
	"test/db/surveyinvitation"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// SurveyInvitation is the model entity for the SurveyInvitation schema.
type SurveyInvitation struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Status holds the value of the "status" field.
	Status surveyinvitation.Status `json:"status,omitempty"`
	// Sent holds the value of the "sent" field.
	Sent bool `json:"sent,omitempty"`
	// SentTimes holds the value of the "sent_times" field.
	SentTimes []string `json:"sent_times,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SurveyInvitationQuery when eager-loading is set.
	Edges                       SurveyInvitationEdges `json:"edges"`
	customer_survey_invitations *uuid.UUID
	project_survey_invitations  *uuid.UUID
	survey_survey_invitations   *uuid.UUID
	selectValues                sql.SelectValues
}

// SurveyInvitationEdges holds the relations/edges for other nodes in the graph.
type SurveyInvitationEdges struct {
	// Customer holds the value of the customer edge.
	Customer *Customer `json:"customer,omitempty"`
	// Project holds the value of the project edge.
	Project *Project `json:"project,omitempty"`
	// Survey holds the value of the survey edge.
	Survey *Survey `json:"survey,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// CustomerOrErr returns the Customer value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SurveyInvitationEdges) CustomerOrErr() (*Customer, error) {
	if e.loadedTypes[0] {
		if e.Customer == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: customer.Label}
		}
		return e.Customer, nil
	}
	return nil, &NotLoadedError{edge: "customer"}
}

// ProjectOrErr returns the Project value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SurveyInvitationEdges) ProjectOrErr() (*Project, error) {
	if e.loadedTypes[1] {
		if e.Project == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: project.Label}
		}
		return e.Project, nil
	}
	return nil, &NotLoadedError{edge: "project"}
}

// SurveyOrErr returns the Survey value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SurveyInvitationEdges) SurveyOrErr() (*Survey, error) {
	if e.loadedTypes[2] {
		if e.Survey == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: survey.Label}
		}
		return e.Survey, nil
	}
	return nil, &NotLoadedError{edge: "survey"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SurveyInvitation) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case surveyinvitation.FieldSentTimes:
			values[i] = new([]byte)
		case surveyinvitation.FieldSent:
			values[i] = new(sql.NullBool)
		case surveyinvitation.FieldID:
			values[i] = new(sql.NullInt64)
		case surveyinvitation.FieldStatus:
			values[i] = new(sql.NullString)
		case surveyinvitation.FieldCreatedAt, surveyinvitation.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case surveyinvitation.ForeignKeys[0]: // customer_survey_invitations
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case surveyinvitation.ForeignKeys[1]: // project_survey_invitations
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case surveyinvitation.ForeignKeys[2]: // survey_survey_invitations
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SurveyInvitation fields.
func (si *SurveyInvitation) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case surveyinvitation.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			si.ID = int(value.Int64)
		case surveyinvitation.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				si.Status = surveyinvitation.Status(value.String)
			}
		case surveyinvitation.FieldSent:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field sent", values[i])
			} else if value.Valid {
				si.Sent = value.Bool
			}
		case surveyinvitation.FieldSentTimes:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field sent_times", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &si.SentTimes); err != nil {
					return fmt.Errorf("unmarshal field sent_times: %w", err)
				}
			}
		case surveyinvitation.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				si.CreatedAt = value.Time
			}
		case surveyinvitation.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				si.UpdatedAt = value.Time
			}
		case surveyinvitation.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field customer_survey_invitations", values[i])
			} else if value.Valid {
				si.customer_survey_invitations = new(uuid.UUID)
				*si.customer_survey_invitations = *value.S.(*uuid.UUID)
			}
		case surveyinvitation.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field project_survey_invitations", values[i])
			} else if value.Valid {
				si.project_survey_invitations = new(uuid.UUID)
				*si.project_survey_invitations = *value.S.(*uuid.UUID)
			}
		case surveyinvitation.ForeignKeys[2]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field survey_survey_invitations", values[i])
			} else if value.Valid {
				si.survey_survey_invitations = new(uuid.UUID)
				*si.survey_survey_invitations = *value.S.(*uuid.UUID)
			}
		default:
			si.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the SurveyInvitation.
// This includes values selected through modifiers, order, etc.
func (si *SurveyInvitation) Value(name string) (ent.Value, error) {
	return si.selectValues.Get(name)
}

// QueryCustomer queries the "customer" edge of the SurveyInvitation entity.
func (si *SurveyInvitation) QueryCustomer() *CustomerQuery {
	return NewSurveyInvitationClient(si.config).QueryCustomer(si)
}

// QueryProject queries the "project" edge of the SurveyInvitation entity.
func (si *SurveyInvitation) QueryProject() *ProjectQuery {
	return NewSurveyInvitationClient(si.config).QueryProject(si)
}

// QuerySurvey queries the "survey" edge of the SurveyInvitation entity.
func (si *SurveyInvitation) QuerySurvey() *SurveyQuery {
	return NewSurveyInvitationClient(si.config).QuerySurvey(si)
}

// Update returns a builder for updating this SurveyInvitation.
// Note that you need to call SurveyInvitation.Unwrap() before calling this method if this SurveyInvitation
// was returned from a transaction, and the transaction was committed or rolled back.
func (si *SurveyInvitation) Update() *SurveyInvitationUpdateOne {
	return NewSurveyInvitationClient(si.config).UpdateOne(si)
}

// Unwrap unwraps the SurveyInvitation entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (si *SurveyInvitation) Unwrap() *SurveyInvitation {
	_tx, ok := si.config.driver.(*txDriver)
	if !ok {
		panic("db: SurveyInvitation is not a transactional entity")
	}
	si.config.driver = _tx.drv
	return si
}

// String implements the fmt.Stringer.
func (si *SurveyInvitation) String() string {
	var builder strings.Builder
	builder.WriteString("SurveyInvitation(")
	builder.WriteString(fmt.Sprintf("id=%v, ", si.ID))
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", si.Status))
	builder.WriteString(", ")
	builder.WriteString("sent=")
	builder.WriteString(fmt.Sprintf("%v", si.Sent))
	builder.WriteString(", ")
	builder.WriteString("sent_times=")
	builder.WriteString(fmt.Sprintf("%v", si.SentTimes))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(si.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(si.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// SurveyInvitations is a parsable slice of SurveyInvitation.
type SurveyInvitations []*SurveyInvitation
