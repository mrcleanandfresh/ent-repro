// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"test/db/customer"
	"test/db/project"
	"test/db/survey"
	"test/db/surveyinvitation"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// SurveyInvitationCreate is the builder for creating a SurveyInvitation entity.
type SurveyInvitationCreate struct {
	config
	mutation *SurveyInvitationMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetStatus sets the "status" field.
func (sic *SurveyInvitationCreate) SetStatus(s surveyinvitation.Status) *SurveyInvitationCreate {
	sic.mutation.SetStatus(s)
	return sic
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (sic *SurveyInvitationCreate) SetNillableStatus(s *surveyinvitation.Status) *SurveyInvitationCreate {
	if s != nil {
		sic.SetStatus(*s)
	}
	return sic
}

// SetSent sets the "sent" field.
func (sic *SurveyInvitationCreate) SetSent(b bool) *SurveyInvitationCreate {
	sic.mutation.SetSent(b)
	return sic
}

// SetNillableSent sets the "sent" field if the given value is not nil.
func (sic *SurveyInvitationCreate) SetNillableSent(b *bool) *SurveyInvitationCreate {
	if b != nil {
		sic.SetSent(*b)
	}
	return sic
}

// SetSentTimes sets the "sent_times" field.
func (sic *SurveyInvitationCreate) SetSentTimes(s []string) *SurveyInvitationCreate {
	sic.mutation.SetSentTimes(s)
	return sic
}

// SetCreatedAt sets the "created_at" field.
func (sic *SurveyInvitationCreate) SetCreatedAt(t time.Time) *SurveyInvitationCreate {
	sic.mutation.SetCreatedAt(t)
	return sic
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (sic *SurveyInvitationCreate) SetNillableCreatedAt(t *time.Time) *SurveyInvitationCreate {
	if t != nil {
		sic.SetCreatedAt(*t)
	}
	return sic
}

// SetUpdatedAt sets the "updated_at" field.
func (sic *SurveyInvitationCreate) SetUpdatedAt(t time.Time) *SurveyInvitationCreate {
	sic.mutation.SetUpdatedAt(t)
	return sic
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (sic *SurveyInvitationCreate) SetNillableUpdatedAt(t *time.Time) *SurveyInvitationCreate {
	if t != nil {
		sic.SetUpdatedAt(*t)
	}
	return sic
}

// SetCustomerID sets the "customer" edge to the Customer entity by ID.
func (sic *SurveyInvitationCreate) SetCustomerID(id uuid.UUID) *SurveyInvitationCreate {
	sic.mutation.SetCustomerID(id)
	return sic
}

// SetNillableCustomerID sets the "customer" edge to the Customer entity by ID if the given value is not nil.
func (sic *SurveyInvitationCreate) SetNillableCustomerID(id *uuid.UUID) *SurveyInvitationCreate {
	if id != nil {
		sic = sic.SetCustomerID(*id)
	}
	return sic
}

// SetCustomer sets the "customer" edge to the Customer entity.
func (sic *SurveyInvitationCreate) SetCustomer(c *Customer) *SurveyInvitationCreate {
	return sic.SetCustomerID(c.ID)
}

// SetProjectID sets the "project" edge to the Project entity by ID.
func (sic *SurveyInvitationCreate) SetProjectID(id uuid.UUID) *SurveyInvitationCreate {
	sic.mutation.SetProjectID(id)
	return sic
}

// SetNillableProjectID sets the "project" edge to the Project entity by ID if the given value is not nil.
func (sic *SurveyInvitationCreate) SetNillableProjectID(id *uuid.UUID) *SurveyInvitationCreate {
	if id != nil {
		sic = sic.SetProjectID(*id)
	}
	return sic
}

// SetProject sets the "project" edge to the Project entity.
func (sic *SurveyInvitationCreate) SetProject(p *Project) *SurveyInvitationCreate {
	return sic.SetProjectID(p.ID)
}

// SetSurveyID sets the "survey" edge to the Survey entity by ID.
func (sic *SurveyInvitationCreate) SetSurveyID(id uuid.UUID) *SurveyInvitationCreate {
	sic.mutation.SetSurveyID(id)
	return sic
}

// SetNillableSurveyID sets the "survey" edge to the Survey entity by ID if the given value is not nil.
func (sic *SurveyInvitationCreate) SetNillableSurveyID(id *uuid.UUID) *SurveyInvitationCreate {
	if id != nil {
		sic = sic.SetSurveyID(*id)
	}
	return sic
}

// SetSurvey sets the "survey" edge to the Survey entity.
func (sic *SurveyInvitationCreate) SetSurvey(s *Survey) *SurveyInvitationCreate {
	return sic.SetSurveyID(s.ID)
}

// Mutation returns the SurveyInvitationMutation object of the builder.
func (sic *SurveyInvitationCreate) Mutation() *SurveyInvitationMutation {
	return sic.mutation
}

// Save creates the SurveyInvitation in the database.
func (sic *SurveyInvitationCreate) Save(ctx context.Context) (*SurveyInvitation, error) {
	sic.defaults()
	return withHooks(ctx, sic.sqlSave, sic.mutation, sic.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (sic *SurveyInvitationCreate) SaveX(ctx context.Context) *SurveyInvitation {
	v, err := sic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sic *SurveyInvitationCreate) Exec(ctx context.Context) error {
	_, err := sic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sic *SurveyInvitationCreate) ExecX(ctx context.Context) {
	if err := sic.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sic *SurveyInvitationCreate) defaults() {
	if _, ok := sic.mutation.Status(); !ok {
		v := surveyinvitation.DefaultStatus
		sic.mutation.SetStatus(v)
	}
	if _, ok := sic.mutation.Sent(); !ok {
		v := surveyinvitation.DefaultSent
		sic.mutation.SetSent(v)
	}
	if _, ok := sic.mutation.SentTimes(); !ok {
		v := surveyinvitation.DefaultSentTimes
		sic.mutation.SetSentTimes(v)
	}
	if _, ok := sic.mutation.CreatedAt(); !ok {
		v := surveyinvitation.DefaultCreatedAt()
		sic.mutation.SetCreatedAt(v)
	}
	if _, ok := sic.mutation.UpdatedAt(); !ok {
		v := surveyinvitation.DefaultUpdatedAt()
		sic.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sic *SurveyInvitationCreate) check() error {
	if _, ok := sic.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`db: missing required field "SurveyInvitation.status"`)}
	}
	if v, ok := sic.mutation.Status(); ok {
		if err := surveyinvitation.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`db: validator failed for field "SurveyInvitation.status": %w`, err)}
		}
	}
	if _, ok := sic.mutation.Sent(); !ok {
		return &ValidationError{Name: "sent", err: errors.New(`db: missing required field "SurveyInvitation.sent"`)}
	}
	if _, ok := sic.mutation.SentTimes(); !ok {
		return &ValidationError{Name: "sent_times", err: errors.New(`db: missing required field "SurveyInvitation.sent_times"`)}
	}
	if _, ok := sic.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`db: missing required field "SurveyInvitation.created_at"`)}
	}
	if _, ok := sic.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`db: missing required field "SurveyInvitation.updated_at"`)}
	}
	return nil
}

func (sic *SurveyInvitationCreate) sqlSave(ctx context.Context) (*SurveyInvitation, error) {
	if err := sic.check(); err != nil {
		return nil, err
	}
	_node, _spec := sic.createSpec()
	if err := sqlgraph.CreateNode(ctx, sic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	sic.mutation.id = &_node.ID
	sic.mutation.done = true
	return _node, nil
}

func (sic *SurveyInvitationCreate) createSpec() (*SurveyInvitation, *sqlgraph.CreateSpec) {
	var (
		_node = &SurveyInvitation{config: sic.config}
		_spec = sqlgraph.NewCreateSpec(surveyinvitation.Table, sqlgraph.NewFieldSpec(surveyinvitation.FieldID, field.TypeInt))
	)
	_spec.OnConflict = sic.conflict
	if value, ok := sic.mutation.Status(); ok {
		_spec.SetField(surveyinvitation.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := sic.mutation.Sent(); ok {
		_spec.SetField(surveyinvitation.FieldSent, field.TypeBool, value)
		_node.Sent = value
	}
	if value, ok := sic.mutation.SentTimes(); ok {
		_spec.SetField(surveyinvitation.FieldSentTimes, field.TypeJSON, value)
		_node.SentTimes = value
	}
	if value, ok := sic.mutation.CreatedAt(); ok {
		_spec.SetField(surveyinvitation.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := sic.mutation.UpdatedAt(); ok {
		_spec.SetField(surveyinvitation.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := sic.mutation.CustomerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   surveyinvitation.CustomerTable,
			Columns: []string{surveyinvitation.CustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customer.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.customer_survey_invitations = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sic.mutation.ProjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   surveyinvitation.ProjectTable,
			Columns: []string{surveyinvitation.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.project_survey_invitations = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sic.mutation.SurveyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   surveyinvitation.SurveyTable,
			Columns: []string{surveyinvitation.SurveyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(survey.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.survey_survey_invitations = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.SurveyInvitation.Create().
//		SetStatus(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SurveyInvitationUpsert) {
//			SetStatus(v+v).
//		}).
//		Exec(ctx)
func (sic *SurveyInvitationCreate) OnConflict(opts ...sql.ConflictOption) *SurveyInvitationUpsertOne {
	sic.conflict = opts
	return &SurveyInvitationUpsertOne{
		create: sic,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.SurveyInvitation.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (sic *SurveyInvitationCreate) OnConflictColumns(columns ...string) *SurveyInvitationUpsertOne {
	sic.conflict = append(sic.conflict, sql.ConflictColumns(columns...))
	return &SurveyInvitationUpsertOne{
		create: sic,
	}
}

type (
	// SurveyInvitationUpsertOne is the builder for "upsert"-ing
	//  one SurveyInvitation node.
	SurveyInvitationUpsertOne struct {
		create *SurveyInvitationCreate
	}

	// SurveyInvitationUpsert is the "OnConflict" setter.
	SurveyInvitationUpsert struct {
		*sql.UpdateSet
	}
)

// SetStatus sets the "status" field.
func (u *SurveyInvitationUpsert) SetStatus(v surveyinvitation.Status) *SurveyInvitationUpsert {
	u.Set(surveyinvitation.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *SurveyInvitationUpsert) UpdateStatus() *SurveyInvitationUpsert {
	u.SetExcluded(surveyinvitation.FieldStatus)
	return u
}

// SetSent sets the "sent" field.
func (u *SurveyInvitationUpsert) SetSent(v bool) *SurveyInvitationUpsert {
	u.Set(surveyinvitation.FieldSent, v)
	return u
}

// UpdateSent sets the "sent" field to the value that was provided on create.
func (u *SurveyInvitationUpsert) UpdateSent() *SurveyInvitationUpsert {
	u.SetExcluded(surveyinvitation.FieldSent)
	return u
}

// SetSentTimes sets the "sent_times" field.
func (u *SurveyInvitationUpsert) SetSentTimes(v []string) *SurveyInvitationUpsert {
	u.Set(surveyinvitation.FieldSentTimes, v)
	return u
}

// UpdateSentTimes sets the "sent_times" field to the value that was provided on create.
func (u *SurveyInvitationUpsert) UpdateSentTimes() *SurveyInvitationUpsert {
	u.SetExcluded(surveyinvitation.FieldSentTimes)
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *SurveyInvitationUpsert) SetCreatedAt(v time.Time) *SurveyInvitationUpsert {
	u.Set(surveyinvitation.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *SurveyInvitationUpsert) UpdateCreatedAt() *SurveyInvitationUpsert {
	u.SetExcluded(surveyinvitation.FieldCreatedAt)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *SurveyInvitationUpsert) SetUpdatedAt(v time.Time) *SurveyInvitationUpsert {
	u.Set(surveyinvitation.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *SurveyInvitationUpsert) UpdateUpdatedAt() *SurveyInvitationUpsert {
	u.SetExcluded(surveyinvitation.FieldUpdatedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.SurveyInvitation.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *SurveyInvitationUpsertOne) UpdateNewValues() *SurveyInvitationUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.SurveyInvitation.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *SurveyInvitationUpsertOne) Ignore() *SurveyInvitationUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SurveyInvitationUpsertOne) DoNothing() *SurveyInvitationUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SurveyInvitationCreate.OnConflict
// documentation for more info.
func (u *SurveyInvitationUpsertOne) Update(set func(*SurveyInvitationUpsert)) *SurveyInvitationUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SurveyInvitationUpsert{UpdateSet: update})
	}))
	return u
}

// SetStatus sets the "status" field.
func (u *SurveyInvitationUpsertOne) SetStatus(v surveyinvitation.Status) *SurveyInvitationUpsertOne {
	return u.Update(func(s *SurveyInvitationUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *SurveyInvitationUpsertOne) UpdateStatus() *SurveyInvitationUpsertOne {
	return u.Update(func(s *SurveyInvitationUpsert) {
		s.UpdateStatus()
	})
}

// SetSent sets the "sent" field.
func (u *SurveyInvitationUpsertOne) SetSent(v bool) *SurveyInvitationUpsertOne {
	return u.Update(func(s *SurveyInvitationUpsert) {
		s.SetSent(v)
	})
}

// UpdateSent sets the "sent" field to the value that was provided on create.
func (u *SurveyInvitationUpsertOne) UpdateSent() *SurveyInvitationUpsertOne {
	return u.Update(func(s *SurveyInvitationUpsert) {
		s.UpdateSent()
	})
}

// SetSentTimes sets the "sent_times" field.
func (u *SurveyInvitationUpsertOne) SetSentTimes(v []string) *SurveyInvitationUpsertOne {
	return u.Update(func(s *SurveyInvitationUpsert) {
		s.SetSentTimes(v)
	})
}

// UpdateSentTimes sets the "sent_times" field to the value that was provided on create.
func (u *SurveyInvitationUpsertOne) UpdateSentTimes() *SurveyInvitationUpsertOne {
	return u.Update(func(s *SurveyInvitationUpsert) {
		s.UpdateSentTimes()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *SurveyInvitationUpsertOne) SetCreatedAt(v time.Time) *SurveyInvitationUpsertOne {
	return u.Update(func(s *SurveyInvitationUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *SurveyInvitationUpsertOne) UpdateCreatedAt() *SurveyInvitationUpsertOne {
	return u.Update(func(s *SurveyInvitationUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *SurveyInvitationUpsertOne) SetUpdatedAt(v time.Time) *SurveyInvitationUpsertOne {
	return u.Update(func(s *SurveyInvitationUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *SurveyInvitationUpsertOne) UpdateUpdatedAt() *SurveyInvitationUpsertOne {
	return u.Update(func(s *SurveyInvitationUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *SurveyInvitationUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("db: missing options for SurveyInvitationCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SurveyInvitationUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *SurveyInvitationUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *SurveyInvitationUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// SurveyInvitationCreateBulk is the builder for creating many SurveyInvitation entities in bulk.
type SurveyInvitationCreateBulk struct {
	config
	err      error
	builders []*SurveyInvitationCreate
	conflict []sql.ConflictOption
}

// Save creates the SurveyInvitation entities in the database.
func (sicb *SurveyInvitationCreateBulk) Save(ctx context.Context) ([]*SurveyInvitation, error) {
	if sicb.err != nil {
		return nil, sicb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(sicb.builders))
	nodes := make([]*SurveyInvitation, len(sicb.builders))
	mutators := make([]Mutator, len(sicb.builders))
	for i := range sicb.builders {
		func(i int, root context.Context) {
			builder := sicb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SurveyInvitationMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, sicb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = sicb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, sicb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, sicb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (sicb *SurveyInvitationCreateBulk) SaveX(ctx context.Context) []*SurveyInvitation {
	v, err := sicb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sicb *SurveyInvitationCreateBulk) Exec(ctx context.Context) error {
	_, err := sicb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sicb *SurveyInvitationCreateBulk) ExecX(ctx context.Context) {
	if err := sicb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.SurveyInvitation.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SurveyInvitationUpsert) {
//			SetStatus(v+v).
//		}).
//		Exec(ctx)
func (sicb *SurveyInvitationCreateBulk) OnConflict(opts ...sql.ConflictOption) *SurveyInvitationUpsertBulk {
	sicb.conflict = opts
	return &SurveyInvitationUpsertBulk{
		create: sicb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.SurveyInvitation.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (sicb *SurveyInvitationCreateBulk) OnConflictColumns(columns ...string) *SurveyInvitationUpsertBulk {
	sicb.conflict = append(sicb.conflict, sql.ConflictColumns(columns...))
	return &SurveyInvitationUpsertBulk{
		create: sicb,
	}
}

// SurveyInvitationUpsertBulk is the builder for "upsert"-ing
// a bulk of SurveyInvitation nodes.
type SurveyInvitationUpsertBulk struct {
	create *SurveyInvitationCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.SurveyInvitation.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *SurveyInvitationUpsertBulk) UpdateNewValues() *SurveyInvitationUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.SurveyInvitation.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *SurveyInvitationUpsertBulk) Ignore() *SurveyInvitationUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SurveyInvitationUpsertBulk) DoNothing() *SurveyInvitationUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SurveyInvitationCreateBulk.OnConflict
// documentation for more info.
func (u *SurveyInvitationUpsertBulk) Update(set func(*SurveyInvitationUpsert)) *SurveyInvitationUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SurveyInvitationUpsert{UpdateSet: update})
	}))
	return u
}

// SetStatus sets the "status" field.
func (u *SurveyInvitationUpsertBulk) SetStatus(v surveyinvitation.Status) *SurveyInvitationUpsertBulk {
	return u.Update(func(s *SurveyInvitationUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *SurveyInvitationUpsertBulk) UpdateStatus() *SurveyInvitationUpsertBulk {
	return u.Update(func(s *SurveyInvitationUpsert) {
		s.UpdateStatus()
	})
}

// SetSent sets the "sent" field.
func (u *SurveyInvitationUpsertBulk) SetSent(v bool) *SurveyInvitationUpsertBulk {
	return u.Update(func(s *SurveyInvitationUpsert) {
		s.SetSent(v)
	})
}

// UpdateSent sets the "sent" field to the value that was provided on create.
func (u *SurveyInvitationUpsertBulk) UpdateSent() *SurveyInvitationUpsertBulk {
	return u.Update(func(s *SurveyInvitationUpsert) {
		s.UpdateSent()
	})
}

// SetSentTimes sets the "sent_times" field.
func (u *SurveyInvitationUpsertBulk) SetSentTimes(v []string) *SurveyInvitationUpsertBulk {
	return u.Update(func(s *SurveyInvitationUpsert) {
		s.SetSentTimes(v)
	})
}

// UpdateSentTimes sets the "sent_times" field to the value that was provided on create.
func (u *SurveyInvitationUpsertBulk) UpdateSentTimes() *SurveyInvitationUpsertBulk {
	return u.Update(func(s *SurveyInvitationUpsert) {
		s.UpdateSentTimes()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *SurveyInvitationUpsertBulk) SetCreatedAt(v time.Time) *SurveyInvitationUpsertBulk {
	return u.Update(func(s *SurveyInvitationUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *SurveyInvitationUpsertBulk) UpdateCreatedAt() *SurveyInvitationUpsertBulk {
	return u.Update(func(s *SurveyInvitationUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *SurveyInvitationUpsertBulk) SetUpdatedAt(v time.Time) *SurveyInvitationUpsertBulk {
	return u.Update(func(s *SurveyInvitationUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *SurveyInvitationUpsertBulk) UpdateUpdatedAt() *SurveyInvitationUpsertBulk {
	return u.Update(func(s *SurveyInvitationUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *SurveyInvitationUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("db: OnConflict was set for builder %d. Set it on the SurveyInvitationCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("db: missing options for SurveyInvitationCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SurveyInvitationUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
