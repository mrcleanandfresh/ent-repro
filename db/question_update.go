// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"test/db/choice"
	"test/db/predicate"
	"test/db/question"
	"test/db/questiontype"
	"test/db/schema/schematype"
	"test/db/surveyquestionanswers"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// QuestionUpdate is the builder for updating Question entities.
type QuestionUpdate struct {
	config
	hooks    []Hook
	mutation *QuestionMutation
}

// Where appends a list predicates to the QuestionUpdate builder.
func (qu *QuestionUpdate) Where(ps ...predicate.Question) *QuestionUpdate {
	qu.mutation.Where(ps...)
	return qu
}

// SetText sets the "text" field.
func (qu *QuestionUpdate) SetText(s string) *QuestionUpdate {
	qu.mutation.SetText(s)
	return qu
}

// SetSubText sets the "sub_text" field.
func (qu *QuestionUpdate) SetSubText(s string) *QuestionUpdate {
	qu.mutation.SetSubText(s)
	return qu
}

// SetNillableSubText sets the "sub_text" field if the given value is not nil.
func (qu *QuestionUpdate) SetNillableSubText(s *string) *QuestionUpdate {
	if s != nil {
		qu.SetSubText(*s)
	}
	return qu
}

// ClearSubText clears the value of the "sub_text" field.
func (qu *QuestionUpdate) ClearSubText() *QuestionUpdate {
	qu.mutation.ClearSubText()
	return qu
}

// SetWeight sets the "weight" field.
func (qu *QuestionUpdate) SetWeight(i int) *QuestionUpdate {
	qu.mutation.ResetWeight()
	qu.mutation.SetWeight(i)
	return qu
}

// SetNillableWeight sets the "weight" field if the given value is not nil.
func (qu *QuestionUpdate) SetNillableWeight(i *int) *QuestionUpdate {
	if i != nil {
		qu.SetWeight(*i)
	}
	return qu
}

// AddWeight adds i to the "weight" field.
func (qu *QuestionUpdate) AddWeight(i int) *QuestionUpdate {
	qu.mutation.AddWeight(i)
	return qu
}

// ClearWeight clears the value of the "weight" field.
func (qu *QuestionUpdate) ClearWeight() *QuestionUpdate {
	qu.mutation.ClearWeight()
	return qu
}

// SetRequired sets the "required" field.
func (qu *QuestionUpdate) SetRequired(b bool) *QuestionUpdate {
	qu.mutation.SetRequired(b)
	return qu
}

// SetNillableRequired sets the "required" field if the given value is not nil.
func (qu *QuestionUpdate) SetNillableRequired(b *bool) *QuestionUpdate {
	if b != nil {
		qu.SetRequired(*b)
	}
	return qu
}

// ClearRequired clears the value of the "required" field.
func (qu *QuestionUpdate) ClearRequired() *QuestionUpdate {
	qu.mutation.ClearRequired()
	return qu
}

// SetMeta sets the "meta" field.
func (qu *QuestionUpdate) SetMeta(s *schematype.Metadata) *QuestionUpdate {
	qu.mutation.SetMeta(s)
	return qu
}

// SetUpdatedAt sets the "updated_at" field.
func (qu *QuestionUpdate) SetUpdatedAt(t time.Time) *QuestionUpdate {
	qu.mutation.SetUpdatedAt(t)
	return qu
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (qu *QuestionUpdate) SetNillableUpdatedAt(t *time.Time) *QuestionUpdate {
	if t != nil {
		qu.SetUpdatedAt(*t)
	}
	return qu
}

// AddSurveyQuestionAnswerIDs adds the "survey_question_answers" edge to the SurveyQuestionAnswers entity by IDs.
func (qu *QuestionUpdate) AddSurveyQuestionAnswerIDs(ids ...int) *QuestionUpdate {
	qu.mutation.AddSurveyQuestionAnswerIDs(ids...)
	return qu
}

// AddSurveyQuestionAnswers adds the "survey_question_answers" edges to the SurveyQuestionAnswers entity.
func (qu *QuestionUpdate) AddSurveyQuestionAnswers(s ...*SurveyQuestionAnswers) *QuestionUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return qu.AddSurveyQuestionAnswerIDs(ids...)
}

// AddQuestionTypeIDs adds the "questionType" edge to the QuestionType entity by IDs.
func (qu *QuestionUpdate) AddQuestionTypeIDs(ids ...int) *QuestionUpdate {
	qu.mutation.AddQuestionTypeIDs(ids...)
	return qu
}

// AddQuestionType adds the "questionType" edges to the QuestionType entity.
func (qu *QuestionUpdate) AddQuestionType(q ...*QuestionType) *QuestionUpdate {
	ids := make([]int, len(q))
	for i := range q {
		ids[i] = q[i].ID
	}
	return qu.AddQuestionTypeIDs(ids...)
}

// AddChoiceIDs adds the "choices" edge to the Choice entity by IDs.
func (qu *QuestionUpdate) AddChoiceIDs(ids ...int) *QuestionUpdate {
	qu.mutation.AddChoiceIDs(ids...)
	return qu
}

// AddChoices adds the "choices" edges to the Choice entity.
func (qu *QuestionUpdate) AddChoices(c ...*Choice) *QuestionUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return qu.AddChoiceIDs(ids...)
}

// Mutation returns the QuestionMutation object of the builder.
func (qu *QuestionUpdate) Mutation() *QuestionMutation {
	return qu.mutation
}

// ClearSurveyQuestionAnswers clears all "survey_question_answers" edges to the SurveyQuestionAnswers entity.
func (qu *QuestionUpdate) ClearSurveyQuestionAnswers() *QuestionUpdate {
	qu.mutation.ClearSurveyQuestionAnswers()
	return qu
}

// RemoveSurveyQuestionAnswerIDs removes the "survey_question_answers" edge to SurveyQuestionAnswers entities by IDs.
func (qu *QuestionUpdate) RemoveSurveyQuestionAnswerIDs(ids ...int) *QuestionUpdate {
	qu.mutation.RemoveSurveyQuestionAnswerIDs(ids...)
	return qu
}

// RemoveSurveyQuestionAnswers removes "survey_question_answers" edges to SurveyQuestionAnswers entities.
func (qu *QuestionUpdate) RemoveSurveyQuestionAnswers(s ...*SurveyQuestionAnswers) *QuestionUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return qu.RemoveSurveyQuestionAnswerIDs(ids...)
}

// ClearQuestionType clears all "questionType" edges to the QuestionType entity.
func (qu *QuestionUpdate) ClearQuestionType() *QuestionUpdate {
	qu.mutation.ClearQuestionType()
	return qu
}

// RemoveQuestionTypeIDs removes the "questionType" edge to QuestionType entities by IDs.
func (qu *QuestionUpdate) RemoveQuestionTypeIDs(ids ...int) *QuestionUpdate {
	qu.mutation.RemoveQuestionTypeIDs(ids...)
	return qu
}

// RemoveQuestionType removes "questionType" edges to QuestionType entities.
func (qu *QuestionUpdate) RemoveQuestionType(q ...*QuestionType) *QuestionUpdate {
	ids := make([]int, len(q))
	for i := range q {
		ids[i] = q[i].ID
	}
	return qu.RemoveQuestionTypeIDs(ids...)
}

// ClearChoices clears all "choices" edges to the Choice entity.
func (qu *QuestionUpdate) ClearChoices() *QuestionUpdate {
	qu.mutation.ClearChoices()
	return qu
}

// RemoveChoiceIDs removes the "choices" edge to Choice entities by IDs.
func (qu *QuestionUpdate) RemoveChoiceIDs(ids ...int) *QuestionUpdate {
	qu.mutation.RemoveChoiceIDs(ids...)
	return qu
}

// RemoveChoices removes "choices" edges to Choice entities.
func (qu *QuestionUpdate) RemoveChoices(c ...*Choice) *QuestionUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return qu.RemoveChoiceIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (qu *QuestionUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, qu.sqlSave, qu.mutation, qu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (qu *QuestionUpdate) SaveX(ctx context.Context) int {
	affected, err := qu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (qu *QuestionUpdate) Exec(ctx context.Context) error {
	_, err := qu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (qu *QuestionUpdate) ExecX(ctx context.Context) {
	if err := qu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (qu *QuestionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(question.Table, question.Columns, sqlgraph.NewFieldSpec(question.FieldID, field.TypeUUID))
	if ps := qu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := qu.mutation.Text(); ok {
		_spec.SetField(question.FieldText, field.TypeString, value)
	}
	if value, ok := qu.mutation.SubText(); ok {
		_spec.SetField(question.FieldSubText, field.TypeString, value)
	}
	if qu.mutation.SubTextCleared() {
		_spec.ClearField(question.FieldSubText, field.TypeString)
	}
	if value, ok := qu.mutation.Weight(); ok {
		_spec.SetField(question.FieldWeight, field.TypeInt, value)
	}
	if value, ok := qu.mutation.AddedWeight(); ok {
		_spec.AddField(question.FieldWeight, field.TypeInt, value)
	}
	if qu.mutation.WeightCleared() {
		_spec.ClearField(question.FieldWeight, field.TypeInt)
	}
	if value, ok := qu.mutation.Required(); ok {
		_spec.SetField(question.FieldRequired, field.TypeBool, value)
	}
	if qu.mutation.RequiredCleared() {
		_spec.ClearField(question.FieldRequired, field.TypeBool)
	}
	if value, ok := qu.mutation.Meta(); ok {
		_spec.SetField(question.FieldMeta, field.TypeJSON, value)
	}
	if value, ok := qu.mutation.UpdatedAt(); ok {
		_spec.SetField(question.FieldUpdatedAt, field.TypeTime, value)
	}
	if qu.mutation.SurveyQuestionAnswersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   question.SurveyQuestionAnswersTable,
			Columns: []string{question.SurveyQuestionAnswersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(surveyquestionanswers.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := qu.mutation.RemovedSurveyQuestionAnswersIDs(); len(nodes) > 0 && !qu.mutation.SurveyQuestionAnswersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   question.SurveyQuestionAnswersTable,
			Columns: []string{question.SurveyQuestionAnswersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(surveyquestionanswers.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := qu.mutation.SurveyQuestionAnswersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   question.SurveyQuestionAnswersTable,
			Columns: []string{question.SurveyQuestionAnswersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(surveyquestionanswers.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if qu.mutation.QuestionTypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   question.QuestionTypeTable,
			Columns: question.QuestionTypePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(questiontype.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := qu.mutation.RemovedQuestionTypeIDs(); len(nodes) > 0 && !qu.mutation.QuestionTypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   question.QuestionTypeTable,
			Columns: question.QuestionTypePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(questiontype.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := qu.mutation.QuestionTypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   question.QuestionTypeTable,
			Columns: question.QuestionTypePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(questiontype.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if qu.mutation.ChoicesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   question.ChoicesTable,
			Columns: []string{question.ChoicesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(choice.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := qu.mutation.RemovedChoicesIDs(); len(nodes) > 0 && !qu.mutation.ChoicesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   question.ChoicesTable,
			Columns: []string{question.ChoicesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(choice.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := qu.mutation.ChoicesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   question.ChoicesTable,
			Columns: []string{question.ChoicesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(choice.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, qu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{question.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	qu.mutation.done = true
	return n, nil
}

// QuestionUpdateOne is the builder for updating a single Question entity.
type QuestionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *QuestionMutation
}

// SetText sets the "text" field.
func (quo *QuestionUpdateOne) SetText(s string) *QuestionUpdateOne {
	quo.mutation.SetText(s)
	return quo
}

// SetSubText sets the "sub_text" field.
func (quo *QuestionUpdateOne) SetSubText(s string) *QuestionUpdateOne {
	quo.mutation.SetSubText(s)
	return quo
}

// SetNillableSubText sets the "sub_text" field if the given value is not nil.
func (quo *QuestionUpdateOne) SetNillableSubText(s *string) *QuestionUpdateOne {
	if s != nil {
		quo.SetSubText(*s)
	}
	return quo
}

// ClearSubText clears the value of the "sub_text" field.
func (quo *QuestionUpdateOne) ClearSubText() *QuestionUpdateOne {
	quo.mutation.ClearSubText()
	return quo
}

// SetWeight sets the "weight" field.
func (quo *QuestionUpdateOne) SetWeight(i int) *QuestionUpdateOne {
	quo.mutation.ResetWeight()
	quo.mutation.SetWeight(i)
	return quo
}

// SetNillableWeight sets the "weight" field if the given value is not nil.
func (quo *QuestionUpdateOne) SetNillableWeight(i *int) *QuestionUpdateOne {
	if i != nil {
		quo.SetWeight(*i)
	}
	return quo
}

// AddWeight adds i to the "weight" field.
func (quo *QuestionUpdateOne) AddWeight(i int) *QuestionUpdateOne {
	quo.mutation.AddWeight(i)
	return quo
}

// ClearWeight clears the value of the "weight" field.
func (quo *QuestionUpdateOne) ClearWeight() *QuestionUpdateOne {
	quo.mutation.ClearWeight()
	return quo
}

// SetRequired sets the "required" field.
func (quo *QuestionUpdateOne) SetRequired(b bool) *QuestionUpdateOne {
	quo.mutation.SetRequired(b)
	return quo
}

// SetNillableRequired sets the "required" field if the given value is not nil.
func (quo *QuestionUpdateOne) SetNillableRequired(b *bool) *QuestionUpdateOne {
	if b != nil {
		quo.SetRequired(*b)
	}
	return quo
}

// ClearRequired clears the value of the "required" field.
func (quo *QuestionUpdateOne) ClearRequired() *QuestionUpdateOne {
	quo.mutation.ClearRequired()
	return quo
}

// SetMeta sets the "meta" field.
func (quo *QuestionUpdateOne) SetMeta(s *schematype.Metadata) *QuestionUpdateOne {
	quo.mutation.SetMeta(s)
	return quo
}

// SetUpdatedAt sets the "updated_at" field.
func (quo *QuestionUpdateOne) SetUpdatedAt(t time.Time) *QuestionUpdateOne {
	quo.mutation.SetUpdatedAt(t)
	return quo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (quo *QuestionUpdateOne) SetNillableUpdatedAt(t *time.Time) *QuestionUpdateOne {
	if t != nil {
		quo.SetUpdatedAt(*t)
	}
	return quo
}

// AddSurveyQuestionAnswerIDs adds the "survey_question_answers" edge to the SurveyQuestionAnswers entity by IDs.
func (quo *QuestionUpdateOne) AddSurveyQuestionAnswerIDs(ids ...int) *QuestionUpdateOne {
	quo.mutation.AddSurveyQuestionAnswerIDs(ids...)
	return quo
}

// AddSurveyQuestionAnswers adds the "survey_question_answers" edges to the SurveyQuestionAnswers entity.
func (quo *QuestionUpdateOne) AddSurveyQuestionAnswers(s ...*SurveyQuestionAnswers) *QuestionUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return quo.AddSurveyQuestionAnswerIDs(ids...)
}

// AddQuestionTypeIDs adds the "questionType" edge to the QuestionType entity by IDs.
func (quo *QuestionUpdateOne) AddQuestionTypeIDs(ids ...int) *QuestionUpdateOne {
	quo.mutation.AddQuestionTypeIDs(ids...)
	return quo
}

// AddQuestionType adds the "questionType" edges to the QuestionType entity.
func (quo *QuestionUpdateOne) AddQuestionType(q ...*QuestionType) *QuestionUpdateOne {
	ids := make([]int, len(q))
	for i := range q {
		ids[i] = q[i].ID
	}
	return quo.AddQuestionTypeIDs(ids...)
}

// AddChoiceIDs adds the "choices" edge to the Choice entity by IDs.
func (quo *QuestionUpdateOne) AddChoiceIDs(ids ...int) *QuestionUpdateOne {
	quo.mutation.AddChoiceIDs(ids...)
	return quo
}

// AddChoices adds the "choices" edges to the Choice entity.
func (quo *QuestionUpdateOne) AddChoices(c ...*Choice) *QuestionUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return quo.AddChoiceIDs(ids...)
}

// Mutation returns the QuestionMutation object of the builder.
func (quo *QuestionUpdateOne) Mutation() *QuestionMutation {
	return quo.mutation
}

// ClearSurveyQuestionAnswers clears all "survey_question_answers" edges to the SurveyQuestionAnswers entity.
func (quo *QuestionUpdateOne) ClearSurveyQuestionAnswers() *QuestionUpdateOne {
	quo.mutation.ClearSurveyQuestionAnswers()
	return quo
}

// RemoveSurveyQuestionAnswerIDs removes the "survey_question_answers" edge to SurveyQuestionAnswers entities by IDs.
func (quo *QuestionUpdateOne) RemoveSurveyQuestionAnswerIDs(ids ...int) *QuestionUpdateOne {
	quo.mutation.RemoveSurveyQuestionAnswerIDs(ids...)
	return quo
}

// RemoveSurveyQuestionAnswers removes "survey_question_answers" edges to SurveyQuestionAnswers entities.
func (quo *QuestionUpdateOne) RemoveSurveyQuestionAnswers(s ...*SurveyQuestionAnswers) *QuestionUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return quo.RemoveSurveyQuestionAnswerIDs(ids...)
}

// ClearQuestionType clears all "questionType" edges to the QuestionType entity.
func (quo *QuestionUpdateOne) ClearQuestionType() *QuestionUpdateOne {
	quo.mutation.ClearQuestionType()
	return quo
}

// RemoveQuestionTypeIDs removes the "questionType" edge to QuestionType entities by IDs.
func (quo *QuestionUpdateOne) RemoveQuestionTypeIDs(ids ...int) *QuestionUpdateOne {
	quo.mutation.RemoveQuestionTypeIDs(ids...)
	return quo
}

// RemoveQuestionType removes "questionType" edges to QuestionType entities.
func (quo *QuestionUpdateOne) RemoveQuestionType(q ...*QuestionType) *QuestionUpdateOne {
	ids := make([]int, len(q))
	for i := range q {
		ids[i] = q[i].ID
	}
	return quo.RemoveQuestionTypeIDs(ids...)
}

// ClearChoices clears all "choices" edges to the Choice entity.
func (quo *QuestionUpdateOne) ClearChoices() *QuestionUpdateOne {
	quo.mutation.ClearChoices()
	return quo
}

// RemoveChoiceIDs removes the "choices" edge to Choice entities by IDs.
func (quo *QuestionUpdateOne) RemoveChoiceIDs(ids ...int) *QuestionUpdateOne {
	quo.mutation.RemoveChoiceIDs(ids...)
	return quo
}

// RemoveChoices removes "choices" edges to Choice entities.
func (quo *QuestionUpdateOne) RemoveChoices(c ...*Choice) *QuestionUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return quo.RemoveChoiceIDs(ids...)
}

// Where appends a list predicates to the QuestionUpdate builder.
func (quo *QuestionUpdateOne) Where(ps ...predicate.Question) *QuestionUpdateOne {
	quo.mutation.Where(ps...)
	return quo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (quo *QuestionUpdateOne) Select(field string, fields ...string) *QuestionUpdateOne {
	quo.fields = append([]string{field}, fields...)
	return quo
}

// Save executes the query and returns the updated Question entity.
func (quo *QuestionUpdateOne) Save(ctx context.Context) (*Question, error) {
	return withHooks(ctx, quo.sqlSave, quo.mutation, quo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (quo *QuestionUpdateOne) SaveX(ctx context.Context) *Question {
	node, err := quo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (quo *QuestionUpdateOne) Exec(ctx context.Context) error {
	_, err := quo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (quo *QuestionUpdateOne) ExecX(ctx context.Context) {
	if err := quo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (quo *QuestionUpdateOne) sqlSave(ctx context.Context) (_node *Question, err error) {
	_spec := sqlgraph.NewUpdateSpec(question.Table, question.Columns, sqlgraph.NewFieldSpec(question.FieldID, field.TypeUUID))
	id, ok := quo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`db: missing "Question.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := quo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, question.FieldID)
		for _, f := range fields {
			if !question.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("db: invalid field %q for query", f)}
			}
			if f != question.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := quo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := quo.mutation.Text(); ok {
		_spec.SetField(question.FieldText, field.TypeString, value)
	}
	if value, ok := quo.mutation.SubText(); ok {
		_spec.SetField(question.FieldSubText, field.TypeString, value)
	}
	if quo.mutation.SubTextCleared() {
		_spec.ClearField(question.FieldSubText, field.TypeString)
	}
	if value, ok := quo.mutation.Weight(); ok {
		_spec.SetField(question.FieldWeight, field.TypeInt, value)
	}
	if value, ok := quo.mutation.AddedWeight(); ok {
		_spec.AddField(question.FieldWeight, field.TypeInt, value)
	}
	if quo.mutation.WeightCleared() {
		_spec.ClearField(question.FieldWeight, field.TypeInt)
	}
	if value, ok := quo.mutation.Required(); ok {
		_spec.SetField(question.FieldRequired, field.TypeBool, value)
	}
	if quo.mutation.RequiredCleared() {
		_spec.ClearField(question.FieldRequired, field.TypeBool)
	}
	if value, ok := quo.mutation.Meta(); ok {
		_spec.SetField(question.FieldMeta, field.TypeJSON, value)
	}
	if value, ok := quo.mutation.UpdatedAt(); ok {
		_spec.SetField(question.FieldUpdatedAt, field.TypeTime, value)
	}
	if quo.mutation.SurveyQuestionAnswersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   question.SurveyQuestionAnswersTable,
			Columns: []string{question.SurveyQuestionAnswersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(surveyquestionanswers.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := quo.mutation.RemovedSurveyQuestionAnswersIDs(); len(nodes) > 0 && !quo.mutation.SurveyQuestionAnswersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   question.SurveyQuestionAnswersTable,
			Columns: []string{question.SurveyQuestionAnswersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(surveyquestionanswers.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := quo.mutation.SurveyQuestionAnswersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   question.SurveyQuestionAnswersTable,
			Columns: []string{question.SurveyQuestionAnswersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(surveyquestionanswers.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if quo.mutation.QuestionTypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   question.QuestionTypeTable,
			Columns: question.QuestionTypePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(questiontype.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := quo.mutation.RemovedQuestionTypeIDs(); len(nodes) > 0 && !quo.mutation.QuestionTypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   question.QuestionTypeTable,
			Columns: question.QuestionTypePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(questiontype.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := quo.mutation.QuestionTypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   question.QuestionTypeTable,
			Columns: question.QuestionTypePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(questiontype.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if quo.mutation.ChoicesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   question.ChoicesTable,
			Columns: []string{question.ChoicesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(choice.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := quo.mutation.RemovedChoicesIDs(); len(nodes) > 0 && !quo.mutation.ChoicesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   question.ChoicesTable,
			Columns: []string{question.ChoicesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(choice.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := quo.mutation.ChoicesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   question.ChoicesTable,
			Columns: []string{question.ChoicesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(choice.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Question{config: quo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, quo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{question.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	quo.mutation.done = true
	return _node, nil
}
