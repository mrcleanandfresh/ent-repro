// Code generated by ent, DO NOT EDIT.

package db

import (
	"fmt"
	"strings"
	"test/db/questiontype"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// QuestionType is the model entity for the QuestionType schema.
type QuestionType struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// Type holds the value of the "type" field.
	Type questiontype.Type `json:"type,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the QuestionTypeQuery when eager-loading is set.
	Edges        QuestionTypeEdges `json:"edges"`
	selectValues sql.SelectValues
}

// QuestionTypeEdges holds the relations/edges for other nodes in the graph.
type QuestionTypeEdges struct {
	// Questions holds the value of the questions edge.
	Questions []*Question `json:"questions,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// QuestionsOrErr returns the Questions value or an error if the edge
// was not loaded in eager-loading.
func (e QuestionTypeEdges) QuestionsOrErr() ([]*Question, error) {
	if e.loadedTypes[0] {
		return e.Questions, nil
	}
	return nil, &NotLoadedError{edge: "questions"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*QuestionType) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case questiontype.FieldID:
			values[i] = new(sql.NullInt64)
		case questiontype.FieldDescription, questiontype.FieldType:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the QuestionType fields.
func (qt *QuestionType) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case questiontype.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			qt.ID = int(value.Int64)
		case questiontype.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				qt.Description = value.String
			}
		case questiontype.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				qt.Type = questiontype.Type(value.String)
			}
		default:
			qt.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the QuestionType.
// This includes values selected through modifiers, order, etc.
func (qt *QuestionType) Value(name string) (ent.Value, error) {
	return qt.selectValues.Get(name)
}

// QueryQuestions queries the "questions" edge of the QuestionType entity.
func (qt *QuestionType) QueryQuestions() *QuestionQuery {
	return NewQuestionTypeClient(qt.config).QueryQuestions(qt)
}

// Update returns a builder for updating this QuestionType.
// Note that you need to call QuestionType.Unwrap() before calling this method if this QuestionType
// was returned from a transaction, and the transaction was committed or rolled back.
func (qt *QuestionType) Update() *QuestionTypeUpdateOne {
	return NewQuestionTypeClient(qt.config).UpdateOne(qt)
}

// Unwrap unwraps the QuestionType entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (qt *QuestionType) Unwrap() *QuestionType {
	_tx, ok := qt.config.driver.(*txDriver)
	if !ok {
		panic("db: QuestionType is not a transactional entity")
	}
	qt.config.driver = _tx.drv
	return qt
}

// String implements the fmt.Stringer.
func (qt *QuestionType) String() string {
	var builder strings.Builder
	builder.WriteString("QuestionType(")
	builder.WriteString(fmt.Sprintf("id=%v, ", qt.ID))
	builder.WriteString("description=")
	builder.WriteString(qt.Description)
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(fmt.Sprintf("%v", qt.Type))
	builder.WriteByte(')')
	return builder.String()
}

// QuestionTypes is a parsable slice of QuestionType.
type QuestionTypes []*QuestionType
