// Code generated by ent, DO NOT EDIT.

package survey

import (
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the survey type in the database.
	Label = "survey"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "oid"
	// FieldIdentifier holds the string denoting the identifier field in the database.
	FieldIdentifier = "identifier"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeSurveyQuestionAnswers holds the string denoting the survey_question_answers edge name in mutations.
	EdgeSurveyQuestionAnswers = "survey_question_answers"
	// EdgeSurveyInvitations holds the string denoting the survey_invitations edge name in mutations.
	EdgeSurveyInvitations = "survey_invitations"
	// SurveyQuestionAnswersFieldID holds the string denoting the ID field of the SurveyQuestionAnswers.
	SurveyQuestionAnswersFieldID = "id"
	// SurveyInvitationFieldID holds the string denoting the ID field of the SurveyInvitation.
	SurveyInvitationFieldID = "id"
	// Table holds the table name of the survey in the database.
	Table = "surveys"
	// SurveyQuestionAnswersTable is the table that holds the survey_question_answers relation/edge.
	SurveyQuestionAnswersTable = "survey_question_answers"
	// SurveyQuestionAnswersInverseTable is the table name for the SurveyQuestionAnswers entity.
	// It exists in this package in order to avoid circular dependency with the "surveyquestionanswers" package.
	SurveyQuestionAnswersInverseTable = "survey_question_answers"
	// SurveyQuestionAnswersColumn is the table column denoting the survey_question_answers relation/edge.
	SurveyQuestionAnswersColumn = "survey_survey_question_answers"
	// SurveyInvitationsTable is the table that holds the survey_invitations relation/edge.
	SurveyInvitationsTable = "survey_invitations"
	// SurveyInvitationsInverseTable is the table name for the SurveyInvitation entity.
	// It exists in this package in order to avoid circular dependency with the "surveyinvitation" package.
	SurveyInvitationsInverseTable = "survey_invitations"
	// SurveyInvitationsColumn is the table column denoting the survey_invitations relation/edge.
	SurveyInvitationsColumn = "survey_survey_invitations"
)

// Columns holds all SQL columns for survey fields.
var Columns = []string{
	FieldID,
	FieldIdentifier,
	FieldName,
	FieldDescription,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "test/db/runtime"
var (
	Hooks [1]ent.Hook
	// DefaultIdentifier holds the default value on creation for the "identifier" field.
	DefaultIdentifier func() string
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// DescriptionValidator is a validator for the "description" field. It is called by the builders before save.
	DescriptionValidator func(string) error
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the Survey queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByIdentifier orders the results by the identifier field.
func ByIdentifier(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIdentifier, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// BySurveyQuestionAnswersCount orders the results by survey_question_answers count.
func BySurveyQuestionAnswersCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newSurveyQuestionAnswersStep(), opts...)
	}
}

// BySurveyQuestionAnswers orders the results by survey_question_answers terms.
func BySurveyQuestionAnswers(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSurveyQuestionAnswersStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// BySurveyInvitationsCount orders the results by survey_invitations count.
func BySurveyInvitationsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newSurveyInvitationsStep(), opts...)
	}
}

// BySurveyInvitations orders the results by survey_invitations terms.
func BySurveyInvitations(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSurveyInvitationsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newSurveyQuestionAnswersStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SurveyQuestionAnswersInverseTable, SurveyQuestionAnswersFieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, SurveyQuestionAnswersTable, SurveyQuestionAnswersColumn),
	)
}
func newSurveyInvitationsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SurveyInvitationsInverseTable, SurveyInvitationFieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, SurveyInvitationsTable, SurveyInvitationsColumn),
	)
}
